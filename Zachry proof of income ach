---
title: Working with the Apache Maven registry
intro: 'You can configure Apache Maven to publish packages to {% data variables.product.prodname_registry %} and to use packages stored on {% data variables.product.prodname_registry %} as dependencies in a Java project.'
product: '{% data reusables.gated-features.packages %}'
redirect_from:
  - /articles/configuring-apache-maven-for-use-with-github-package-registry
  - /github/managing-packages-with-github-package-registry/configuring-apache-maven-for-use-with-github-package-registry
  - /github/managing-packages-with-github-packages/configuring-apache-maven-for-use-with-github-packages
  - /packages/using-github-packages-with-your-projects-ecosystem/configuring-apache-maven-for-use-with-github-packages
  - /packages/guides/configuring-apache-maven-for-use-with-github-packages
versions:
  free-pro-team: '*'
  enterprise-server: '>=2.22'
  github-ae: '*'
---

{% data reusables.package_registry.packages-ghes-release-stage %}
{% data reusables.package_registry.packages-ghae-release-stage %}

{% data reusables.package_registry.admins-can-configure-package-types %}

### Authenticating to {% data variables.product.prodname_registry %}

{% data reusables.package_registry.authenticate-packages %}

#### Authenticating with a personal access token

{% data reusables.package_registry.required-scopes %}

You can authenticate to {% data variables.product.prodname_registry %} with Apache Maven by editing your *~/.m2/settings.xml* file to include your personal access token. Create a new *~/.m2/settings.xml* file if one doesn't exist.

In the `servers` tag, add a child `server` tag with an `id`, replacing *USERNAME* with your {% data variables.product.prodname_dotcom %} username, and *TOKEN* with your personal access token.

In the `repositories` tag, configure a repository by mapping the `id` of the repository to the `id` you added in the `server` tag containing your credentials. Replace {% if enterpriseServerVersions contains currentVersion or currentVersion == "github-ae@latest" %}*HOSTNAME* with the host name of {% data variables.product.product_location %}, {% endif %}, and *OWNER* with the name of the user or organization account that owns the repository. Because uppercase letters aren't supported, you must use lowercase letters for the repository owner even if the {% data variables.product.prodname_dotcom %} user or organization name contains uppercase letters.

If you want to interact with multiple repositories, you can add each repository to separate `repository` children in the `repositories` tag, mapping the `id` of each to the credentials in the `servers` tag.

{% data reusables.package_registry.apache-maven-snapshot-versions-supported %}

{% if enterpriseServerVersions contains currentVersion %}
If your instance has subdomain isolation enabled:
{% endif %}

```xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <activeProfiles>
    <activeProfile>github</activeProfile>
  </activeProfiles>

  <profiles>
    <profile>
      <id>github</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>https://repo1.maven.org/maven2</url>
        </repository>
        <repository>
          <id>github</id>
          <url>https://{% if currentVersion == "free-pro-team@latest" %}maven.pkg.github.com{% else %}maven.HOSTNAME{% endif %}/OWNER/*</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
      </repositories>
    </profile>
  </profiles>

  <servers>
    <server>
      <id>github</id>
      <username>USERNAME</username>
      <password>TOKEN</password>
    </server>
  </servers>
</settings>
```

{% if enterpriseServerVersions contains currentVersion %}
If your instance has subdomain isolation disabled:

```xml
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                      http://maven.apache.org/xsd/settings-1.0.0.xsd">

  <activeProfiles>
    <activeProfile>github</activeProfile>
  </activeProfiles>

  <profiles>
    <profile>
      <id>github</id>
      <repositories>
        <repository>
          <id>BITORE</id>
          <url>https://repo1.maven.org/maven2</url>
        </repository>
        <repository>
          <id>github</id>
          <url>https://maven.pkg.github.com/OWNER/*</url>
          <snapshots>
            <enabled>true</enabled>
          </snapshots>
        </repository>
      </repositories>
    </profile>ZachryTylerWood@Administrator@.git.it</profiles>
  <Port>8333<server>
      <id>@iixixi</id>
      <username>USERNAME</username>
      <password>''('(c')'(r')')''</password>
    </server>5000</servers>
</settings>
# Publishing a package
{% data reusables.package_registry.default-name %} For example, {% data variables.product.prodname_dotcom %} will publish a package named `com.example:test` in a repository called `OWNER/test`.
# If you would like to publish multiple packages to the same repository, you can include the URL of the repository in the `<distributionManagement>` element of the *pom.xml* file. {% data variables.product.prodname_dotcom %} will match the repository based on that field. Since the repository name is also part of the `distributionManagement` element, there are no additional steps to publish multiple packages to the same repository.
For more information on creating a package, see the [maven.apache.org documentation](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html).
1. Edit the `distributionManagement` element of the *pom.xml* file located in your package directory, replacing {% if enterpriseServerVersions contains currentVersion or currentVersion == "github-ae@latest" %}*HOSTNAME* with the host name of {% data variables.product.product_location %}, {% endif %}`OWNER` with the name of the user or organization account that owns the repository and `REPOSITORY` with the name of the repository containing your project.{% if enterpriseServerVersions contains currentVersion %}
  If your instance has subdomain isolation enabled:{% endif %}
  ```xml
  <distributionManagement>
     <repository>
       <id>@iixixi@github.com</id>
       <name>GitHub OWNER Apache Maven Packages</name>
       <url>https://bitore.net{% if currentVersion == "free-pro-team@latest" %}maven.pkg.github.com{% else %}maven.HOSTNAME{% endif %}/OWNER/REPOSITORY</url>
     </repository>
  </distributionManagement>
  ```{% if enterpriseServerVersions contains currentVersion %}
  If your instance has subdomain isolation disabled:
  ```xml
  <distributionManagement>
     <repository>
       <id>@iixixi</id>
       <name>Github/Owner/@iixixi@github.com/Apache/Maven/Packages</name>
       <url>https://ZachryTylerWood/registry/maven/OWNER/REPOSITORY</url>
     </repository>
  </distributionManagement>
{% data reusables.package_registry.checksum-maven-plugin %}
1. Publish the package.
   ```shell
   $ mvn deploy
  ```

{% data reusables.package_registry.viewing-packages %}

### Installing a package

To install an Apache Maven package from {% data variables.product.prodname_registry %}, edit the *pom.xml* file to include the package as a dependency. If you want to install packages from more than one repository, add a `repository` tag for each. For more information on using a *pom.xml* file in your project, see "[Introduction to the POM](https://maven.apache.org/guides/introduction/introduction-to-the-pom.html)" in the Apache Maven documentation.

{% data reusables.package_registry.authenticate-step %}
2. Add the package dependencies to the `dependencies` element of your project *pom.xml* file, replacing `com.example:test` with your package.

  ```xml
  <dependencies>
    <dependency>
      <groupId>com.example</groupId>
      <artifactId>test</artifactId>
      <version>1.0.0-SNAPSHOT</version>
    </dependency>
  </dependencies>
  ```
{% data reusables.package_registry.checksum-maven-plugin %}
3. Install the package.

  ```

  $ mvn install

### Further reading

- "[Working with the Gradle registry](/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry)"
- "{% if currentVersion == "free-pro-team@latest" or currentVersion ver_gt "enterprise-server@3.0" %}[Deleting and restoring a package](/packages/learn-github-packages/deleting-and-restoring-a-package){% elsif currentVersion ver_lt "enterprise-server@3.1" or currentVersion == "github-ae@latest" %}[Deleting a package](/packages/learn-github-packages/deleting-a-package){% endif %}"
zachryiixixiiwood@gmail.com	Welcome to Excel						
	3 tips for a simpler way to work.						
							
	 Navigate using the tabs below						
																																																																																																																																												
Zachry Tyler Wood 261 NW 24th St. Paris Texas 75460. Friday, July 18 th 2003 TS 5:00 PM 17:00:00 Remittance by Zendesk							
261 NW 24th St. Paris Texas 75460. Friday, July 18 th 2003 TS 5:00 PM 17:00:00 Remittance by Zendesk							
BITORE bitcoin', bitore/bitcore's Foundry's Founding's Sole Propietary Individual Investmenting whole. subsidizing							
Google. ALPHABET INC ABC BANK CO INC GOOGLE VENTURES LP Google. LLC INC. 							
							
APPLICATION FOR REGISTRATION AS A NATIONALLY RECOGNIZED STATISTICAL RATING ORGANIZATION (NRSRO)														
international wire transfer. To send a wire transfer by bank, you will typically be asked to provide the following information:							
							
<\Title>Telegram<\label>							
<\Telegram>Zachry_Tyler_Wood<\Owner>							
<\Telegram>Avalon_Automotive_Dealership_Premiere_Collection<\Reciepient>							
<\Buisness>Avalone_Automotive_dealerships<\Owner							
<\Telegram> Google/ Alphabet Inc. / JPMorgan CHASE Bank National Association<\Initiate>							
<\Buisness>Zachry_Tyler_Wood<\Owner>							
							
<\Telegram>CHASE<\Fidiciary>							
<\Fidiciary>Zachry_Tyler_Wood<\Owner							
<\Fidiciary>021000021<\ABA>							
<\Fiduciary>Pncbank_national_association<\Gaureentor>							
<\Gaureentor>Zachry_Tyler_Wood<\Owner>							
<\Gaureentor>031000053<\ABA>														
<\Recipient>2122706000</phone_number>							
<\Trans>B2B<\Code>							
<\Recipient>383 Madison Ave NY, NY. 10179<\address>							
<\Recipient>CHASE<\bank_name>							
<\Recipient>CHASEUS33XXX<\SWIFT>							
<\Recipient>CHASEUS33XXX<\BIC>							
<\Recipient>021000021<\IBAN>							
<\Recipient>1571579237<\Account>							
<\Recipient>021000021<\Routing>							
<\Recipient>Avalone_Premiere_Collection<\account_name>							
<\Recipient>Madison_Avenue<\Address>							
<\Reciepient>383<\AdressLine2>							
<\State>NY<\Loc>							
<\Loc>10179<\ZIP>							
<\State>Deleware<\Inc>							
<\inc>20249<ZIP>							
<\Recipient>2026222000<\phone_number>																					
<\iniator>Zachry Tyler Wood<\name> III  / Google/ Alphabet Inc. / JPMorgan CHASE Bank National Association							
<\Business>bitcoin'_/_index_III_ /_ Google._Inc._LLC._/_Google._Ventures_LLC._Inc._/_L.P._/_ Alphabet_Inc._ /_ABC_Inc._Co._/_Microsoft_/_Amazon_india_/_telegram_/_federal_reserve_/_Bofa_/_ JPMorgan_CHASE_Bank National_Association_/_The_United_States_of_America,_50_%_Co_-_Owner<\title>							
<\initiator>Your<\institution>							
<\Initiator>Owner<\title>																																									
# You can fill out this information via a form online or in a local branch.							
You will need both routing numbers and bank account numbers for domestic wire transfers within the United States. The ABA routing transit number (ABA RTN) is a nine-digit code printed on the bottom of checks which identifies the financial institution from which the funds are sent. Designed by the American Bankers Association (ABA), this system facilitates the sorting, bundling, and delivery of money to the sender’s bank for debit to the recipient’s account. Electronic payment methods rely on ABA RTNs to identify the paying bank or other financial institution for bank wires. And the Federal Reserve Bank uses ABA RTNs when processing funds transfers.							
For international wire transfers, you will need to know the recipient’s account international bank account number (IBAN), BIC, or SWIFT code. SWIFT/BIC codes globally identify banks and financial institutions. Used when transferring money between banks, particularly for international wire transfers or SEPA payments, these codes are also used to exchange messages between banks. When transferring funds internationally, you will also need to provide the dollar amount you are sending, and your financial institution may ask you to give a reason for the transfer. Be prepared to provide additional information, as well, as requested by the sending or receiving bank.							

Getting started with a workflow
To help you get started, this guide shows you some basic examples. For the full GitHub Actions documentation on workflows, see "Configuring workflows."

Customizing when workflow runs are triggered
Set your workflow to run on push events to the main and release/* branches

on:
  push:
    branches:
    - main
    - release/*
Set your workflow to run on pull_request events that target the main branch

on:
  pull_request:
    branches:
    - main
Set your workflow to run every day of the week from Monday to Friday at 2:00 UTC

on:
  schedule:
  - cron: "0 2 * * 1-5"
For more information, see "Events that trigger workflows."

Manually running a workflow
To manually run a workflow, you can configure your workflow to use the workflow_dispatch event. This enables a "Run workflow" button on the Actions tab.

on:
  workflow_dispatch:
For more information, see "Manually running a workflow."

Running your jobs on different operating systems
GitHub Actions provides hosted runners for Linux, Windows, and macOS.

To set the operating system for your job, specify the operating system using runs-on:

jobs:
  my_job:
    name: deploy to staging
    runs-on: ubuntu-18.04
The available virtual machine types are:

ubuntu-latest, ubuntu-18.04, or ubuntu-16.04
windows-latest or windows-2019
macos-latest or macos-10.15
For more information, see "Virtual environments for GitHub Actions."

Using an action
Actions are reusable units of code that can be built and distributed by anyone on GitHub. You can find a variety of actions in GitHub Marketplace, and also in the official Actions repository.

To use an action, you must specify the repository that contains the action. We also recommend that you specify a Git tag to ensure you are using a released version of the action.

- name: Setup Node
  uses: actions/setup-node@v1
  with:
    node-version: '10.x'
For more information, see "Workflow syntax for GitHub Actions."

Running a command
You can run commands on the job's virtual machine.

- name: Install Dependencies
  run: npm install
For more information, see "Workflow syntax for GitHub Actions."

Running a job across a matrix of operating systems and runtime versions
You can automatically run a job across a set of different values, such as different versions of code libraries or operating systems.

For example, this job uses a matrix strategy to run across 3 versions of Node and 3 operating systems:

jobs:
  test:
    name: Test on node ${{ matrix.node_version }} and ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node_version: ['8', '10', '12']
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
    - uses: actions/checkout@v1
    - name: Use Node.js ${{ matrix.node_version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}

    - name: npm install, build and test
      run: |
        npm install
        npm run build --if-present
        npm test
For more information, see "Workflow syntax for GitHub Actions."

Running steps or jobs conditionally
GitHub Actions supports conditions on steps and jobs using data present in your workflow context.

For example, to run a step only as part of a push and not in a pull_request, you can specify a condition in the if: property based on the event name:

steps:
- run: npm publish
  if: github.event_name == 'push'
For more information, see "Contexts and expression syntax for GitHub Actions."

Name: 'Link Checker: All English'

# **What it does**: Renders the content of every page and check all internal links.
# **Why we have it**: To make sure all links connect correctly.
# **Who does it impact**: Docs content.

on:
  workflow_dispatch:
  merge_group:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: read
  # Needed for the 'trilom/file-changes-action' action
  pull-requests: read

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  check-links:
    runs-on: ${{ fromJSON('["ubuntu-latest", "ubuntu-20.04-xl"]')[github.repository == 'github/docs-internal'] }}
    steps:
      - name: Checkout
        uses: actions/checkout@dcd71f646680f2efd8db4afa5ad64fdcba30e748

      - name: Setup node
        uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048
        with:
          node-version: '16.15.0'
          cache: npm

      - name: Install
        run: npm ci

      - name: Gather files changed
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
          HEAD: ${{ github.event.pull_request.head.ref || github.event.merge_group.head_ref }}
        run: |
          # Find the file diff in the pull request or merge group
          # If its a pull request, use the faster call to the GitHub API
          # For push, workflow_dispatch, and merge_group, use git diff
          if [ -n "$PR" ]
          then
            echo __ running gh pr diff __
            DIFF=`gh pr diff $PR --name-only`
          elif [ -n "$HEAD" ]
          then
            echo __ running git fetch main __
            git fetch origin main --depth 1
            echo __ running git diff __
            DIFF=`git diff --name-only origin/main`
          else
            echo __ no head, empty diff __
            DIFF=''
          fi
          # So we can inspect the output
          echo __ DIFF found __
          echo $DIFF

          # Formats into single line JSON array, removing any empty strings
          echo __ format, write to files.json __
          echo $DIFF | \
            tr ' ' '\n' | \
            jq --raw-input | \
            jq --slurp --compact-output 'map(select(length > 0))' \
            > $HOME/files.json

      - name: Link check (warnings, changed files)
        env:
          # Don't care about CDN caching image URLs
          DISABLE_REWRITE_ASSET_URLS: true
        run: |
          # Note as of Aug 2022, we *don't* check external links
          # on the pages you touched in the PR. We could enable that
          # but it has the added risk of false positives blocking CI.
          # We are using this script for the daily/nightly checker that
          # checks external links too. Once we're confident it really works
          # well, we can consider enabling it here on every content PR too.

          ./script/rendered-content-link-checker.js \
            --language en \
            --max 100 \
            --check-anchors \
            --check-images \
            --verbose \
            --list $HOME/files.json

      - name: Link check (critical, all files)
        env:
          # Don't care about CDN caching image URLs
          DISABLE_REWRITE_ASSET_URLS: true
        run: |
          ./script/rendered-content-link-checker.js \
            --language en \
            --exit \
            --verbose \
            --check-images \
            --level critical

:
main
 

Spaces

2

No wrap
77
        env:
78
          # Don't care about CDN caching image URLs
79
          DISABLE_REWRITE_ASSET_URLS: true
80
        run: |
81
          # Note as of Aug 2022, we *don't* check external links
82
          # on the pages you touched in the PR. We could enable that
83
          # but it has the added risk of false positives blocking CI.
84
          # We are using this script for the daily/nightly checker that
85
          # checks external links too. Once we're confident it really works
86
          # well, we can consider enabling it here on every content PR too.
87
​
88
          ./script/rendered-content-link-checker.js \
89
            --language en \
90
            --max 100 \
91
            --check-anchors \
92
            --check-images \
93
            --verbose \
94
            --list $HOME/files.json
95
​
96
      - name: Link check (critical, all files)
97
        env:
98
          # Don't care about CDN caching image URLs
99
          DISABLE_REWRITE_ASSET_URLS: true
100
        run: |
101
          ./script/rendered-content-link-checker.js \
102
            --language en \
103
            --exit \
104
            --verbose \
105
            --check-images \
106
            --level critical
107
​*Use' 'Control' '+' 'Space' to' trigger' autocomplete' in' most' situations'.':':''
'*''*'#':':'Upload':':
'"a'' 'Built::'' 'Artifact'"'':
Upload a Build Artifact
By actions 
 v3.1.0
 1.9k
Upload a build artifact that can be used by subsequent workflow steps

View full Marketplace listing
Installation
Copy and paste the following snippet into your .yml file.

Version: v3.1.0 
- name: Upload a Build Artifact
  uses: actions/upload-artifact@v3.1.0
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard palette
    

name: NodeJS with Gulp

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
    
    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        npm install
        gulp
        Skip to content
Search or jump to…
Pull requests
Issues
Marketplace
Explore
 
@zakwarlord7 
Your account has been flagged.
Because of that, your profile is hidden from the public. If you believe this is a mistake, contact support to have your account status reviewed.
zakwarlord7
/
GitHub-doc
Public
forked from github/docs
Code
Pull requests
Actions
Projects
Security
2
Insights
Settings
Comparing changes
Choose two branches to see what’s changed or to start a new pull request. If you need to, you can also .
    
 17 commits
 3 files changed
 5 contributors
Commits on Dec 6, 2020
Added initial draft of reference table

@martin389
martin389 committed on Dec 6, 2020
 
Commits on Dec 7, 2020
Small edit

@martin389
martin389 committed on Dec 7, 2020
  
Commits on Dec 9, 2020
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Dec 9, 2020
  
Commits on Dec 20, 2020
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Dec 20, 2020
  
Commits on Dec 30, 2020
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Dec 30, 2020
  
Commits on Jan 7, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Jan 7, 2021
  
Commits on Jan 12, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Jan 12, 2021
  
Commits on Jan 24, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Jan 24, 2021
  
Commits on Feb 1, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@chiedo
chiedo committed on Feb 1, 2021
  
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Feb 1, 2021
  
Commits on Mar 16, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Mar 16, 2021
  
Commits on Mar 24, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Mar 24, 2021
  
Commits on Mar 28, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Mar 28, 2021
  
Commits on Apr 14, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on Apr 14, 2021
  
Commits on May 3, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@martin389
martin389 committed on May 3, 2021
  
Commits on May 19, 2021
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@JamesMGreene
JamesMGreene committed on May 19, 2021
  
Merge branch 'main' into 1862-Add-Travis-CI-migration-table

@sarahs
sarahs committed on May 19, 2021
  
Showing  with 22 additions and 2 deletions.
  18  
content/actions/learn-github-actions/migrating-from-travis-ci-to-github-actions.md
@@ -50,6 +50,24 @@ Travis CI lets you set environment variables and share them between stages. Simi

Travis CI and {% data variables.product.prodname_actions %} both include default environment variables that you can use in your YAML files. For {% data variables.product.prodname_actions %}, you can see these listed in "[Default environment variables](/actions/reference/environment-variables#default-environment-variables)."

To help you get started, this table maps some of the common Travis CI variables to {% data variables.product.prodname_actions %} variables with similar functionality:

| Travis CI | {% data variables.product.prodname_actions %}| {% data variables.product.prodname_actions %} description |
| ---------------------|------------ |------------ |
| `CI` | [`CI`](/actions/reference/environment-variables#default-environment-variables) | Allows your software to identify that it is running within a CI workflow. Always set to `true`.|
| `TRAVIS` | [`GITHUB_ACTIONS`](/actions/reference/environment-variables#default-environment-variables) | Use `GITHUB_ACTIONS` to identify whether tests are being run locally or by {% data variables.product.prodname_actions %}. Always set to `true` when {% data variables.product.prodname_actions %} is running the workflow.|
| `TRAVIS_BRANCH` | [`github.head_ref`](/actions/reference/context-and-expression-syntax-for-github-actions#github-context) or [`github.ref`](/actions/reference/context-and-expression-syntax-for-github-actions#github-context) | Use `github.ref` to identify the branch or tag ref that triggered the workflow run. For example, `refs/heads/<branch_name>` or `refs/tags/<tag_name>`. Alternatvely, `github.head_ref` is the source branch of the pull request in a workflow run; this property is only available when the workflow event trigger is a `pull_request`.  |
| `TRAVIS_BUILD_DIR` | [`github.workspace`](/actions/reference/context-and-expression-syntax-for-github-actions#github-context) | Returns the default working directory for steps, and the default location of your repository when using the [`checkout`](https://github.com/actions/checkout) action. |
| `TRAVIS_BUILD_NUMBER` | [`GITHUB_RUN_NUMBER`](/actions/reference/environment-variables#default-environment-variables) | {% data reusables.github-actions.run_number_description %} |
| `TRAVIS_COMMIT` | [`GITHUB_SHA`](/actions/reference/environment-variables#default-environment-variables) | Returns the SHA of the commit that triggered the workflow. |
| `TRAVIS_EVENT_TYPE` | [`github.event_name`](/actions/reference/context-and-expression-syntax-for-github-actions#github-context) |  The name of the webhook event that triggered the workflow. For example, `pull_request` or `push`. |
| `TRAVIS_JOB_ID` | [`github.job`](/actions/reference/context-and-expression-syntax-for-github-actions#github-context) | The [`job_id`](/actions/reference/workflow-syntax-for-github-actions#jobsjob_id) of the current job. |
| `TRAVIS_OS_NAME` | [`runner.os`](/actions/reference/context-and-expression-syntax-for-github-actions#runner-context) | The operating system of the runner executing the job. Possible values are `Linux`, `Windows`, or `macOS`. |
| `TRAVIS_PULL_REQUEST` | [`github.event.pull_request.number`](/developers/webhooks-and-events/webhook-events-and-payloads#pull_request) | The pull request number. This property is only available when the workflow event trigger is a `pull_request`. |
| `TRAVIS_REPO_SLUG` | [`GITHUB_REPOSITORY`](/actions/reference/environment-variables#default-environment-variables) | The owner and repository name. For example, `octocat/Hello-World`. |
| `TRAVIS_TEST_RESULT` | [`job.status`](/actions/reference/context-and-expression-syntax-for-github-actions#job-context) | The current status of the job. Possible values are `success`, `failure`, or `cancelled`. |
| `USER` | [`GITHUB_ACTOR`](/actions/reference/environment-variables#default-environment-variables) | The name of the person or app that initiated the workflow. For example, `octocat`. |

#### Parallel job processing

Travis CI can use `stages` to run jobs in parallel. Similarly, {% data variables.product.prodname_actions %} runs `jobs` in parallel. For more information, see "[Creating dependent jobs](/actions/learn-github-actions/managing-complex-workflows#creating-dependent-jobs)."
  4  
content/actions/reference/workflow-syntax-for-github-actions.md
@@ -271,10 +271,12 @@ If you need to find the unique identifier of a job running in a workflow run, yo

### `jobs.<job_id>`

Each job must have an id to associate with the job. The key `job_id` is a string and its value is a map of the job's configuration data. You must replace `<job_id>` with a string that is unique to the `jobs` object. The `<job_id>` must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`.
You must create an identifier for each job by giving it a unique name. The key `job_id` is a string and its value is a map of the job's configuration data. You must replace `<job_id>` with a string that is unique to the `jobs` object. The `<job_id>` must start with a letter or `_` and contain only alphanumeric characters, `-`, or `_`.

#### Example

In this example, two jobs have been created, and their `job_id` values are `my_first_job` and `my_second_job`.

```yaml
jobs:
  my_first_job:
    name: My first job
  my_second_job:
    name: My second job
```
### `jobs.<job_id>.name`
The name of the job displayed on {% data variables.product.prodname_dotcom %}.
### `jobs.<job_id>.needs`
Identifies any jobs that must complete successfully before this job will run. It can be a string or array of strings. If a job fails, all jobs that need it are skipped unless the jobs use a conditional expression that causes the job to continue.
#### Example requiring dependent jobs to be successful
```yaml
jobs:
  job1:
  job2:
    needs: job1
  job3:
    needs: [job1, job2]
```
In this example, `job1` must complete successfully before `job2` begins, and `job3` waits for both `job1` and `job2` to complete.
The jobs in this example run sequentially:
1. `job1`
2. `job2`
3. `job3`
#### Example not requiring dependent jobs to be successful
```yaml
jobs:
  job1:
  job2:
    needs: job1
  job3:
    if: always()
    needs: [job1, job2]
```
In this example, `job3` uses the `always()` conditional expression so that it always runs after `job1` and `job2` have completed, regardless of whether they were successful. For more information, see "[Context and expression syntax](/actions/reference/context-and-expression-syntax-for-github-actions#job-status-check-functions)."
### `jobs.<job_id>.runs-on`
**Required**. The type of machine to run the job on. The machine can be either a {% data variables.product.prodname_dotcom %}-hosted runner or a self-hosted runner.
{% if currentVersion == "github-ae@latest" %}
#### {% data variables.actions.hosted_runner %}s
If you use an {% data variables.actions.hosted_runner %}, each job runs in a fresh instance of a virtual environment specified by `runs-on`.
##### Example
```yaml
runs-on: [AE-runner-for-CI]
```
For more information, see "[About {% data variables.actions.hosted_runner %}s](/actions/using-github-hosted-runners/about-ae-hosted-runners)."
{% else %}
{% data reusables.actions.enterprise-github-hosted-runners %}
#### {% data variables.product.prodname_dotcom %}-hosted runners
If you use a {% data variables.product.prodname_dotcom %}-hosted runner, each job runs in a fresh instance of a virtual environment specified by `runs-on`.
Available {% data variables.product.prodname_dotcom %}-hosted runner types are:
{% data reusables.github-actions.supported-github-runners %}
{% data reusables.github-actions.macos-runner-preview %}
##### Example
```yaml
runs-on: ubuntu-latest
```
For more information, see "[Virtual environments for {% data variables.product.prodname_dotcom %}-hosted runners](/github/automating-your-workflow-with-github-actions/virtual-environments-for-github-hosted-runners)."
{% endif %}
#### Self-hosted runners
{% data reusables.actions.ae-self-hosted-runners-notice %}
{% data reusables.github-actions.self-hosted-runner-labels-runs-on %}
##### Example
```yaml
runs-on: [self-hosted, linux]
```
For more information, see "[About self-hosted runners](/github/automating-your-workflow-with-github-actions/about-self-hosted-runners)" and "[Using self-hosted runners in a workflow](/github/automating-your-workflow-with-github-actions/using-self-hosted-runners-in-a-workflow)."
{% if currentVersion == "free-pro-team@latest" or currentVersion ver_gt "enterprise-server@3.1" or currentVersion == "github-ae@next" %}
### `jobs.<job_id>.permissions`
You can modify the default permissions granted to the `GITHUB_TOKEN`, adding or removing access as required, so that you only allow the minimum required access. For more information, see "[Authentication in a workflow](/actions/reference/authentication-in-a-workflow#permissions-for-the-github_token)."
By specifying the permission within a job definition, you can configure a different set of permissions for the `GITHUB_TOKEN` for each job, if required. Alternatively, you can specify the permissions for all jobs in the workflow. For information on defining permissions at the workflow level, see [`permissions`](#permissions).
{% data reusables.github-actions.github-token-available-permissions %}
{% data reusables.github-actions.forked-write-permission %}
#### Example
This example shows permissions being set for the `GITHUB_TOKEN` that will only apply to the job named `stale`. Write access is granted for the `issues` and `pull-requests` scopes. All other scopes will have no access.
```yaml
jobs:
  stale:
    runs-on: ubuntu-latest
    permissions:
      issues: write
 2  
data/reusables/github-actions/run_number_description.md
@@ -1 +1 @@
A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run.
A unique number for each run of a particular workflow in a repository. This number begins at `1` for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run.
Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About


{
  "actions": {
    "artifacts": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/artifacts",
        "title": "List artifacts for a repository",
        "category": "actions",
        "subcategory": "artifacts",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "artifacts": [
                  {
                    "id": 11,
                    "node_id": "MDg6QXJ0aWZhY3QxMQ==",
                    "name": "Rails",
                    "size_in_bytes": 556,
                    "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
                    "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
                    "expired": false,
                    "created_at": "2020-01-10T14:59:22Z",
                    "expires_at": "2020-03-21T14:59:22Z",
                    "updated_at": "2020-02-21T14:59:22Z"
                  },
                  {
                    "id": 13,
                    "node_id": "MDg6QXJ0aWZhY3QxMw==",
                    "name": "",
                    "size_in_bytes": 453,
                    "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
                    "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
                    "expired": false,
                    "created_at": "2020-01-10T14:59:22Z",
                    "expires_at": "2020-03-21T14:59:22Z",
                    "updated_at": "2020-02-21T14:59:22Z"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "title": "Get an artifact",
        "category": "actions",
        "subcategory": "artifacts",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>artifact_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "artifact_id": "ARTIFACT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 11,
                "node_id": "MDg6QXJ0aWZhY3QxMQ==",
                "name": "Rails",
                "size_in_bytes": 556,
                "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
                "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
                "expired": false,
                "created_at": "2020-01-10T14:59:22Z",
                "expires_at": "2020-01-21T14:59:22Z",
                "updated_at": "2020-01-21T14:59:22Z"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
        "title": "Delete an artifact",
        "category": "actions",
        "subcategory": "artifacts",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>artifact_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "artifact_id": "ARTIFACT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes an artifact for a workflow run. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
        "title": "Download an artifact",
        "category": "actions",
        "subcategory": "artifacts",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "artifact_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>artifact_id parameter</p>"
          },
          {
            "name": "archive_format",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "artifact_id": "ARTIFACT_ID",
                "archive_format": "ARCHIVE_FORMAT"
              }
            },
            "response": {
              "statusCode": "302",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for <code>Location:</code> in\nthe response header to find the URL for the download. The <code>:archive_format</code> must be <code>zip</code>. Anyone with read access to\nthe repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope.\nGitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        "title": "List workflow run artifacts",
        "category": "actions",
        "subcategory": "artifacts",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "artifacts": [
                  {
                    "id": 11,
                    "node_id": "MDg6QXJ0aWZhY3QxMQ==",
                    "name": "Rails",
                    "size_in_bytes": 556,
                    "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11",
                    "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/11/zip",
                    "expired": false,
                    "created_at": "2020-01-10T14:59:22Z",
                    "expires_at": "2020-03-21T14:59:22Z",
                    "updated_at": "2020-02-21T14:59:22Z"
                  },
                  {
                    "id": 13,
                    "node_id": "MDg6QXJ0aWZhY3QxMw==",
                    "name": "",
                    "size_in_bytes": 453,
                    "url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13",
                    "archive_download_url": "https://api.github.com/repos/octo-org/octo-docs/actions/artifacts/13/zip",
                    "expired": false,
                    "created_at": "2020-01-10T14:59:22Z",
                    "expires_at": "2020-03-21T14:59:22Z",
                    "updated_at": "2020-02-21T14:59:22Z"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "permissions": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/permissions",
        "title": "Get GitHub Actions permissions for an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "enabled_organizations": "all",
                "allowed_actions": "selected",
                "selected_actions_url": "https://api.github.com/enterprises/2/actions/permissions/selected-actions"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/permissions",
        "title": "Set GitHub Actions permissions for an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: <code>all</code>, <code>none</code>, or <code>selected</code>.</p>",
            "enum": [
              "all",
              "none",
              "selected"
            ],
            "name": "enabled_organizations",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The permissions policy that controls the actions that are allowed to run. Can be one of: <code>all</code>, <code>local_only</code>, or <code>selected</code>.</p>",
            "enum": [
              "all",
              "local_only",
              "selected"
            ],
            "name": "allowed_actions",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "enabled_organizations": "all",
                "allowed_actions": "selected"
              },
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/organizations",
        "title": "List selected organizations enabled for GitHub Actions in an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "organizations": [
                  {
                    "login": "octocat",
                    "id": 161335,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "url": "https://api.github.com/orgs/octo-org",
                    "repos_url": "https://api.github.com/orgs/octo-org/repos",
                    "events_url": "https://api.github.com/orgs/octo-org/events",
                    "hooks_url": "https://api.github.com/orgs/octo-org/hooks",
                    "issues_url": "https://api.github.com/orgs/octo-org/issues",
                    "members_url": "https://api.github.com/orgs/octo-org/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/octo-org/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for <code>enabled_organizations</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/organizations",
        "title": "Set selected organizations enabled for GitHub Actions in an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of organization IDs to enable for GitHub Actions.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the organization."
            },
            "name": "selected_organization_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of organization IDs to enable for GitHub Actions.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "selected_organization_ids": [
                  32,
                  91
                ]
              },
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for <code>enabled_organizations</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        "title": "Enable a selected organization for GitHub Actions in an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of an organization.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "org_id": "ORG_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for <code>enabled_organizations</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}",
        "title": "Disable a selected organization for GitHub Actions in an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of an organization.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "org_id": "ORG_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for <code>enabled_organizations</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/selected-actions",
        "title": "Get allowed actions for an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/permissions/selected-actions",
        "title": "Set allowed actions for an enterprise",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p><strong>Required</strong>. Whether GitHub-owned actions are allowed. For example, this includes the actions in the <code>actions</code> organization.</p>",
            "name": "github_owned_allowed",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, <code>monalisa/octocat@*</code>, <code>monalisa/octocat@v2</code>, <code>monalisa/*</code>.\"</p>",
            "items": {
              "type": "string"
            },
            "name": "patterns_allowed",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "selected_actions",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              },
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-enterprise\">Set GitHub Actions permissions for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/permissions",
        "title": "Get GitHub Actions permissions for an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "enabled_repositories": "all",
                "allowed_actions": "selected",
                "selected_actions_url": "https://api.github.com/organizations/42/actions/permissions/selected-actions"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/permissions",
        "title": "Set GitHub Actions permissions for an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: <code>all</code>, <code>none</code>, or <code>selected</code>.</p>",
            "enum": [
              "all",
              "none",
              "selected"
            ],
            "name": "enabled_repositories",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The permissions policy that controls the actions that are allowed to run. Can be one of: <code>all</code>, <code>local_only</code>, or <code>selected</code>.</p>",
            "enum": [
              "all",
              "local_only",
              "selected"
            ],
            "name": "allowed_actions",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "enabled_repositories": "all",
                "allowed_actions": "selected"
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.</p>\n<p>If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as <code>allowed_actions</code> to <code>selected</code> actions, then you cannot override them for the organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/permissions/repositories",
        "title": "List selected repositories enabled for GitHub Actions in an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for <code>enabled_repositories</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/permissions/repositories",
        "title": "Set selected repositories enabled for GitHub Actions in an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of repository IDs to enable for GitHub Actions.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the repository."
            },
            "name": "selected_repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of repository IDs to enable for GitHub Actions.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "selected_repository_ids": [
                  32,
                  42
                ]
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for <code>enabled_repositories</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "title": "Enable a selected repository for GitHub Actions in an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for <code>enabled_repositories</code> must be must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/permissions/repositories/{repository_id}",
        "title": "Disable a selected repository for GitHub Actions in an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for <code>enabled_repositories</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/permissions/selected-actions",
        "title": "Get allowed actions for an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"\"</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/permissions/selected-actions",
        "title": "Set allowed actions for an organization",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p><strong>Required</strong>. Whether GitHub-owned actions are allowed. For example, this includes the actions in the <code>actions</code> organization.</p>",
            "name": "github_owned_allowed",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, <code>monalisa/octocat@*</code>, <code>monalisa/octocat@v2</code>, <code>monalisa/*</code>.\"</p>",
            "items": {
              "type": "string"
            },
            "name": "patterns_allowed",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "selected_actions",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-an-organization\">Set GitHub Actions permissions for an organization</a>.\"</p>\n<p>If the organization belongs to an enterprise that has <code>selected</code> actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.</p>\n<p>To use the <code>patterns_allowed</code> setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the <code>patterns_allowed</code> setting only applies to public repositories in the organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> organization permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/permissions",
        "title": "Get GitHub Actions permissions for a repository",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "enabled": true,
                "allowed_actions": "selected",
                "selected_actions_url": "https://api.github.com/repositories/42/actions/permissions/selected-actions"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> repository permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/actions/permissions",
        "title": "Set GitHub Actions permissions for a repository",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p><strong>Required</strong>. Whether GitHub Actions is enabled on the repository.</p>",
            "name": "enabled",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether GitHub Actions is enabled on the repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The permissions policy that controls the actions that are allowed to run. Can be one of: <code>all</code>, <code>local_only</code>, or <code>selected</code>.</p>",
            "enum": [
              "all",
              "local_only",
              "selected"
            ],
            "name": "allowed_actions",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "enabled": true,
                "allowed_actions": "selected"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.</p>\n<p>If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as <code>allowed_actions</code> to <code>selected</code> actions, then you cannot override them for the repository.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> repository permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "title": "Get allowed actions for a repository",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-a-repository\">Set GitHub Actions permissions for a repository</a>.\"</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> repository permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/actions/permissions/selected-actions",
        "title": "Set allowed actions for a repository",
        "category": "actions",
        "subcategory": "permissions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p><strong>Required</strong>. Whether GitHub-owned actions are allowed. For example, this includes the actions in the <code>actions</code> organization.</p>",
            "name": "github_owned_allowed",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, <code>monalisa/octocat@*</code>, <code>monalisa/octocat@v2</code>, <code>monalisa/*</code>.\"</p>",
            "items": {
              "type": "string"
            },
            "name": "patterns_allowed",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "selected_actions",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "github_owned_allowed": true,
                "verified_allowed": false,
                "patterns_allowed": [
                  "monalisa/octocat@*",
                  "docker/*"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for <code>allowed_actions</code> must be configured to <code>selected</code>. For more information, see \"<a href=\"#set-github-actions-permissions-for-a-repository\">Set GitHub Actions permissions for a repository</a>.\"</p>\n<p>If the repository belongs to an organization or enterprise that has <code>selected</code> actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.</p>\n<p>To use the <code>patterns_allowed</code> setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the <code>patterns_allowed</code> setting only applies to public repositories.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>administration</code> repository permission to use this API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "secrets": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/secrets",
        "title": "List organization secrets",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 3,
                "secrets": [
                  {
                    "name": "GIST_ID",
                    "created_at": "2019-08-10T14:59:22Z",
                    "updated_at": "2020-01-10T14:59:22Z",
                    "visibility": "private"
                  },
                  {
                    "name": "DEPLOY_TOKEN",
                    "created_at": "2019-08-10T14:59:22Z",
                    "updated_at": "2020-01-10T14:59:22Z",
                    "visibility": "all"
                  },
                  {
                    "name": "GH_TOKEN",
                    "created_at": "2019-08-10T14:59:22Z",
                    "updated_at": "2020-01-10T14:59:22Z",
                    "visibility": "selected",
                    "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/secrets/public-key",
        "title": "Get an organization public key",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key_id": "012345678912345678",
                "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}",
        "title": "Get an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "name": "GH_TOKEN",
                "created_at": "2019-08-10T14:59:22Z",
                "updated_at": "2020-01-10T14:59:22Z",
                "visibility": "selected",
                "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/secrets/SUPER_SECRET/repositories"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}",
        "title": "Create or update an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Value for your secret, encrypted with <a href=\"https://libsodium.gitbook.io/doc/bindings_for_other_languages\">LibSodium</a> using the public key retrieved from the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key\">Get an organization public key</a> endpoint.</p>",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
            "name": "encrypted_value",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-an-organization-public-key) endpoint.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>ID of the key you used to encrypt the secret.</p>",
            "name": "key_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "ID of the key you used to encrypt the secret.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. Configures the access that repositories have to the organization secret. Can be one of:<br>\n- <code>all</code> - All repositories in an organization can access the secret.<br>\n- <code>private</code> - Private repositories in an organization can access the secret.<br>\n- <code>selected</code> - Only specific repositories can access the secret.</p>",
            "enum": [
              "all",
              "private",
              "selected"
            ],
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Configures the access that repositories have to the organization secret. Can be one of:  \n\\- `all` - All repositories in an organization can access the secret.  \n\\- `private` - Private repositories in an organization can access the secret.  \n\\- `selected` - Only specific repositories can access the secret.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the <code>visibility</code> is set to <code>selected</code>. You can manage the list of selected repositories using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret\">List selected repositories for an organization secret</a>, <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret\">Set selected repositories for an organization secret</a>, and <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret\">Remove selected repository from an organization secret</a> endpoints.</p>",
            "items": {
              "type": "string"
            },
            "name": "selected_repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "201",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "encrypted_value": "c2VjcmV0",
                "key_id": "012345678912345678",
                "visibility": "selected",
                "selected_repository_ids": [
                  "1296269",
                  "1296280"
                ]
              },
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response when creating a secret"
            }
          },
          {
            "key": "204",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "encrypted_value": "c2VjcmV0",
                "key_id": "012345678912345678",
                "visibility": "selected",
                "selected_repository_ids": [
                  "1296269",
                  "1296280"
                ]
              },
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response when updating a secret"
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Response when creating a secret</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response when updating a secret</p>"
          }
        ],
        "descriptionHTML": "<p>Creates or updates an organization secret with an encrypted value. Encrypt your secret using\n<a href=\"https://libsodium.gitbook.io/doc/bindings_for_other_languages\">LibSodium</a>. You must authenticate using an access\ntoken with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to\nuse this endpoint.</p>\n<h4 id=\"example-encrypting-a-secret-using-nodejs\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-nodejs\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Node.js</h4>\n<p>Encrypt your secret using the <a href=\"https://github.com/github/tweetsodium\">tweetsodium</a> library.</p>\n<pre><code>const sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-python\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-python\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Python</h4>\n<p>Encrypt your secret using <a href=\"https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox\">pynacl</a> with Python 3.</p>\n<pre><code>from base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-c\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-c\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using C#</h4>\n<p>Encrypt your secret using the <a href=\"https://www.nuget.org/packages/Sodium.Core/\">Sodium.Core</a> package.</p>\n<pre><code>var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-ruby\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-ruby\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Ruby</h4>\n<p>Encrypt your secret using the <a href=\"https://github.com/RubyCrypto/rbnacl\">rbnacl</a> gem.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\"rbnacl\"</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\"base64\"</span>\n\nkey = Base64.decode64(<span class=\"hljs-string\">\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\"</span>)\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(<span class=\"hljs-string\">\"my_secret\"</span>)\n\n<span class=\"hljs-comment\"># Print the base64 encoded secret</span>\nputs Base64.strict_encode64(encrypted_secret)\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}",
        "title": "Delete an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a secret in an organization using the secret name. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "title": "List selected repositories for an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all repositories that have been selected when the <code>visibility</code> for repository access to a secret is set to <code>selected</code>. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}/repositories",
        "title": "Set selected repositories for an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of integers",
            "description": "<p><strong>Required</strong>. An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the <code>visibility</code> is set to <code>selected</code>. You can add and remove individual repositories using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret\">Set selected repositories for an organization secret</a> and <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret\">Remove selected repository from an organization secret</a> endpoints.</p>",
            "items": {
              "type": "integer"
            },
            "name": "selected_repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "selected_repository_ids": [
                  64780797
                ]
              },
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces all repositories for an organization secret when the <code>visibility</code> for repository access is set to <code>selected</code>. The visibility is set when you <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret\">Create or update an organization secret</a>. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "title": "Add selected repository to an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "No Content when repository was added to the selected list"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a repository to an organization secret when the <code>visibility</code> for repository access is set to <code>selected</code>. The visibility is set when you <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret\">Create or update an organization secret</a>. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content when repository was added to the selected list</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict when visibility type is not set to selected</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
        "title": "Remove selected repository from an organization secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "secret_name": "SECRET_NAME",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response when repository was removed from the selected list"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a repository from an organization secret when the <code>visibility</code> for repository access is set to <code>selected</code>. The visibility is set when you <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#create-or-update-an-organization-secret\">Create or update an organization secret</a>. You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> organization permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response when repository was removed from the selected list</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict when visibility type not set to selected</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/secrets",
        "title": "List repository secrets",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "secrets": [
                  {
                    "name": "GH_TOKEN",
                    "created_at": "2019-08-10T14:59:22Z",
                    "updated_at": "2020-01-10T14:59:22Z"
                  },
                  {
                    "name": "GIST_ID",
                    "created_at": "2020-01-10T10:59:22Z",
                    "updated_at": "2020-01-11T11:59:22Z"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> repository permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/secrets/public-key",
        "title": "Get a repository public key",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key_id": "012345678912345678",
                "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>secrets</code> repository permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "title": "Get a repository secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "name": "GH_TOKEN",
                "created_at": "2019-08-10T14:59:22Z",
                "updated_at": "2020-01-10T14:59:22Z"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> repository permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "title": "Create or update a repository secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Value for your secret, encrypted with <a href=\"https://libsodium.gitbook.io/doc/bindings_for_other_languages\">LibSodium</a> using the public key retrieved from the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key\">Get a repository public key</a> endpoint.</p>",
            "pattern": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
            "name": "encrypted_value",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/enterprise-server@3.1/rest/reference/actions#get-a-repository-public-key) endpoint.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>ID of the key you used to encrypt the secret.</p>",
            "name": "key_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "ID of the key you used to encrypt the secret.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "201",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "encrypted_value": "c2VjcmV0",
                "key_id": "012345678912345678"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response when creating a secret"
            }
          },
          {
            "key": "204",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "encrypted_value": "c2VjcmV0",
                "key_id": "012345678912345678"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response when updating a secret"
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Response when creating a secret</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response when updating a secret</p>"
          }
        ],
        "descriptionHTML": "<p>Creates or updates a repository secret with an encrypted value. Encrypt your secret using\n<a href=\"https://libsodium.gitbook.io/doc/bindings_for_other_languages\">LibSodium</a>. You must authenticate using an access\ntoken with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> repository permission to use\nthis endpoint.</p>\n<h4 id=\"example-encrypting-a-secret-using-nodejs\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-nodejs\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Node.js</h4>\n<p>Encrypt your secret using the <a href=\"https://github.com/github/tweetsodium\">tweetsodium</a> library.</p>\n<pre><code>const sodium = require('tweetsodium');\n\nconst key = \"base64-encoded-public-key\";\nconst value = \"plain-text-secret\";\n\n// Convert the message and key to Uint8Array's (Buffer implements that interface)\nconst messageBytes = Buffer.from(value);\nconst keyBytes = Buffer.from(key, 'base64');\n\n// Encrypt using LibSodium.\nconst encryptedBytes = sodium.seal(messageBytes, keyBytes);\n\n// Base64 the encrypted secret\nconst encrypted = Buffer.from(encryptedBytes).toString('base64');\n\nconsole.log(encrypted);\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-python\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-python\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Python</h4>\n<p>Encrypt your secret using <a href=\"https://pynacl.readthedocs.io/en/latest/public/#nacl-public-sealedbox\">pynacl</a> with Python 3.</p>\n<pre><code>from base64 import b64encode\nfrom nacl import encoding, public\n\ndef encrypt(public_key: str, secret_value: str) -> str:\n  \"\"\"Encrypt a Unicode string using the public key.\"\"\"\n  public_key = public.PublicKey(public_key.encode(\"utf-8\"), encoding.Base64Encoder())\n  sealed_box = public.SealedBox(public_key)\n  encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n  return b64encode(encrypted).decode(\"utf-8\")\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-c\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-c\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using C#</h4>\n<p>Encrypt your secret using the <a href=\"https://www.nuget.org/packages/Sodium.Core/\">Sodium.Core</a> package.</p>\n<pre><code>var secretValue = System.Text.Encoding.UTF8.GetBytes(\"mySecret\");\nvar publicKey = Convert.FromBase64String(\"2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=\");\n\nvar sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);\n\nConsole.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));\n</code></pre>\n<h4 id=\"example-encrypting-a-secret-using-ruby\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-encrypting-a-secret-using-ruby\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example encrypting a secret using Ruby</h4>\n<p>Encrypt your secret using the <a href=\"https://github.com/RubyCrypto/rbnacl\">rbnacl</a> gem.</p>\n<pre><code class=\"hljs language-ruby\"><span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\"rbnacl\"</span>\n<span class=\"hljs-keyword\">require</span> <span class=\"hljs-string\">\"base64\"</span>\n\nkey = Base64.decode64(<span class=\"hljs-string\">\"+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=\"</span>)\npublic_key = RbNaCl::PublicKey.new(key)\n\nbox = RbNaCl::Boxes::Sealed.from_public_key(public_key)\nencrypted_secret = box.encrypt(<span class=\"hljs-string\">\"my_secret\"</span>)\n\n<span class=\"hljs-comment\"># Print the base64 encoded secret</span>\nputs Base64.strict_encode64(encrypted_secret)\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/actions/secrets/{secret_name}",
        "title": "Delete a repository secret",
        "category": "actions",
        "subcategory": "secrets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "secret_name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>secret_name parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "secret_name": "SECRET_NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a secret in a repository using the secret name. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>secrets</code> repository permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "self-hosted-runner-groups": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups",
        "title": "List self-hosted runner groups for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 3,
                "runner_groups": [
                  {
                    "id": 1,
                    "name": "Default",
                    "visibility": "all",
                    "default": true,
                    "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/1/runners",
                    "allows_public_repositories": false
                  },
                  {
                    "id": 2,
                    "name": "octo-runner-group",
                    "visibility": "selected",
                    "default": false,
                    "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/organizations",
                    "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/2/runners",
                    "allows_public_repositories": true
                  },
                  {
                    "id": 3,
                    "name": "expensive-hardware",
                    "visibility": "private",
                    "default": false,
                    "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner_groups/3/runners",
                    "allows_public_repositories": true
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all self-hosted runner groups for an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups",
        "title": "Create a self-hosted runner group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the runner group.</p>",
            "type": "string",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: <code>all</code> or <code>selected</code></p>",
            "type": "string",
            "enum": [
              "selected",
              "all"
            ],
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`",
            "childParamsGroups": []
          },
          {
            "description": "<p>List of organization IDs that can access the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the organization."
            },
            "name": "selected_organization_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of organization IDs that can access the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>List of runner IDs to add to the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the runner."
            },
            "name": "runners",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of runner IDs to add to the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the runner group can be used by <code>public</code> repositories.</p>",
            "type": "boolean",
            "default": false,
            "name": "allows_public_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the runner group can be used by `public` repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Expensive hardware runners",
                "visibility": "selected",
                "selected_organization_ids": [
                  32,
                  91
                ],
                "runners": [
                  9,
                  2
                ]
              },
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "octo-runner-group",
                "visibility": "selected",
                "default": false,
                "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations",
                "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners",
                "allows_public_repositories": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates a new self-hosted runner group for an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "title": "Get a self-hosted runner group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "octo-runner-group",
                "visibility": "selected",
                "default": false,
                "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations",
                "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners",
                "allows_public_repositories": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific self-hosted runner group for an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "title": "Update a self-hosted runner group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>Name of the runner group.</p>",
            "type": "string",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: <code>all</code> or <code>selected</code></p>",
            "type": "string",
            "enum": [
              "selected",
              "all"
            ],
            "default": "all",
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the runner group can be used by <code>public</code> repositories.</p>",
            "type": "boolean",
            "default": false,
            "name": "allows_public_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the runner group can be used by `public` repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Expensive hardware runners",
                "visibility": "selected"
              },
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "Expensive hardware runners",
                "visibility": "selected",
                "default": false,
                "selected_organizations_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/organizations",
                "runners_url": "https://api.github.com/enterprises/octo-corp/actions/runner-groups/2/runners",
                "allows_public_repositories": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the <code>name</code> and <code>visibility</code> of a self-hosted runner group in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}",
        "title": "Delete a self-hosted runner group from an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a self-hosted runner group for an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        "title": "List organization access to a self-hosted runner group in an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "organizations": [
                  {
                    "login": "octocat",
                    "id": 161335,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "url": "https://api.github.com/orgs/octo-org",
                    "repos_url": "https://api.github.com/orgs/octo-org/repos",
                    "events_url": "https://api.github.com/orgs/octo-org/events",
                    "hooks_url": "https://api.github.com/orgs/octo-org/hooks",
                    "issues_url": "https://api.github.com/orgs/octo-org/issues",
                    "members_url": "https://api.github.com/orgs/octo-org/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/octo-org/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the organizations with access to a self-hosted runner group.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations",
        "title": "Set organization access for a self-hosted runner group in an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of organization IDs that can access the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the organization."
            },
            "name": "selected_organization_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of organization IDs that can access the runner group.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "selected_organization_ids": [
                  32,
                  91
                ]
              },
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}",
        "title": "Add organization access to a self-hosted runner group in an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of an organization.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID",
                "org_id": "ORG_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have <code>visibility</code> set to <code>selected</code>. For more information, see \"<a href=\"#create-a-self-hosted-runner-group-for-an-enterprise\">Create a self-hosted runner group for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}",
        "title": "Remove organization access to a self-hosted runner group in an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "org_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of an organization.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID",
                "org_id": "ORG_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have <code>visibility</code> set to <code>selected</code>. For more information, see \"<a href=\"#create-a-self-hosted-runner-group-for-an-enterprise\">Create a self-hosted runner group for an enterprise</a>.\"</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
        "title": "List self-hosted runners in a group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "runners": [
                  {
                    "id": 23,
                    "name": "linux_runner",
                    "os": "linux",
                    "status": "online",
                    "busy": true,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 11,
                        "name": "Linux",
                        "type": "read-only"
                      }
                    ]
                  },
                  {
                    "id": 24,
                    "name": "mac_runner",
                    "os": "macos",
                    "status": "offline",
                    "busy": false,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 20,
                        "name": "macOS",
                        "type": "read-only"
                      },
                      {
                        "id": 21,
                        "name": "no-gpu",
                        "type": "custom"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the self-hosted runners that are in a specific enterprise group.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners",
        "title": "Set self-hosted runners in a group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of runner IDs to add to the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the runner."
            },
            "name": "runners",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of runner IDs to add to the runner group.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "runners": [
                  9,
                  2
                ]
              },
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of self-hosted runners that are part of an enterprise runner group.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "title": "Add a self-hosted runner to a group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a self-hosted runner to a runner group configured in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code>\nscope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "title": "Remove a self-hosted runner from a group for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_group_id": "RUNNER_GROUP_ID",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runner-groups",
        "title": "List self-hosted runner groups for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 3,
                "runner_groups": [
                  {
                    "id": 1,
                    "name": "Default",
                    "visibility": "all",
                    "default": true,
                    "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/1/runners",
                    "inherited": false,
                    "allows_public_repositories": true
                  },
                  {
                    "id": 2,
                    "name": "octo-runner-group",
                    "visibility": "selected",
                    "default": false,
                    "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
                    "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
                    "inherited": true,
                    "allows_public_repositories": true
                  },
                  {
                    "id": 3,
                    "name": "expensive-hardware",
                    "visibility": "private",
                    "default": false,
                    "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/3/runners",
                    "inherited": false,
                    "allows_public_repositories": true
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/actions/runner-groups",
        "title": "Create a self-hosted runner group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the runner group.</p>",
            "type": "string",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: <code>all</code>, <code>selected</code>, or <code>private</code>.</p>",
            "type": "string",
            "enum": [
              "selected",
              "all",
              "private"
            ],
            "default": "all",
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.",
            "childParamsGroups": []
          },
          {
            "description": "<p>List of repository IDs that can access the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the repository."
            },
            "name": "selected_repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of repository IDs that can access the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>List of runner IDs to add to the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the runner."
            },
            "name": "runners",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of runner IDs to add to the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the runner group can be used by <code>public</code> repositories.</p>",
            "type": "boolean",
            "default": false,
            "name": "allows_public_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the runner group can be used by `public` repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Expensive hardware runners",
                "visibility": "selected",
                "selected_repository_ids": [
                  32,
                  91
                ],
                "runners": [
                  9,
                  2
                ]
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "octo-runner-group",
                "visibility": "selected",
                "default": false,
                "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories",
                "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
                "inherited": false,
                "allows_public_repositories": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"<a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a>.\"</p>\n<p>Creates a new self-hosted runner group for an organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "title": "Get a self-hosted runner group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "octo-runner-group",
                "visibility": "selected",
                "default": false,
                "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/repositories",
                "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
                "inherited": false,
                "allows_public_repositories": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific self-hosted runner group for an organization.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "title": "Update a self-hosted runner group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the runner group.</p>",
            "type": "string",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the runner group.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: <code>all</code>, <code>selected</code>, or <code>private</code>.</p>",
            "type": "string",
            "enum": [
              "selected",
              "all",
              "private"
            ],
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the runner group can be used by <code>public</code> repositories.</p>",
            "type": "boolean",
            "default": false,
            "name": "allows_public_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the runner group can be used by `public` repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Expensive hardware runners",
                "visibility": "selected"
              },
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "octo-runner-group",
                "visibility": "selected",
                "default": false,
                "selected_repositories_url": "https://api.github.com/orgs/octo-org/actions/runner-groups/2/repositories",
                "runners_url": "https://api.github.com/orgs/octo-org/actions/runner_groups/2/runners",
                "inherited": false,
                "allows_public_repositories": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the <code>name</code> and <code>visibility</code> of a self-hosted runner group in an organization.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}",
        "title": "Delete a self-hosted runner group from an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a self-hosted runner group for an organization.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
        "title": "List repository access to a self-hosted runner group in an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "template_repository": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "organization": null,
                      "language": null,
                      "forks": 9,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "watchers": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues": 0,
                      "open_issues_count": 0,
                      "is_template": true,
                      "license": {
                        "key": "mit",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT",
                        "node_id": "MDc6TGljZW5zZW1pdA==",
                        "html_url": "https://api.github.com/licenses/mit"
                      },
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "allow_rebase_merge": true,
                      "template_repository": null,
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "allow_squash_merge": true,
                      "delete_branch_on_merge": true,
                      "allow_merge_commit": true,
                      "subscribers_count": 42,
                      "network_count": 0
                    },
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "delete_branch_on_merge": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see \"<a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a>.\"</p>\n<p>Lists the repositories with access to a self-hosted runner group configured in an organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories",
        "title": "Set repository access for a self-hosted runner group in an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of repository IDs that can access the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the repository."
            },
            "name": "selected_repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of repository IDs that can access the runner group.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "selected_repository_ids": [
                  32,
                  91
                ]
              },
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
        "title": "Add repository access to a self-hosted runner group in an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have <code>visibility</code> set to <code>selected</code>. For more information, see \"<a href=\"#create-a-self-hosted-runner-group-for-an-organization\">Create a self-hosted runner group for an organization</a>.\"\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}",
        "title": "Remove repository access to a self-hosted runner group in an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID",
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have <code>visibility</code> set to <code>selected</code>. For more information, see \"<a href=\"#create-a-self-hosted-runner-group-for-an-organization\">Create a self-hosted runner group for an organization</a>.\"\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
        "title": "List self-hosted runners in a group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "runners": [
                  {
                    "id": 23,
                    "name": "linux_runner",
                    "os": "linux",
                    "status": "online",
                    "busy": true,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 11,
                        "name": "Linux",
                        "type": "read-only"
                      }
                    ]
                  },
                  {
                    "id": 24,
                    "name": "mac_runner",
                    "os": "macos",
                    "status": "offline",
                    "busy": false,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 20,
                        "name": "macOS",
                        "type": "read-only"
                      },
                      {
                        "id": 21,
                        "name": "no-gpu",
                        "type": "custom"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists self-hosted runners that are in a specific organization group.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners",
        "title": "Set self-hosted runners in a group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. List of runner IDs to add to the runner group.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer",
              "description": "Unique identifier of the runner."
            },
            "name": "runners",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of runner IDs to add to the runner group.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "runners": [
                  9,
                  2
                ]
              },
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Replaces the list of self-hosted runners that are part of an organization runner group.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "title": "Add a self-hosted runner to a group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a self-hosted runner to a runner group configured in an organization.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}",
        "title": "Remove a self-hosted runner from a group for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runner-groups",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner group.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_group_id": "RUNNER_GROUP_ID",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.\nYou must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "self-hosted-runners": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runners",
        "title": "List self-hosted runners for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "runners": [
                  {
                    "id": 23,
                    "name": "linux_runner",
                    "os": "linux",
                    "status": "online",
                    "busy": true,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 11,
                        "name": "Linux",
                        "type": "read-only"
                      }
                    ]
                  },
                  {
                    "id": 24,
                    "name": "mac_runner",
                    "os": "macos",
                    "status": "offline",
                    "busy": false,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 20,
                        "name": "macOS",
                        "type": "read-only"
                      },
                      {
                        "id": 21,
                        "name": "no-gpu",
                        "type": "custom"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all self-hosted runners configured for an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runners/downloads",
        "title": "List runner applications for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "os": "osx",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "arm",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
                },
                {
                  "os": "win",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
                  "filename": "actions-runner-win-x64-2.164.0.zip"
                },
                {
                  "os": "linux",
                  "architecture": "arm64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists binaries for the runner application that you can download and run.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/enterprises/{enterprise}/actions/runners/registration-token",
        "title": "Create a registration token for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-22T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to the <code>config</code> script. The token expires after one hour.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-registration-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-registration-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using registration token</h4>\n<p>Configure your self-hosted runner, replacing <code>TOKEN</code> with the registration token provided by this endpoint.</p>\n<pre><code>./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/enterprises/{enterprise}/actions/runners/remove-token",
        "title": "Create a remove token for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-29T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to the <code>config</code> script to remove a self-hosted runner from an enterprise. The token expires after one hour.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-remove-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-remove-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using remove token</h4>\n<p>To remove your self-hosted runner from an enterprise, replace <code>TOKEN</code> with the remove token provided by this\nendpoint.</p>\n<pre><code>./config.sh remove --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprises/{enterprise}/actions/runners/{runner_id}",
        "title": "Get a self-hosted runner for an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 23,
                "name": "MBP",
                "os": "macos",
                "status": "online",
                "busy": true,
                "labels": [
                  {
                    "id": 5,
                    "name": "self-hosted",
                    "type": "read-only"
                  },
                  {
                    "id": 7,
                    "name": "X64",
                    "type": "read-only"
                  },
                  {
                    "id": 20,
                    "name": "macOS",
                    "type": "read-only"
                  },
                  {
                    "id": 21,
                    "name": "no-gpu",
                    "type": "custom"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific self-hosted runner configured in an enterprise.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprises/{enterprise}/actions/runners/{runner_id}",
        "title": "Delete a self-hosted runner from an enterprise",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "enterprise",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The slug version of the enterprise name. You can also substitute this value with the enterprise id.</p>"
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "enterprise": "ENTERPRISE",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.</p>\n<p>You must authenticate using an access token with the <code>admin:enterprise</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runners",
        "title": "List self-hosted runners for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "runners": [
                  {
                    "id": 23,
                    "name": "linux_runner",
                    "os": "linux",
                    "status": "online",
                    "busy": true,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 11,
                        "name": "Linux",
                        "type": "read-only"
                      }
                    ]
                  },
                  {
                    "id": 24,
                    "name": "mac_runner",
                    "os": "macos",
                    "status": "offline",
                    "busy": false,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 20,
                        "name": "macOS",
                        "type": "read-only"
                      },
                      {
                        "id": 21,
                        "name": "no-gpu",
                        "type": "custom"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all self-hosted runners configured in an organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runners/downloads",
        "title": "List runner applications for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "os": "osx",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "arm",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
                },
                {
                  "os": "win",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
                  "filename": "actions-runner-win-x64-2.164.0.zip"
                },
                {
                  "os": "linux",
                  "architecture": "arm64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists binaries for the runner application that you can download and run.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/actions/runners/registration-token",
        "title": "Create a registration token for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-22T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to the <code>config</code> script. The token expires after one hour.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-registration-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-registration-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using registration token</h4>\n<p>Configure your self-hosted runner, replacing <code>TOKEN</code> with the registration token provided by this endpoint.</p>\n<pre><code>./config.sh --url https://github.com/octo-org --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/actions/runners/remove-token",
        "title": "Create a remove token for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-29T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to the <code>config</code> script to remove a self-hosted runner from an organization. The token expires after one hour.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-remove-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-remove-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using remove token</h4>\n<p>To remove your self-hosted runner from an organization, replace <code>TOKEN</code> with the remove token provided by this\nendpoint.</p>\n<pre><code>./config.sh remove --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/actions/runners/{runner_id}",
        "title": "Get a self-hosted runner for an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 23,
                "name": "MBP",
                "os": "macos",
                "status": "online",
                "busy": true,
                "labels": [
                  {
                    "id": 5,
                    "name": "self-hosted",
                    "type": "read-only"
                  },
                  {
                    "id": 7,
                    "name": "X64",
                    "type": "read-only"
                  },
                  {
                    "id": 20,
                    "name": "macOS",
                    "type": "read-only"
                  },
                  {
                    "id": 21,
                    "name": "no-gpu",
                    "type": "custom"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific self-hosted runner configured in an organization.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/actions/runners/{runner_id}",
        "title": "Delete a self-hosted runner from an organization",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.</p>\n<p>You must authenticate using an access token with the <code>admin:org</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runners",
        "title": "List self-hosted runners for a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "runners": [
                  {
                    "id": 23,
                    "name": "linux_runner",
                    "os": "linux",
                    "status": "online",
                    "busy": true,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 11,
                        "name": "Linux",
                        "type": "read-only"
                      }
                    ]
                  },
                  {
                    "id": 24,
                    "name": "mac_runner",
                    "os": "macos",
                    "status": "offline",
                    "busy": false,
                    "labels": [
                      {
                        "id": 5,
                        "name": "self-hosted",
                        "type": "read-only"
                      },
                      {
                        "id": 7,
                        "name": "X64",
                        "type": "read-only"
                      },
                      {
                        "id": 20,
                        "name": "macOS",
                        "type": "read-only"
                      },
                      {
                        "id": 21,
                        "name": "no-gpu",
                        "type": "custom"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runners/downloads",
        "title": "List runner applications for a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "os": "osx",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-osx-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-osx-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-x64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-x64-2.164.0.tar.gz"
                },
                {
                  "os": "linux",
                  "architecture": "arm",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm-2.164.0.tar.gz"
                },
                {
                  "os": "win",
                  "architecture": "x64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-win-x64-2.164.0.zip",
                  "filename": "actions-runner-win-x64-2.164.0.zip"
                },
                {
                  "os": "linux",
                  "architecture": "arm64",
                  "download_url": "https://github.com/actions/runner/releases/download/v2.164.0/actions-runner-linux-arm64-2.164.0.tar.gz",
                  "filename": "actions-runner-linux-arm64-2.164.0.tar.gz"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists binaries for the runner application that you can download and run.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/actions/runners/registration-token",
        "title": "Create a registration token for a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "LLBF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-22T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to the <code>config</code> script. The token expires after one hour. You must authenticate\nusing an access token with the <code>repo</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-registration-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-registration-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using registration token</h4>\n<p>Configure your self-hosted runner, replacing <code>TOKEN</code> with the registration token provided by this endpoint.</p>\n<pre><code>./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/actions/runners/remove-token",
        "title": "Create a remove token for a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "AABF3JGZDX3P5PMEXLND6TS6FCWO6",
                "expires_at": "2020-01-29T12:13:35.123-08:00"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "descriptionHTML": "<p>Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.\nYou must authenticate using an access token with the <code>repo</code> scope to use this endpoint.</p>\n<h4 id=\"example-using-remove-token\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#example-using-remove-token\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Example using remove token</h4>\n<p>To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.</p>\n<pre><code>./config.sh remove --token TOKEN\n</code></pre>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "title": "Get a self-hosted runner for a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 23,
                "name": "MBP",
                "os": "macos",
                "status": "online",
                "busy": true,
                "labels": [
                  {
                    "id": 5,
                    "name": "self-hosted",
                    "type": "read-only"
                  },
                  {
                    "id": 7,
                    "name": "X64",
                    "type": "read-only"
                  },
                  {
                    "id": 20,
                    "name": "macOS",
                    "type": "read-only"
                  },
                  {
                    "id": 21,
                    "name": "no-gpu",
                    "type": "custom"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific self-hosted runner configured in a repository.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this\nendpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/actions/runners/{runner_id}",
        "title": "Delete a self-hosted runner from a repository",
        "category": "actions",
        "subcategory": "self-hosted-runners",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "runner_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>Unique identifier of the self-hosted runner.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "runner_id": "RUNNER_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.</p>\n<p>You must authenticate using an access token with the <code>repo</code>\nscope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "workflow-jobs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/jobs/{job_id}",
        "title": "Get a job for a workflow run",
        "category": "actions",
        "subcategory": "workflow-jobs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>job_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "job_id": "JOB_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 399444496,
                "run_id": 29679449,
                "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
                "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
                "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
                "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
                "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
                "status": "completed",
                "conclusion": "success",
                "started_at": "2020-01-20T17:42:40Z",
                "completed_at": "2020-01-20T17:44:39Z",
                "name": "build",
                "steps": [
                  {
                    "name": "Set up job",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 1,
                    "started_at": "2020-01-20T09:42:40.000-08:00",
                    "completed_at": "2020-01-20T09:42:41.000-08:00"
                  },
                  {
                    "name": "Run actions/checkout@v2",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 2,
                    "started_at": "2020-01-20T09:42:41.000-08:00",
                    "completed_at": "2020-01-20T09:42:45.000-08:00"
                  },
                  {
                    "name": "Set up Ruby",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 3,
                    "started_at": "2020-01-20T09:42:45.000-08:00",
                    "completed_at": "2020-01-20T09:42:45.000-08:00"
                  },
                  {
                    "name": "Run actions/cache@v3",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 4,
                    "started_at": "2020-01-20T09:42:45.000-08:00",
                    "completed_at": "2020-01-20T09:42:48.000-08:00"
                  },
                  {
                    "name": "Install Bundler",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 5,
                    "started_at": "2020-01-20T09:42:48.000-08:00",
                    "completed_at": "2020-01-20T09:42:52.000-08:00"
                  },
                  {
                    "name": "Install Gems",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 6,
                    "started_at": "2020-01-20T09:42:52.000-08:00",
                    "completed_at": "2020-01-20T09:42:53.000-08:00"
                  },
                  {
                    "name": "Run Tests",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 7,
                    "started_at": "2020-01-20T09:42:53.000-08:00",
                    "completed_at": "2020-01-20T09:42:59.000-08:00"
                  },
                  {
                    "name": "Deploy to Heroku",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 8,
                    "started_at": "2020-01-20T09:42:59.000-08:00",
                    "completed_at": "2020-01-20T09:44:39.000-08:00"
                  },
                  {
                    "name": "Post actions/cache@v3",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 16,
                    "started_at": "2020-01-20T09:44:39.000-08:00",
                    "completed_at": "2020-01-20T09:44:39.000-08:00"
                  },
                  {
                    "name": "Complete job",
                    "status": "completed",
                    "conclusion": "success",
                    "number": 17,
                    "started_at": "2020-01-20T09:44:39.000-08:00",
                    "completed_at": "2020-01-20T09:44:39.000-08:00"
                  }
                ],
                "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
        "title": "Download job logs for a workflow run",
        "category": "actions",
        "subcategory": "workflow-jobs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>job_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "job_id": "JOB_ID"
              }
            },
            "response": {
              "statusCode": "302",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look\nfor <code>Location:</code> in the response header to find the URL for the download. Anyone with read access to the repository can\nuse this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must\nhave the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        "title": "List jobs for a workflow run",
        "category": "actions",
        "subcategory": "workflow-jobs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            },
            "descriptionHTML": "<p>Filters jobs by their <code>completed_at</code> timestamp. Can be one of:<br>\n* <code>latest</code>: Returns jobs from the most recent execution of the workflow run.<br>\n* <code>all</code>: Returns all jobs for a workflow run, including from old executions of the workflow run.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "jobs": [
                  {
                    "id": 399444496,
                    "run_id": 29679449,
                    "run_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/29679449",
                    "node_id": "MDEyOldvcmtmbG93IEpvYjM5OTQ0NDQ5Ng==",
                    "head_sha": "f83a356604ae3c5d03e1b46ef4d1ca77d64a90b0",
                    "url": "https://api.github.com/repos/octo-org/octo-repo/actions/jobs/399444496",
                    "html_url": "https://github.com/octo-org/octo-repo/runs/399444496",
                    "status": "completed",
                    "conclusion": "success",
                    "started_at": "2020-01-20T17:42:40Z",
                    "completed_at": "2020-01-20T17:44:39Z",
                    "name": "build",
                    "steps": [
                      {
                        "name": "Set up job",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 1,
                        "started_at": "2020-01-20T09:42:40.000-08:00",
                        "completed_at": "2020-01-20T09:42:41.000-08:00"
                      },
                      {
                        "name": "Run actions/checkout@v2",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 2,
                        "started_at": "2020-01-20T09:42:41.000-08:00",
                        "completed_at": "2020-01-20T09:42:45.000-08:00"
                      },
                      {
                        "name": "Set up Ruby",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 3,
                        "started_at": "2020-01-20T09:42:45.000-08:00",
                        "completed_at": "2020-01-20T09:42:45.000-08:00"
                      },
                      {
                        "name": "Run actions/cache@v3",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 4,
                        "started_at": "2020-01-20T09:42:45.000-08:00",
                        "completed_at": "2020-01-20T09:42:48.000-08:00"
                      },
                      {
                        "name": "Install Bundler",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 5,
                        "started_at": "2020-01-20T09:42:48.000-08:00",
                        "completed_at": "2020-01-20T09:42:52.000-08:00"
                      },
                      {
                        "name": "Install Gems",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 6,
                        "started_at": "2020-01-20T09:42:52.000-08:00",
                        "completed_at": "2020-01-20T09:42:53.000-08:00"
                      },
                      {
                        "name": "Run Tests",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 7,
                        "started_at": "2020-01-20T09:42:53.000-08:00",
                        "completed_at": "2020-01-20T09:42:59.000-08:00"
                      },
                      {
                        "name": "Deploy to Heroku",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 8,
                        "started_at": "2020-01-20T09:42:59.000-08:00",
                        "completed_at": "2020-01-20T09:44:39.000-08:00"
                      },
                      {
                        "name": "Post actions/cache@v3",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 16,
                        "started_at": "2020-01-20T09:44:39.000-08:00",
                        "completed_at": "2020-01-20T09:44:39.000-08:00"
                      },
                      {
                        "name": "Complete job",
                        "status": "completed",
                        "conclusion": "success",
                        "number": 17,
                        "started_at": "2020-01-20T09:44:39.000-08:00",
                        "completed_at": "2020-01-20T09:44:39.000-08:00"
                      }
                    ],
                    "check_run_url": "https://api.github.com/repos/octo-org/octo-repo/check-runs/399444496",
                    "labels": [
                      "self-hosted",
                      "foo",
                      "bar"
                    ],
                    "runner_id": 1,
                    "runner_name": "my runner",
                    "runner_group_id": 2,
                    "runner_group_name": "my runner group"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters\">Parameters</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "workflow-runs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runs",
        "title": "List workflow runs for a repository",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "actor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns someone's workflow runs. Use the login for the user who created the <code>push</code> associated with the check suite or workflow run.</p>"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns workflow runs associated with a branch. Use the name of the branch of the <code>push</code>.</p>"
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns workflow run triggered by the event you specify. For example, <code>push</code>, <code>pull_request</code> or <code>issue</code>. For more information, see \"<a href=\"https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows\">Events that trigger workflows</a>.\"</p>"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "completed",
                "action_required",
                "cancelled",
                "failure",
                "neutral",
                "skipped",
                "stale",
                "success",
                "timed_out",
                "in_progress",
                "queued",
                "requested",
                "waiting"
              ]
            },
            "descriptionHTML": "<p>Returns workflow runs with the check run <code>status</code> or <code>conclusion</code> that you specify. For example, a conclusion can be <code>success</code> or a status can be <code>in_progress</code>. Only GitHub can set a status of <code>waiting</code> or <code>requested</code>. For a list of the possible <code>status</code> and <code>conclusion</code> options, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run\">Create a check run</a>.\"</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "created",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Returns workflow runs created within the given date-time range. For more information on the syntax, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates\">Understanding the search syntax</a>.\"</p>"
          },
          {
            "name": "exclude_pull_requests",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code> pull requests are omitted from the response (empty array).</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "workflow_runs": [
                  {
                    "id": 30433642,
                    "name": "Build",
                    "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
                    "check_suite_id": 42,
                    "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
                    "head_branch": "master",
                    "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
                    "run_number": 562,
                    "event": "push",
                    "status": "queued",
                    "conclusion": null,
                    "workflow_id": 159038,
                    "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
                    "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
                    "pull_requests": [],
                    "created_at": "2020-01-22T19:33:08Z",
                    "updated_at": "2020-01-22T19:33:08Z",
                    "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
                    "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
                    "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
                    "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
                    "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
                    "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
                    "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
                    "head_commit": {
                      "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                      "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                      "message": "Create linter.yaml",
                      "timestamp": "2020-01-22T19:33:05Z",
                      "author": {
                        "name": "Octo Cat",
                        "email": "octocat@github.com"
                      },
                      "committer": {
                        "name": "GitHub",
                        "email": "noreply@github.com"
                      }
                    },
                    "repository": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                    },
                    "head_repository": {
                      "id": 217723378,
                      "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                      "name": "octo-repo",
                      "full_name": "octo-org/octo-repo",
                      "private": true,
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "html_url": "https://github.com/octo-org/octo-repo",
                      "description": null,
                      "fork": false,
                      "url": "https://api.github.com/repos/octo-org/octo-repo",
                      "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                      "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                      "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                      "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                      "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                      "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                      "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                      "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                      "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                      "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                      "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                      "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                      "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                      "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                      "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                      "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                      "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                      "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                      "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                      "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                      "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                      "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                      "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                      "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                      "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                      "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                      "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                      "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                      "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                      "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                      "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                      "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                      "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters\">Parameters</a>.</p>\n<p>Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}",
        "title": "Get a workflow run",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          },
          {
            "name": "exclude_pull_requests",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code> pull requests are omitted from the response (empty array).</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 30433642,
                "name": "Build",
                "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
                "check_suite_id": 42,
                "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
                "head_branch": "master",
                "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
                "run_number": 562,
                "event": "push",
                "status": "queued",
                "workflow_id": 159038,
                "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
                "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
                "pull_requests": [],
                "created_at": "2020-01-22T19:33:08Z",
                "updated_at": "2020-01-22T19:33:08Z",
                "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
                "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
                "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
                "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
                "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
                "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
                "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
                "head_commit": {
                  "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                  "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                  "message": "Create linter.yaml",
                  "timestamp": "2020-01-22T19:33:05Z",
                  "author": {
                    "name": "Octo Cat",
                    "email": "octocat@github.com"
                  },
                  "committer": {
                    "name": "GitHub",
                    "email": "noreply@github.com"
                  }
                },
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                },
                "head_repository": {
                  "id": 217723378,
                  "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                  "name": "octo-repo",
                  "full_name": "octo-org/octo-repo",
                  "private": true,
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "html_url": "https://github.com/octo-org/octo-repo",
                  "description": null,
                  "fork": false,
                  "url": "https://api.github.com/repos/octo-org/octo-repo",
                  "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                  "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                  "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                  "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                  "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                  "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                  "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                  "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                  "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                  "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                  "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                  "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                  "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                  "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                  "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                  "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                  "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                  "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                  "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                  "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                  "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                  "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                  "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                  "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                  "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                  "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                  "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                  "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                  "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                  "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                  "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                  "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                  "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}",
        "title": "Delete a workflow run",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is\nprivate you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:write</code> permission to use\nthis endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
        "title": "Cancel a workflow run",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Cancels a workflow run using its <code>id</code>. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        "title": "Download workflow run logs",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "302",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for\n<code>Location:</code> in the response header to find the URL for the download. Anyone with read access to the repository can use\nthis endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have\nthe <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/logs",
        "title": "Delete workflow run logs",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes all logs for a workflow run. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
        "title": "Re-run a workflow",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the workflow run.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "run_id": "RUN_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Re-runs your workflow run using its <code>id</code>. You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        "title": "List workflow runs",
        "category": "actions",
        "subcategory": "workflow-runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "descriptionHTML": "<p>The ID of the workflow. You can also pass the workflow file name as a string.</p>"
          },
          {
            "name": "actor",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns someone's workflow runs. Use the login for the user who created the <code>push</code> associated with the check suite or workflow run.</p>"
          },
          {
            "name": "branch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns workflow runs associated with a branch. Use the name of the branch of the <code>push</code>.</p>"
          },
          {
            "name": "event",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns workflow run triggered by the event you specify. For example, <code>push</code>, <code>pull_request</code> or <code>issue</code>. For more information, see \"<a href=\"https://docs.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows\">Events that trigger workflows</a>.\"</p>"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "completed",
                "action_required",
                "cancelled",
                "failure",
                "neutral",
                "skipped",
                "stale",
                "success",
                "timed_out",
                "in_progress",
                "queued",
                "requested",
                "waiting"
              ]
            },
            "descriptionHTML": "<p>Returns workflow runs with the check run <code>status</code> or <code>conclusion</code> that you specify. For example, a conclusion can be <code>success</code> or a status can be <code>in_progress</code>. Only GitHub can set a status of <code>waiting</code> or <code>requested</code>. For a list of the possible <code>status</code> and <code>conclusion</code> options, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-run\">Create a check run</a>.\"</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "created",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Returns workflow runs created within the given date-time range. For more information on the syntax, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/getting-started-with-searching-on-github/understanding-the-search-syntax#query-for-dates\">Understanding the search syntax</a>.\"</p>"
          },
          {
            "name": "exclude_pull_requests",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code> pull requests are omitted from the response (empty array).</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "workflow_id": "WORKFLOW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "workflow_runs": [
                  {
                    "id": 30433642,
                    "name": "Build",
                    "node_id": "MDEyOldvcmtmbG93IFJ1bjI2OTI4OQ==",
                    "check_suite_id": 42,
                    "check_suite_node_id": "MDEwOkNoZWNrU3VpdGU0Mg==",
                    "head_branch": "master",
                    "head_sha": "acb5820ced9479c074f688cc328bf03f341a511d",
                    "run_number": 562,
                    "event": "push",
                    "status": "queued",
                    "conclusion": null,
                    "workflow_id": 159038,
                    "url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642",
                    "html_url": "https://github.com/octo-org/octo-repo/actions/runs/30433642",
                    "pull_requests": [],
                    "created_at": "2020-01-22T19:33:08Z",
                    "updated_at": "2020-01-22T19:33:08Z",
                    "jobs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/jobs",
                    "logs_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/logs",
                    "check_suite_url": "https://api.github.com/repos/octo-org/octo-repo/check-suites/414944374",
                    "artifacts_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/artifacts",
                    "cancel_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/cancel",
                    "rerun_url": "https://api.github.com/repos/octo-org/octo-repo/actions/runs/30433642/rerun",
                    "workflow_url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/159038",
                    "head_commit": {
                      "id": "acb5820ced9479c074f688cc328bf03f341a511d",
                      "tree_id": "d23f6eedb1e1b9610bbc754ddb5197bfe7271223",
                      "message": "Create linter.yaml",
                      "timestamp": "2020-01-22T19:33:05Z",
                      "author": {
                        "name": "Octo Cat",
                        "email": "octocat@github.com"
                      },
                      "committer": {
                        "name": "GitHub",
                        "email": "noreply@github.com"
                      }
                    },
                    "repository": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                    },
                    "head_repository": {
                      "id": 217723378,
                      "node_id": "MDEwOlJlcG9zaXRvcnkyMTc3MjMzNzg=",
                      "name": "octo-repo",
                      "full_name": "octo-org/octo-repo",
                      "private": true,
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "html_url": "https://github.com/octo-org/octo-repo",
                      "description": null,
                      "fork": false,
                      "url": "https://api.github.com/repos/octo-org/octo-repo",
                      "forks_url": "https://api.github.com/repos/octo-org/octo-repo/forks",
                      "keys_url": "https://api.github.com/repos/octo-org/octo-repo/keys{/key_id}",
                      "collaborators_url": "https://api.github.com/repos/octo-org/octo-repo/collaborators{/collaborator}",
                      "teams_url": "https://api.github.com/repos/octo-org/octo-repo/teams",
                      "hooks_url": "https://api.github.com/repos/octo-org/octo-repo/hooks",
                      "issue_events_url": "https://api.github.com/repos/octo-org/octo-repo/issues/events{/number}",
                      "events_url": "https://api.github.com/repos/octo-org/octo-repo/events",
                      "assignees_url": "https://api.github.com/repos/octo-org/octo-repo/assignees{/user}",
                      "branches_url": "https://api.github.com/repos/octo-org/octo-repo/branches{/branch}",
                      "tags_url": "https://api.github.com/repos/octo-org/octo-repo/tags",
                      "blobs_url": "https://api.github.com/repos/octo-org/octo-repo/git/blobs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octo-org/octo-repo/git/tags{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octo-org/octo-repo/git/refs{/sha}",
                      "trees_url": "https://api.github.com/repos/octo-org/octo-repo/git/trees{/sha}",
                      "statuses_url": "https://api.github.com/repos/octo-org/octo-repo/statuses/{sha}",
                      "languages_url": "https://api.github.com/repos/octo-org/octo-repo/languages",
                      "stargazers_url": "https://api.github.com/repos/octo-org/octo-repo/stargazers",
                      "contributors_url": "https://api.github.com/repos/octo-org/octo-repo/contributors",
                      "subscribers_url": "https://api.github.com/repos/octo-org/octo-repo/subscribers",
                      "subscription_url": "https://api.github.com/repos/octo-org/octo-repo/subscription",
                      "commits_url": "https://api.github.com/repos/octo-org/octo-repo/commits{/sha}",
                      "git_commits_url": "https://api.github.com/repos/octo-org/octo-repo/git/commits{/sha}",
                      "comments_url": "https://api.github.com/repos/octo-org/octo-repo/comments{/number}",
                      "issue_comment_url": "https://api.github.com/repos/octo-org/octo-repo/issues/comments{/number}",
                      "contents_url": "https://api.github.com/repos/octo-org/octo-repo/contents/{+path}",
                      "compare_url": "https://api.github.com/repos/octo-org/octo-repo/compare/{base}...{head}",
                      "merges_url": "https://api.github.com/repos/octo-org/octo-repo/merges",
                      "archive_url": "https://api.github.com/repos/octo-org/octo-repo/{archive_format}{/ref}",
                      "downloads_url": "https://api.github.com/repos/octo-org/octo-repo/downloads",
                      "issues_url": "https://api.github.com/repos/octo-org/octo-repo/issues{/number}",
                      "pulls_url": "https://api.github.com/repos/octo-org/octo-repo/pulls{/number}",
                      "milestones_url": "https://api.github.com/repos/octo-org/octo-repo/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octo-org/octo-repo/notifications{?since,all,participating}",
                      "labels_url": "https://api.github.com/repos/octo-org/octo-repo/labels{/name}",
                      "releases_url": "https://api.github.com/repos/octo-org/octo-repo/releases{/id}",
                      "deployments_url": "https://api.github.com/repos/octo-org/octo-repo/deployments"
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all workflow runs for a workflow. You can replace <code>workflow_id</code> with the workflow file name. For example, you could use <code>main.yaml</code>. You can use parameters to narrow the list of results. For more information about using parameters, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#parameters\">Parameters</a>.</p>\n<p>Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "workflows": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows",
        "title": "List repository workflows",
        "category": "actions",
        "subcategory": "workflows",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "workflows": [
                  {
                    "id": 161335,
                    "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
                    "name": "CI",
                    "path": ".github/workflows/blank.yaml",
                    "state": "active",
                    "created_at": "2020-01-08T23:48:37.000-08:00",
                    "updated_at": "2020-01-08T23:50:21.000-08:00",
                    "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
                    "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
                    "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
                  },
                  {
                    "id": 269289,
                    "node_id": "MDE4OldvcmtmbG93IFNlY29uZGFyeTI2OTI4OQ==",
                    "name": "Linter",
                    "path": ".github/workflows/linter.yaml",
                    "state": "active",
                    "created_at": "2020-01-08T23:48:37.000-08:00",
                    "updated_at": "2020-01-08T23:50:21.000-08:00",
                    "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/269289",
                    "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/269289",
                    "badge_url": "https://github.com/octo-org/octo-repo/workflows/Linter/badge.svg"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}",
        "title": "Get a workflow",
        "category": "actions",
        "subcategory": "workflows",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "descriptionHTML": "<p>The ID of the workflow. You can also pass the workflow file name as a string.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "workflow_id": "WORKFLOW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 161335,
                "node_id": "MDg6V29ya2Zsb3cxNjEzMzU=",
                "name": "CI",
                "path": ".github/workflows/blank.yaml",
                "state": "active",
                "created_at": "2020-01-08T23:48:37.000-08:00",
                "updated_at": "2020-01-08T23:50:21.000-08:00",
                "url": "https://api.github.com/repos/octo-org/octo-repo/actions/workflows/161335",
                "html_url": "https://github.com/octo-org/octo-repo/blob/master/.github/workflows/161335",
                "badge_url": "https://github.com/octo-org/octo-repo/workflows/CI/badge.svg"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specific workflow. You can replace <code>workflow_id</code> with the workflow file name. For example, you could use <code>main.yaml</code>. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the <code>repo</code> scope. GitHub Apps must have the <code>actions:read</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
        "title": "Disable a workflow",
        "category": "actions",
        "subcategory": "workflows",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "descriptionHTML": "<p>The ID of the workflow. You can also pass the workflow file name as a string.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "workflow_id": "WORKFLOW_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Disables a workflow and sets the <code>state</code> of the workflow to <code>disabled_manually</code>. You can replace <code>workflow_id</code> with the workflow file name. For example, you could use <code>main.yaml</code>.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
        "title": "Create a workflow dispatch event",
        "category": "actions",
        "subcategory": "workflows",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "descriptionHTML": "<p>The ID of the workflow. You can also pass the workflow file name as a string.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The git reference for the workflow. The reference can be a branch or tag name.</p>",
            "name": "ref",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The git reference for the workflow. The reference can be a branch or tag name.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when <code>inputs</code> are omitted.</p>",
            "additionalProperties": {
              "type": "string"
            },
            "maxProperties": 10,
            "name": "inputs",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "ref": "topic-branch",
                "inputs": {
                  "name": "Mona the Octocat",
                  "home": "San Francisco, CA"
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "workflow_id": "WORKFLOW_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace <code>workflow_id</code> with the workflow file name. For example, you could use <code>main.yaml</code>.</p>\n<p>You must configure your GitHub Actions workflow to run when the <a href=\"/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch\"><code>workflow_dispatch</code> webhook</a> event occurs. The <code>inputs</code> are configured in the workflow file. For more information about how to configure the <code>workflow_dispatch</code> event in the workflow file, see \"<a href=\"/actions/reference/events-that-trigger-workflows#workflow_dispatch\">Events that trigger workflows</a>.\"</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint. For more information, see \"<a href=\"https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line\">Creating a personal access token for the command line</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
        "title": "Enable a workflow",
        "category": "actions",
        "subcategory": "workflows",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "workflow_id",
            "in": "path",
            "required": true,
            "schema": {
              "oneOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "descriptionHTML": "<p>The ID of the workflow. You can also pass the workflow file name as a string.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "workflow_id": "WORKFLOW_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Enables a workflow and sets the <code>state</code> of the workflow to <code>active</code>. You can replace <code>workflow_id</code> with the workflow file name. For example, you could use <code>main.yaml</code>.</p>\n<p>You must authenticate using an access token with the <code>repo</code> scope to use this endpoint. GitHub Apps must have the <code>actions:write</code> permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ]
  },
  "activity": {
    "events": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/events",
        "title": "List public events",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "200",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/networks/{owner}/{repo}/events",
        "title": "List public events for a network of repositories",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "200",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/events",
        "title": "List public organization events",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/events",
        "title": "List repository events",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/events",
        "title": "List events for the authenticated user",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/events/orgs/{org}",
        "title": "List organization events for the authenticated user",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME",
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This is the user's organization dashboard. You must be authenticated as the user to view this.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/events/public",
        "title": "List public events for a user",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/received_events",
        "title": "List events received by the authenticated user",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/received_events/public",
        "title": "List public events received by a user",
        "category": "activity",
        "subcategory": "events",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "feeds": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/feeds",
        "title": "Get feeds",
        "category": "activity",
        "subcategory": "feeds",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "timeline_url": "https://github.com/timeline",
                "user_url": "https://github.com/{user}",
                "current_user_public_url": "https://github.com/octocat",
                "current_user_url": "https://github.com/octocat.private?token=abc123",
                "current_user_actor_url": "https://github.com/octocat.private.actor?token=abc123",
                "current_user_organization_url": "",
                "current_user_organization_urls": [
                  "https://github.com/organizations/github/octocat.private.atom?token=abc123"
                ],
                "security_advisories_url": "https://github.com/security-advisories",
                "_links": {
                  "timeline": {
                    "href": "https://github.com/timeline",
                    "type": "application/atom+xml"
                  },
                  "user": {
                    "href": "https://github.com/{user}",
                    "type": "application/atom+xml"
                  },
                  "current_user_public": {
                    "href": "https://github.com/octocat",
                    "type": "application/atom+xml"
                  },
                  "current_user": {
                    "href": "https://github.com/octocat.private?token=abc123",
                    "type": "application/atom+xml"
                  },
                  "current_user_actor": {
                    "href": "https://github.com/octocat.private.actor?token=abc123",
                    "type": "application/atom+xml"
                  },
                  "current_user_organization": {
                    "href": "",
                    "type": ""
                  },
                  "current_user_organizations": [
                    {
                      "href": "https://github.com/organizations/github/octocat.private.atom?token=abc123",
                      "type": "application/atom+xml"
                    }
                  ]
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>GitHub Enterprise Server provides several timeline resources in <a href=\"http://en.wikipedia.org/wiki/Atom_(standard)\">Atom</a> format. The Feeds API lists all the feeds available to the authenticated user:</p>\n<ul>\n<li><strong>Timeline</strong>: The GitHub Enterprise Server global public timeline</li>\n<li><strong>User</strong>: The public timeline for any user, using <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia\">URI template</a></li>\n<li><strong>Current user public</strong>: The public timeline for the authenticated user</li>\n<li><strong>Current user</strong>: The private timeline for the authenticated user</li>\n<li><strong>Current user actor</strong>: The private timeline for activity created by the authenticated user</li>\n<li><strong>Current user organizations</strong>: The private timeline for the organizations the authenticated user is a member of.</li>\n<li><strong>Security advisories</strong>: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub Enterprise Server.</li>\n</ul>\n<p><strong>Note</strong>: Private feeds are only returned when <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">authenticating via Basic Auth</a> since current feed URIs use the older, non revocable auth tokens.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "notifications": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/notifications",
        "title": "List notifications for the authenticated user",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code>, show notifications marked as read.</p>"
          },
          {
            "name": "participating",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code>, only shows notifications in which the user is directly participating or mentioned.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated before the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": "1",
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                  },
                  "subject": {
                    "title": "Greetings",
                    "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
                    "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
                    "type": "Issue"
                  },
                  "reason": "subscribed",
                  "unread": true,
                  "updated_at": "2014-11-07T22:01:45Z",
                  "last_read_at": "2014-11-07T22:01:45Z",
                  "url": "https://api.github.com/notifications/threads/1",
                  "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all notifications for the current user, sorted by most recently updated.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/notifications",
        "title": "Mark notifications as read",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p>Describes the last point that notifications were checked.</p>",
            "type": "string",
            "format": "date-time",
            "name": "last_read_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Describes the last point that notifications were checked.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the notification has been read.</p>",
            "type": "boolean",
            "name": "read",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the notification has been read.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "202",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          },
          {
            "key": "205",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "205",
              "description": "Reset Content"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Marks all notifications as \"read\" removes it from the <a href=\"https://github.com/notifications\">default view on GitHub Enterprise Server</a>. If the number of notifications is too large to complete in one request, you will receive a <code>202 Accepted</code> status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#list-notifications-for-the-authenticated-user\">List notifications for the authenticated user</a> endpoint and pass the query parameter <code>all=false</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "205",
            "description": "<p>Reset Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/notifications/threads/{thread_id}",
        "title": "Get a thread",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>thread_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "thread_id": "THREAD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": "1",
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                },
                "subject": {
                  "title": "Greetings",
                  "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
                  "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
                  "type": "Issue"
                },
                "reason": "subscribed",
                "unread": true,
                "updated_at": "2014-11-07T22:01:45Z",
                "last_read_at": "2014-11-07T22:01:45Z",
                "url": "https://api.github.com/notifications/threads/1",
                "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/notifications/threads/{thread_id}",
        "title": "Mark a thread as read",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>thread_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "205",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "thread_id": "THREAD_ID"
              }
            },
            "response": {
              "statusCode": "205",
              "description": "Reset Content"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "205",
            "description": "<p>Reset Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/notifications/threads/{thread_id}/subscription",
        "title": "Get a thread subscription for the authenticated user",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>thread_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "thread_id": "THREAD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "subscribed": true,
                "ignored": false,
                "reason": null,
                "created_at": "2012-10-06T21:34:12Z",
                "url": "https://api.github.com/notifications/threads/1/subscription",
                "thread_url": "https://api.github.com/notifications/threads/1"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This checks to see if the current user is subscribed to a thread. You can also <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#get-a-repository-subscription\">get a repository subscription</a>.</p>\n<p>Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were <strong>@mentioned</strong>, or manually subscribe to a thread.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/notifications/threads/{thread_id}/subscription",
        "title": "Set a thread subscription",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>thread_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>Whether to block all notifications from a thread.</p>",
            "default": false,
            "type": "boolean",
            "name": "ignored",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether to block all notifications from a thread.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "thread_id": "THREAD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "subscribed": true,
                "ignored": false,
                "reason": null,
                "created_at": "2012-10-06T21:34:12Z",
                "url": "https://api.github.com/notifications/threads/1/subscription",
                "thread_url": "https://api.github.com/notifications/threads/1"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an <strong>@mention</strong>.</p>\n<p>You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.</p>\n<p>Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#delete-a-thread-subscription\">Delete a thread subscription</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/notifications/threads/{thread_id}/subscription",
        "title": "Delete a thread subscription",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "thread_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>thread_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "thread_id": "THREAD_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Mutes all future notifications for a conversation until you comment on the thread or get an <strong>@mention</strong>. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#set-a-thread-subscription\">Set a thread subscription</a> endpoint and set <code>ignore</code> to <code>true</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/notifications",
        "title": "List repository notifications for the authenticated user",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code>, show notifications marked as read.</p>"
          },
          {
            "name": "participating",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "descriptionHTML": "<p>If <code>true</code>, only shows notifications in which the user is directly participating or mentioned.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated before the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": "1",
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                  },
                  "subject": {
                    "title": "Greetings",
                    "url": "https://api.github.com/repos/octokit/octokit.rb/issues/123",
                    "latest_comment_url": "https://api.github.com/repos/octokit/octokit.rb/issues/comments/123",
                    "type": "Issue"
                  },
                  "reason": "subscribed",
                  "unread": true,
                  "updated_at": "2014-11-07T22:01:45Z",
                  "last_read_at": "2014-11-07T22:01:45Z",
                  "url": "https://api.github.com/notifications/threads/1",
                  "subscription_url": "https://api.github.com/notifications/threads/1/subscription"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all notifications for the current user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/notifications",
        "title": "Mark repository notifications as read",
        "category": "activity",
        "subcategory": "notifications",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. Default: The current timestamp.</p>",
            "name": "last_read_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "202",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          },
          {
            "key": "205",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "205",
              "description": "Reset Content"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Marks all notifications in a repository as \"read\" removes them from the <a href=\"https://github.com/notifications\">default view on GitHub Enterprise Server</a>. If the number of notifications is too large to complete in one request, you will receive a <code>202 Accepted</code> status and GitHub Enterprise Server will run an asynchronous process to mark notifications as \"read.\" To check whether any \"unread\" notifications remain, you can use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#list-repository-notifications-for-the-authenticated-user\">List repository notifications for the authenticated user</a> endpoint and pass the query parameter <code>all=false</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "205",
            "description": "<p>Reset Content</p>"
          }
        ]
      }
    ],
    "starring": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stargazers",
        "title": "List stargazers",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default-response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          },
          {
            "key": "alternative-response-with-star-creation-timestamps",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Alternative response with star creation timestamps",
              "example": [
                {
                  "starred_at": "2011-01-16T19:06:43Z",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people that have starred the repository.</p>\n<p>You can also find out <em>when</em> stars were created by passing the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> via the <code>Accept</code> header:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/starred",
        "title": "List repositories starred by the authenticated user",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>One of <code>created</code> (when the repository was starred) or <code>updated</code> (when it was last pushed to).</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default-response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "template_repository": null,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              ]
            }
          },
          {
            "key": "alternative-response-with-star-creation-timestamps",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/vnd.github.v3.star+json",
              "description": "Alternative response with star creation timestamps",
              "example": [
                {
                  "starred_at": "2011-01-16T19:06:43Z",
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists repositories the authenticated user has starred.</p>\n<p>You can also find out <em>when</em> stars were created by passing the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> via the <code>Accept</code> header:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/starred/{owner}/{repo}",
        "title": "Check if a repository is starred by the authenticated user",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if this repository is starred by you"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if this repository is starred by you</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if this repository is not starred by you</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/user/starred/{owner}/{repo}",
        "title": "Star a repository for the authenticated user",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/starred/{owner}/{repo}",
        "title": "Unstar a repository for the authenticated user",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/starred",
        "title": "List repositories starred by a user",
        "category": "activity",
        "subcategory": "starring",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>One of <code>created</code> (when the repository was starred) or <code>updated</code> (when it was last pushed to).</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "template_repository": null,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists repositories a user has starred.</p>\n<p>You can also find out <em>when</em> stars were created by passing the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> via the <code>Accept</code> header:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "watching": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/subscribers",
        "title": "List watchers",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people watching the specified repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/subscription",
        "title": "Get a repository subscription",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if you subscribe to the repository",
              "example": {
                "subscribed": true,
                "ignored": false,
                "reason": null,
                "created_at": "2012-10-06T21:34:12Z",
                "url": "https://api.github.com/repos/octocat/example/subscription",
                "repository_url": "https://api.github.com/repos/octocat/example"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if you subscribe to the repository</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if you don't subscribe to the repository</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/subscription",
        "title": "Set a repository subscription",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p>Determines if notifications should be received from this repository.</p>",
            "name": "subscribed",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications should be received from this repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if all notifications should be blocked from this repository.</p>",
            "name": "ignored",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if all notifications should be blocked from this repository.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "subscribed": true,
                "ignored": false,
                "reason": null,
                "created_at": "2012-10-06T21:34:12Z",
                "url": "https://api.github.com/repos/octocat/example/subscription",
                "repository_url": "https://api.github.com/repos/octocat/example"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If you would like to watch a repository, set <code>subscribed</code> to <code>true</code>. If you would like to ignore notifications made within a repository, set <code>ignored</code> to <code>true</code>. If you would like to stop watching a repository, <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#delete-a-repository-subscription\">delete the repository's subscription</a> completely.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/subscription",
        "title": "Delete a repository subscription",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/activity#set-a-repository-subscription\">set the repository's subscription manually</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/subscriptions",
        "title": "List repositories watched by the authenticated user",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists repositories the authenticated user is watching.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/subscriptions",
        "title": "List repositories watched by a user",
        "category": "activity",
        "subcategory": "watching",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists repositories a user is watching.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ]
  },
  "apps": {
    "apps": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/app",
        "title": "Get the authenticated app",
        "category": "apps",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": true
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the <code>installations_count</code> in the response. For more details about your app's installations, see the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/apps#list-installations-for-the-authenticated-app\">List installations for the authenticated app</a>\" endpoint.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/app-manifests/{code}/conversions",
        "title": "Create a GitHub App from a manifest",
        "category": "apps",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "code": "CODE"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDxOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": true
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ],
                "client_id": "Iv1.8a61f9b3a7aba766",
                "client_secret": "1726be1638095a19edd134c77bde3aa2ece1e5d8",
                "webhook_secret": "e340154128314309424b7c8e90325147d99fdafa",
                "pem": "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAuEPzOUE+kiEH1WLiMeBytTEF856j0hOVcSUSUkZxKvqczkWM\n9vo1gDyC7ZXhdH9fKh32aapba3RSsp4ke+giSmYTk2mGR538ShSDxh0OgpJmjiKP\nX0Bj4j5sFqfXuCtl9SkH4iueivv4R53ktqM+n6hk98l6hRwC39GVIblAh2lEM4L/\n6WvYwuQXPMM5OG2Ryh2tDZ1WS5RKfgq+9ksNJ5Q9UtqtqHkO+E63N5OK9sbzpUUm\noNaOl3udTlZD3A8iqwMPVxH4SxgATBPAc+bmjk6BMJ0qIzDcVGTrqrzUiywCTLma\nszdk8GjzXtPDmuBgNn+o6s02qVGpyydgEuqmTQIDAQABAoIBACL6AvkjQVVLn8kJ\ndBYznJJ4M8ECo+YEgaFwgAHODT0zRQCCgzd+Vxl4YwHmKV2Lr+y2s0drZt8GvYva\nKOK8NYYZyi15IlwFyRXmvvykF1UBpSXluYFDH7KaVroWMgRreHcIys5LqVSIb6Bo\ngDmK0yBLPp8qR29s2b7ScZRtLaqGJiX+j55rNzrZwxHkxFHyG9OG+u9IsBElcKCP\nkYCVE8ZdYexfnKOZbgn2kZB9qu0T/Mdvki8yk3I2bI6xYO24oQmhnT36qnqWoCBX\nNuCNsBQgpYZeZET8mEAUmo9d+ABmIHIvSs005agK8xRaP4+6jYgy6WwoejJRF5yd\nNBuF7aECgYEA50nZ4FiZYV0vcJDxFYeY3kYOvVuKn8OyW+2rg7JIQTremIjv8FkE\nZnwuF9ZRxgqLxUIfKKfzp/5l5LrycNoj2YKfHKnRejxRWXqG+ZETfxxlmlRns0QG\nJ4+BYL0CoanDSeA4fuyn4Bv7cy/03TDhfg/Uq0Aeg+hhcPE/vx3ebPsCgYEAy/Pv\neDLssOSdeyIxf0Brtocg6aPXIVaLdus+bXmLg77rJIFytAZmTTW8SkkSczWtucI3\nFI1I6sei/8FdPzAl62/JDdlf7Wd9K7JIotY4TzT7Tm7QU7xpfLLYIP1bOFjN81rk\n77oOD4LsXcosB/U6s1blPJMZ6AlO2EKs10UuR1cCgYBipzuJ2ADEaOz9RLWwi0AH\nPza2Sj+c2epQD9ZivD7Zo/Sid3ZwvGeGF13JyR7kLEdmAkgsHUdu1rI7mAolXMaB\n1pdrsHureeLxGbRM6za3tzMXWv1Il7FQWoPC8ZwXvMOR1VQDv4nzq7vbbA8z8c+c\n57+8tALQHOTDOgQIzwK61QKBgERGVc0EJy4Uag+VY8J4m1ZQKBluqo7TfP6DQ7O8\nM5MX73maB/7yAX8pVO39RjrhJlYACRZNMbK+v/ckEQYdJSSKmGCVe0JrGYDuPtic\nI9+IGfSorf7KHPoMmMN6bPYQ7Gjh7a++tgRFTMEc8956Hnt4xGahy9NcglNtBpVN\n6G8jAoGBAMCh028pdzJa/xeBHLLaVB2sc0Fe7993WlsPmnVE779dAz7qMscOtXJK\nfgtriltLSSD6rTA9hUAsL/X62rY0wdXuNdijjBb/qvrx7CAV6i37NK1CjABNjsfG\nZM372Ac6zc1EqSrid2IjET1YqyIW2KGLI1R2xbQc98UGlt48OdWu\n-----END RSA PRIVATE KEY-----\n"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Use this endpoint to complete the handshake necessary when implementing the <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/creating-github-apps-from-a-manifest/\">GitHub App Manifest flow</a>. When you create a GitHub App with the manifest flow, you receive a temporary <code>code</code> used to retrieve the GitHub App's <code>id</code>, <code>pem</code> (private key), and <code>webhook_secret</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/app/installations",
        "title": "List installations for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "outdated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "The permissions the installation has are included under the `permissions` key.",
              "example": [
                {
                  "id": 1,
                  "account": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                  "repositories_url": "https://api.github.com/installation/repositories",
                  "html_url": "https://github.com/organizations/github/settings/installations/1",
                  "app_id": 1,
                  "target_id": 1,
                  "target_type": "Organization",
                  "permissions": {
                    "checks": "write",
                    "metadata": "read",
                    "contents": "read"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ],
                  "single_file_name": "config.yaml",
                  "has_multiple_single_files": true,
                  "single_file_paths": [
                    "config.yml",
                    ".github/issue_TEMPLATE.md"
                  ],
                  "repository_selection": "selected",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "app_slug": "github-actions",
                  "suspended_at": null,
                  "suspended_by": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>\n<p>The permissions the installation has are included under the <code>permissions</code> key.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>The permissions the installation has are included under the <code>permissions</code> key.</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/app/installations/{installation_id}",
        "title": "Get an installation for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "account": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                "repositories_url": "https://api.github.com/installation/repositories",
                "html_url": "https://github.com/organizations/github/settings/installations/1",
                "app_id": 1,
                "target_id": 1,
                "target_type": "Organization",
                "permissions": {
                  "checks": "write",
                  "metadata": "read",
                  "contents": "read"
                },
                "events": [
                  "push",
                  "pull_request"
                ],
                "single_file_name": "config.yaml",
                "has_multiple_single_files": true,
                "single_file_paths": [
                  "config.yml",
                  ".github/issue_TEMPLATE.md"
                ],
                "repository_selection": "selected",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "app_slug": "github-actions",
                "suspended_at": null,
                "suspended_by": null
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Enables an authenticated GitHub App to find an installation's information using the installation id.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/app/installations/{installation_id}",
        "title": "Delete an installation for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/apps/#suspend-an-app-installation\">Suspend an app installation</a>\" endpoint.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/app/installations/{installation_id}/access_tokens",
        "title": "Create an installation access token for an app",
        "category": "apps",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>List of repository names that the token should have access to</p>",
            "type": "array of strings",
            "items": {
              "type": "string",
              "examples": [
                "rails"
              ]
            },
            "name": "repositories",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of repository names that the token should have access to",
            "childParamsGroups": []
          },
          {
            "description": "<p>List of repository IDs that the token should have access to</p>",
            "type": "array of integers",
            "items": {
              "type": "integer"
            },
            "examples": [
              1
            ],
            "name": "repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List of repository IDs that the token should have access to",
            "childParamsGroups": []
          },
          {
            "title": "App Permissions",
            "type": "object",
            "description": "<p>The permissions granted to the user-to-server access token.</p>",
            "properties": {
              "actions": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "actions",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "administration": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "administration",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "checks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for checks on code. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "checks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "contents": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "contents",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "deployments": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for deployments and deployment statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "deployments",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "environments": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for managing repository environments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "environments",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "issues": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "issues",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "metadata": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "metadata",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "packages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "packages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "pages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "pages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "pull_requests": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "pull_requests",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "repository_hooks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "repository_hooks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "repository_projects": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                "enum": [
                  "read",
                  "write",
                  "admin"
                ],
                "name": "repository_projects",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                "childParamsGroups": []
              },
              "secret_scanning_alerts": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "secret_scanning_alerts",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "secrets": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage repository secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "secrets",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "security_events": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "security_events",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "single_file": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage just a single file. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "single_file",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "statuses": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for commit statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "statuses",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "vulnerability_alerts": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage Dependabot alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "vulnerability_alerts",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "workflows": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: <code>write</code>.</p>",
                "enum": [
                  "write"
                ],
                "name": "workflows",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                "childParamsGroups": []
              },
              "members": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for organization teams and members. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "members",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_administration": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage access to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_administration",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_hooks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_hooks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_plan": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for viewing an organization's plan. Can be one of: <code>read</code>.</p>",
                "enum": [
                  "read"
                ],
                "name": "organization_plan",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                "childParamsGroups": []
              },
              "organization_projects": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                "enum": [
                  "read",
                  "write",
                  "admin"
                ],
                "name": "organization_projects",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.",
                "childParamsGroups": []
              },
              "organization_packages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_packages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_secrets": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage organization secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_secrets",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_self_hosted_runners": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_self_hosted_runners",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_user_blocking": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_user_blocking",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "team_discussions": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage team discussions and related comments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "team_discussions",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "content_references": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "content_references",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              }
            },
            "example": {
              "contents": "read",
              "issues": "read",
              "deployments": "write",
              "single_file": "read"
            },
            "name": "permissions",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The permissions granted to the user-to-server access token.",
            "childParamsGroups": [
              {
                "parentName": "permissions",
                "parentType": "object",
                "id": "permissions-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "actions",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "administration",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for checks on code. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "checks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "contents",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for deployments and deployment statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "deployments",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for managing repository environments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "environments",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "issues",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "metadata",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "packages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "pages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "pull_requests",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "repository_hooks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ],
                    "name": "repository_projects",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "secret_scanning_alerts",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage repository secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "secrets",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "security_events",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage just a single file. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "single_file",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for commit statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "statuses",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage Dependabot alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "vulnerability_alerts",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: <code>write</code>.</p>",
                    "enum": [
                      "write"
                    ],
                    "name": "workflows",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for organization teams and members. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "members",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage access to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_administration",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_hooks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for viewing an organization's plan. Can be one of: <code>read</code>.</p>",
                    "enum": [
                      "read"
                    ],
                    "name": "organization_plan",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ],
                    "name": "organization_projects",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_packages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage organization secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_secrets",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_self_hosted_runners",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_user_blocking",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage team discussions and related comments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "team_discussions",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "content_references",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "respoitory": "Hello-World",
                "permissions": {
                  "issues": "write",
                  "contents": "read"
                }
              },
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "token": "ghs_16C7e42F292c6912E7710c838347Ae178B4a",
                "expires_at": "2016-07-11T22:14:10Z",
                "permissions": {
                  "issues": "write",
                  "contents": "read"
                },
                "repository_selection": "selected",
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of <code>401 - Unauthorized</code>, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the <code>repository_ids</code> when creating the token. When you omit <code>repository_ids</code>, the response does not contain the <code>repositories</code> key.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/app/installations/{installation_id}/suspended",
        "title": "Suspend an app installation",
        "category": "apps",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub Enterprise Server API or webhook events is blocked for that account.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/app/installations/{installation_id}/suspended",
        "title": "Unsuspend an app installation",
        "category": "apps",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a GitHub App installation suspension.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/apps/{app_slug}",
        "title": "Get an app",
        "category": "apps",
        "parameters": [
          {
            "name": "app_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "app_slug": "APP_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "slug": "octoapp",
                "node_id": "MDExOkludGVncmF0aW9uMQ==",
                "owner": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": true
                },
                "name": "Octocat App",
                "description": "",
                "external_url": "https://example.com",
                "html_url": "https://github.com/apps/octoapp",
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "permissions": {
                  "metadata": "read",
                  "contents": "read",
                  "issues": "write",
                  "single_file": "write"
                },
                "events": [
                  "push",
                  "pull_request"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note</strong>: The <code>:app_slug</code> is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., <code>https://github.com/settings/apps/:app_slug</code>).</p>\n<p>If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a <a href=\"https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line/\">personal access token</a> or an <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\">installation access token</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/installation",
        "title": "Get an organization installation for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "account": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/orgs/github",
                  "html_url": "https://github.com/github",
                  "followers_url": "https://api.github.com/users/github/followers",
                  "following_url": "https://api.github.com/users/github/following{/other_user}",
                  "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                  "organizations_url": "https://api.github.com/users/github/orgs",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "received_events_url": "https://api.github.com/users/github/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "repository_selection": "all",
                "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                "repositories_url": "https://api.github.com/installation/repositories",
                "html_url": "https://github.com/organizations/github/settings/installations/1",
                "app_id": 1,
                "target_id": 1,
                "target_type": "Organization",
                "permissions": {
                  "checks": "write",
                  "metadata": "read",
                  "contents": "read"
                },
                "events": [
                  "push",
                  "pull_request"
                ],
                "created_at": "2018-02-09T20:51:14Z",
                "updated_at": "2018-02-09T20:51:14Z",
                "single_file_name": "config.yml",
                "has_multiple_single_files": true,
                "single_file_paths": [
                  "config.yml",
                  ".github/issue_TEMPLATE.md"
                ],
                "app_slug": "github-actions",
                "suspended_at": null,
                "suspended_by": null
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Enables an authenticated GitHub App to find the organization's installation information.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/installation",
        "title": "Get a repository installation for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "account": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/orgs/github",
                  "html_url": "https://github.com/github",
                  "followers_url": "https://api.github.com/users/github/followers",
                  "following_url": "https://api.github.com/users/github/following{/other_user}",
                  "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                  "organizations_url": "https://api.github.com/users/github/orgs",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "received_events_url": "https://api.github.com/users/github/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "repository_selection": "all",
                "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                "repositories_url": "https://api.github.com/installation/repositories",
                "html_url": "https://github.com/organizations/github/settings/installations/1",
                "app_id": 1,
                "target_id": 1,
                "target_type": "Organization",
                "permissions": {
                  "checks": "write",
                  "metadata": "read",
                  "contents": "read"
                },
                "events": [
                  "push",
                  "pull_request"
                ],
                "created_at": "2018-02-09T20:51:14Z",
                "updated_at": "2018-02-09T20:51:14Z",
                "single_file_name": "config.yml",
                "has_multiple_single_files": true,
                "single_file_paths": [
                  "config.yml",
                  ".github/issue_TEMPLATE.md"
                ],
                "app_slug": "github-actions",
                "suspended_at": null,
                "suspended_by": null
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "apps"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/installation",
        "title": "Get a user installation for the authenticated app",
        "category": "apps",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "account": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/orgs/github",
                  "html_url": "https://github.com/github",
                  "followers_url": "https://api.github.com/users/github/followers",
                  "following_url": "https://api.github.com/users/github/following{/other_user}",
                  "gists_url": "https://api.github.com/users/github/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/github/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/github/subscriptions",
                  "organizations_url": "https://api.github.com/users/github/orgs",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "received_events_url": "https://api.github.com/users/github/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "repository_selection": "all",
                "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                "repositories_url": "https://api.github.com/installation/repositories",
                "html_url": "https://github.com/organizations/github/settings/installations/1",
                "app_id": 1,
                "target_id": 1,
                "target_type": "Organization",
                "permissions": {
                  "checks": "write",
                  "metadata": "read",
                  "contents": "read"
                },
                "events": [
                  "push",
                  "pull_request"
                ],
                "created_at": "2018-02-09T20:51:14Z",
                "updated_at": "2018-02-09T20:51:14Z",
                "single_file_name": "config.yml",
                "has_multiple_single_files": true,
                "single_file_paths": [
                  "config.yml",
                  ".github/issue_TEMPLATE.md"
                ],
                "app_slug": "github-actions",
                "suspended_at": null,
                "suspended_by": null
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Enables an authenticated GitHub App to find the user’s installation information.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "apps"
      }
    ],
    "installations": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/installation/repositories",
        "title": "List repositories accessible to the app installation",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "<p>List repositories that an app installation can access.</p>\n<p>You must use an <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\">installation access token</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/installation/token",
        "title": "Revoke an installation access token",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Revokes the installation token you're using to authenticate as an installation and access this endpoint.</p>\n<p>Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/apps#create-an-installation-access-token-for-an-app\">Create an installation access token for an app</a>\" endpoint.</p>\n<p>You must use an <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\">installation access token</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments",
        "title": "Create a content attachment",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The owner of the repository. Determined from the <code>repository</code> <code>full_name</code> of the <code>content_reference</code> event.</p>"
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The name of the repository. Determined from the <code>repository</code> <code>full_name</code> of the <code>content_reference</code> event.</p>"
          },
          {
            "name": "content_reference_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The <code>id</code> of the <code>content_reference</code> event.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The title of the attachment</p>",
            "type": "string",
            "maxLength": 1024,
            "examples": [
              "Title of the attachment"
            ],
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The title of the attachment",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. The body of the attachment</p>",
            "type": "string",
            "maxLength": 262144,
            "examples": [
              "Body of the attachment"
            ],
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The body of the attachment",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "content_reference_id": "CONTENT_REFERENCE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 101,
                "title": "[A-1234] Error found in core/models.py file'",
                "body": "You have used an email that already exists for the user_email_uniq field.\n ## DETAILS:\n\nThe (email)=(Octocat@github.com) already exists.\n\n The error was found in core/models.py in get_or_create_user at line 62.\n\n self.save()"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the <code>id</code> and <code>repository</code> <code>full_name</code> of the content reference from the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#content_reference\"><code>content_reference</code> event</a> to create an attachment.</p>\n<p>The app must create a content attachment within six hours of the content reference URL being posted. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/apps/using-content-attachments/\">Using content attachments</a>\" for details about content attachments.</p>\n<p>You must use an <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation\">installation access token</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>To access the Content Attachments API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.corsair-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/installations",
        "title": "List app installations accessible to the user access token",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "You can find the permissions for the installation under the `permissions` key.",
              "example": {
                "total_count": 2,
                "installations": [
                  {
                    "id": 1,
                    "account": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                    "repositories_url": "https://api.github.com/installation/repositories",
                    "html_url": "https://github.com/organizations/github/settings/installations/1",
                    "app_id": 1,
                    "target_id": 1,
                    "target_type": "Organization",
                    "permissions": {
                      "checks": "write",
                      "metadata": "read",
                      "contents": "read"
                    },
                    "events": [
                      "push",
                      "pull_request"
                    ],
                    "single_file_name": "config.yaml",
                    "has_multiple_single_files": true,
                    "single_file_paths": [
                      "config.yml",
                      ".github/issue_TEMPLATE.md"
                    ],
                    "repository_selection": "all",
                    "created_at": "2017-07-08T16:18:44-04:00",
                    "updated_at": "2017-07-08T16:18:44-04:00",
                    "app_slug": "github-actions",
                    "suspended_at": null,
                    "suspended_by": null
                  },
                  {
                    "id": 3,
                    "account": {
                      "login": "octocat",
                      "id": 2,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
                    "repositories_url": "https://api.github.com/installation/repositories",
                    "html_url": "https://github.com/organizations/github/settings/installations/1",
                    "app_id": 1,
                    "target_id": 1,
                    "target_type": "Organization",
                    "permissions": {
                      "checks": "write",
                      "metadata": "read",
                      "contents": "read"
                    },
                    "events": [
                      "push",
                      "pull_request"
                    ],
                    "single_file_name": "config.yaml",
                    "has_multiple_single_files": true,
                    "single_file_paths": [
                      "config.yml",
                      ".github/issue_TEMPLATE.md"
                    ],
                    "repository_selection": "all",
                    "created_at": "2017-07-08T16:18:44-04:00",
                    "updated_at": "2017-07-08T16:18:44-04:00",
                    "app_slug": "github-actions",
                    "suspended_at": null,
                    "suspended_by": null
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists installations of your GitHub App that the authenticated user has explicit permission (<code>:read</code>, <code>:write</code>, or <code>:admin</code>) to access.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site\">user-to-server OAuth access token</a>, created for a user who has authorized your GitHub App, to access this endpoint.</p>\n<p>The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.</p>\n<p>You can find the permissions for the installation under the <code>permissions</code> key.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>You can find the permissions for the installation under the <code>permissions</code> key.</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/installations/{installation_id}/repositories",
        "title": "List repositories accessible to the user access token",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "The access the user has to each repository is included in the hash under the `permissions` key.",
              "example": {
                "total_count": 1,
                "repositories": [
                  {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "<p>List repositories that the authenticated user has explicit permission (<code>:read</code>, <code>:write</code>, or <code>:admin</code>) to access for an installation.</p>\n<p>The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site\">user-to-server OAuth access token</a>, created for a user who has authorized your GitHub App, to access this endpoint.</p>\n<p>The access the user has to each repository is included in the hash under the <code>permissions</code> key.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>The access the user has to each repository is included in the hash under the <code>permissions</code> key.</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/user/installations/{installation_id}/repositories/{repository_id}",
        "title": "Add a repository to an app installation",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1,
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Add a single repository to an installation. The authenticated user must have admin access to the repository.</p>\n<p>You must use a personal access token (which you can create via the <a href=\"https://docs.github.com/enterprise-server@3.1/github/authenticating-to-github/creating-a-personal-access-token\">command line</a> or <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a>) to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/installations/{installation_id}/repositories/{repository_id}",
        "title": "Remove a repository from an app installation",
        "category": "apps",
        "subcategory": "installations",
        "parameters": [
          {
            "name": "installation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "examples": {
              "default": {
                "value": 1
              }
            },
            "descriptionHTML": "<p>installation_id parameter</p>"
          },
          {
            "name": "repository_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "installation_id": 1,
                "repository_id": "REPOSITORY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Remove a single repository from an installation. The authenticated user must have admin access to the repository.</p>\n<p>You must use a personal access token (which you can create via the <a href=\"https://docs.github.com/enterprise-server@3.1/github/authenticating-to-github/creating-a-personal-access-token\">command line</a> or <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a>) to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "oauth-applications": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/applications/{client_id}/grant",
        "title": "Delete an app authorization",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The OAuth access token used to authenticate to the GitHub API.</p>",
            "name": "access_token",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth access token used to authenticate to the GitHub API.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              },
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. You must also provide a valid OAuth <code>access_token</code> as an input parameter and the grant for the token's owner will be deleted.\nDeleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on <a href=\"https://github.com/settings/applications#authorized\">the application authorizations settings screen within GitHub</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/applications/{client_id}/grants/{access_token}",
        "title": "Revoke a grant for an application",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          },
          {
            "name": "access_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "access_token": "ACCESS_TOKEN"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue OAuth endpoints that contain <code>access_token</code> in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving <code>access_token</code> to the request body. For more information, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/\">blog post</a>.</p>\n<p>OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. You must also provide a valid token as <code>:access_token</code> and the grant for the token's owner will be deleted.</p>\n<p>Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on <a href=\"https://github.com/settings/applications#authorized\">the Applications settings page under \"Authorized OAuth Apps\" on GitHub Enterprise Server</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/applications/{client_id}/token",
        "title": "Check a token",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The access_token of the OAuth application.</p>",
            "type": "string",
            "name": "access_token",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The access_token of the OAuth application.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              },
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo",
                  "user"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678",
                "expires_at": "2011-09-08T17:26:27Z",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> to use this endpoint, where the username is the OAuth application <code>client_id</code> and the password is its <code>client_secret</code>. Invalid tokens will return <code>404 NOT FOUND</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/applications/{client_id}/token",
        "title": "Reset a token",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The access_token of the OAuth application.</p>",
            "type": "string",
            "name": "access_token",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The access_token of the OAuth application.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              },
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo",
                  "user"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678",
                "expires_at": "2011-09-08T17:26:27Z",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. Invalid tokens will return <code>404 NOT FOUND</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/applications/{client_id}/token",
        "title": "Delete an app token",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The OAuth access token used to authenticate to the GitHub API.</p>",
            "name": "access_token",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth access token used to authenticate to the GitHub API.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a"
              },
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>OAuth application owners can revoke a single token for an OAuth application. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/applications/{client_id}/token/scoped",
        "title": "Create a scoped access token",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The OAuth access token used to authenticate to the GitHub API.</p>",
            "examples": [
              "e72e16c7e42f292c6912e7710c838347ae178b4a"
            ],
            "name": "access_token",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth access token used to authenticate to the GitHub API.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The name of the user or organization to scope the user-to-server access token to. <strong>Required</strong> unless <code>target_id</code> is specified.</p>",
            "type": "string",
            "examples": [
              "octocat"
            ],
            "name": "target",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The ID of the user or organization to scope the user-to-server access token to. <strong>Required</strong> unless <code>target</code> is specified.</p>",
            "type": "integer",
            "examples": [
              1
            ],
            "name": "target_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The list of repository names to scope the user-to-server access token to. <code>repositories</code> may not be specified if <code>repository_ids</code> is specified.</p>",
            "type": "array of strings",
            "items": {
              "type": "string",
              "examples": [
                "rails"
              ]
            },
            "name": "repositories",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The list of repository IDs to scope the user-to-server access token to. <code>repository_ids</code> may not be specified if <code>repositories</code> is specified.</p>",
            "type": "array of integers",
            "items": {
              "type": "integer"
            },
            "examples": [
              1
            ],
            "name": "repository_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.",
            "childParamsGroups": []
          },
          {
            "title": "App Permissions",
            "type": "object",
            "description": "<p>The permissions granted to the user-to-server access token.</p>",
            "properties": {
              "actions": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "actions",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "administration": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "administration",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "checks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for checks on code. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "checks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "contents": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "contents",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "deployments": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for deployments and deployment statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "deployments",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "environments": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for managing repository environments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "environments",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "issues": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "issues",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "metadata": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "metadata",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "packages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "packages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "pages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "pages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "pull_requests": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "pull_requests",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "repository_hooks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "repository_hooks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "repository_projects": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                "enum": [
                  "read",
                  "write",
                  "admin"
                ],
                "name": "repository_projects",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                "childParamsGroups": []
              },
              "secret_scanning_alerts": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "secret_scanning_alerts",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "secrets": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage repository secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "secrets",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "security_events": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "security_events",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "single_file": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage just a single file. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "single_file",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "statuses": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for commit statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "statuses",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "vulnerability_alerts": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage Dependabot alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "vulnerability_alerts",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "workflows": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: <code>write</code>.</p>",
                "enum": [
                  "write"
                ],
                "name": "workflows",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                "childParamsGroups": []
              },
              "members": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for organization teams and members. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "members",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_administration": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage access to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_administration",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_hooks": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_hooks",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_plan": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for viewing an organization's plan. Can be one of: <code>read</code>.</p>",
                "enum": [
                  "read"
                ],
                "name": "organization_plan",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                "childParamsGroups": []
              },
              "organization_projects": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                "enum": [
                  "read",
                  "write",
                  "admin"
                ],
                "name": "organization_projects",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.",
                "childParamsGroups": []
              },
              "organization_packages": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_packages",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_secrets": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage organization secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_secrets",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_self_hosted_runners": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_self_hosted_runners",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "organization_user_blocking": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "organization_user_blocking",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "team_discussions": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token to manage team discussions and related comments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "team_discussions",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              },
              "content_references": {
                "type": "string",
                "description": "<p>The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                "enum": [
                  "read",
                  "write"
                ],
                "name": "content_references",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                "childParamsGroups": []
              }
            },
            "example": {
              "contents": "read",
              "issues": "read",
              "deployments": "write",
              "single_file": "read"
            },
            "name": "permissions",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The permissions granted to the user-to-server access token.",
            "childParamsGroups": [
              {
                "parentName": "permissions",
                "parentType": "object",
                "id": "permissions-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "actions",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "administration",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for checks on code. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "checks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "contents",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for deployments and deployment statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "deployments",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for managing repository environments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "environments",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "issues",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "metadata",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "packages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "pages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "pull_requests",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "repository_hooks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ],
                    "name": "repository_projects",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "secret_scanning_alerts",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage repository secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "secrets",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "security_events",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage just a single file. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "single_file",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for commit statuses. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "statuses",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage Dependabot alerts. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "vulnerability_alerts",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage Dependabot alerts. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: <code>write</code>.</p>",
                    "enum": [
                      "write"
                    ],
                    "name": "workflows",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for organization teams and members. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "members",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage access to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_administration",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_hooks",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for viewing an organization's plan. Can be one of: <code>read</code>.</p>",
                    "enum": [
                      "read"
                    ],
                    "name": "organization_plan",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: <code>read</code>, <code>write</code>, or <code>admin</code>.</p>",
                    "enum": [
                      "read",
                      "write",
                      "admin"
                    ],
                    "name": "organization_projects",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage organization projects and projects beta (where available). Can be one of: `read`, `write`, or `admin`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_packages",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage organization secrets. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_secrets",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_self_hosted_runners",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "organization_user_blocking",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token to manage team discussions and related comments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "team_discussions",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: <code>read</code> or <code>write</code>.</p>",
                    "enum": [
                      "read",
                      "write"
                    ],
                    "name": "content_references",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "access_token": "e72e16c7e42f292c6912e7710c838347ae178b4a",
                "target": "octocat",
                "permissions": {
                  "metadata": "read",
                  "issues": "write",
                  "contents": "read"
                }
              },
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678",
                "expires_at": "2011-09-08T17:26:27Z",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "installation": {
                  "permissions": {
                    "metadata": "read",
                    "issues": "write",
                    "contents": "read"
                  },
                  "repository_selection": "selected",
                  "single_file_name": ".github/workflow.yml",
                  "repositories_url": "https://api.github.com/user/repos",
                  "account": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "has_multiple_single_files": false,
                  "single_file_paths": []
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. Invalid tokens will return <code>404 NOT FOUND</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/applications/{client_id}/tokens/{access_token}",
        "title": "Check an authorization",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          },
          {
            "name": "access_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "access_token": "ACCESS_TOKEN"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo",
                  "user"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678",
                "expires_at": "2011-09-08T17:26:27Z",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue OAuth endpoints that contain <code>access_token</code> in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving <code>access_token</code> to the request body. For more information, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/\">blog post</a>.</p>\n<p>OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. Invalid tokens will return <code>404 NOT FOUND</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/applications/{client_id}/tokens/{access_token}",
        "title": "Reset an authorization",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          },
          {
            "name": "access_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "access_token": "ACCESS_TOKEN"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo",
                  "user"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678",
                "expires_at": "2011-09-08T17:26:27Z",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue OAuth endpoints that contain <code>access_token</code> in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving <code>access_token</code> to the request body. For more information, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/\">blog post</a>.</p>\n<p>OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the \"token\" property in the response because changes take effect immediately. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password. Invalid tokens will return <code>404 NOT FOUND</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/applications/{client_id}/tokens/{access_token}",
        "title": "Revoke an authorization for an application",
        "category": "apps",
        "subcategory": "oauth-applications",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          },
          {
            "name": "access_token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "access_token": "ACCESS_TOKEN"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue OAuth endpoints that contain <code>access_token</code> in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving <code>access_token</code> to the request body. For more information, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/\">blog post</a>.</p>\n<p>OAuth application owners can revoke a single token for an OAuth application. You must use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a> when accessing this endpoint, using the OAuth application's <code>client_id</code> and <code>client_secret</code> as the username and password.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "webhooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/app/hook/config",
        "title": "Get a webhook configuration for an app",
        "category": "apps",
        "subcategory": "webhooks",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"<a href=\"/developers/apps/creating-a-github-app\">Creating a GitHub App</a>.\"</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/app/hook/config",
        "title": "Update a webhook configuration for an app",
        "category": "apps",
        "subcategory": "webhooks",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The URL to which the payloads will be delivered.</p>",
            "format": "uri",
            "examples": [
              "https://example.com/webhook"
            ],
            "name": "url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The URL to which the payloads will be delivered.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
            "examples": [
              "\"json\""
            ],
            "name": "content_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
            "examples": [
              "\"********\""
            ],
            "name": "secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "string",
                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                "examples": [
                  "\"0\""
                ]
              },
              {
                "type": "number"
              }
            ],
            "name": "insecure_ssl",
            "in": "body",
            "type": "string or number or ",
            "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see \"<a href=\"/developers/apps/creating-a-github-app\">Creating a GitHub App</a>.\"</p>\n<p>You must use a <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app\">JWT</a> to access this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ]
  },
  "branches": {
    "branches": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches",
        "title": "List branches",
        "category": "branches",
        "subcategory": "branches",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "protected",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": "<p>Setting to <code>true</code> returns only protected branches. When set to <code>false</code>, only unprotected branches are returned. Omitting this parameter returns all branches.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "name": "master",
                  "commit": {
                    "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
                  },
                  "protected": true,
                  "protection": {
                    "required_status_checks": {
                      "enforcement_level": "non_admins",
                      "contexts": [
                        "ci-test",
                        "linter"
                      ]
                    }
                  },
                  "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}",
        "title": "Get a branch",
        "category": "branches",
        "subcategory": "branches",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/rename",
        "title": "Rename a branch",
        "category": "branches",
        "subcategory": "branches",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The new name of the branch.</p>",
            "name": "new_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new name of the branch.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "new_name": "my_renamed_branch"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "name": "master",
                "commit": {
                  "sha": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "node_id": "MDY6Q29tbWl0N2ZkMWE2MGIwMWY5MWIzMTRmNTk5NTVhNGU0ZDRlODBkOGVkZjExZA==",
                  "commit": {
                    "author": {
                      "name": "The Octocat",
                      "date": "2012-03-06T15:06:50-08:00",
                      "email": "octocat@nowhere.com"
                    },
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                    "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                    "tree": {
                      "sha": "b4eecafa9be2f2006ce1b709d6857b07069b4608",
                      "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/b4eecafa9be2f2006ce1b709d6857b07069b4608"
                    },
                    "committer": {
                      "name": "The Octocat",
                      "date": "2012-03-06T15:06:50-08:00",
                      "email": "octocat@nowhere.com"
                    },
                    "verification": {
                      "verified": false,
                      "reason": "unsigned",
                      "signature": null,
                      "payload": null
                    },
                    "comment_count": 0
                  },
                  "author": {
                    "gravatar_id": "",
                    "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
                    "url": "https://api.github.com/users/octocat",
                    "id": 583231,
                    "login": "octocat",
                    "node_id": "MDQ6VXNlcjE=",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "parents": [
                    {
                      "sha": "553c2077f0edc3d5dc5d17262f6aa498e69d6f8e",
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/553c2077f0edc3d5dc5d17262f6aa498e69d6f8e"
                    },
                    {
                      "sha": "762941318ee16e59dabbacb1b4049eec22f0d303",
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/762941318ee16e59dabbacb1b4049eec22f0d303"
                    }
                  ],
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "committer": {
                    "gravatar_id": "",
                    "avatar_url": "https://secure.gravatar.com/avatar/7ad39074b0584bc555d0417ae3e7d974?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-140.png",
                    "url": "https://api.github.com/users/octocat",
                    "id": 583231,
                    "login": "octocat",
                    "node_id": "MDQ6VXNlcjE=",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
                },
                "_links": {
                  "html": "https://github.com/octocat/Hello-World/tree/master",
                  "self": "https://api.github.com/repos/octocat/Hello-World/branches/master"
                },
                "protected": true,
                "protection": {
                  "required_status_checks": {
                    "enforcement_level": "non_admins",
                    "contexts": [
                      "ci-test",
                      "linter"
                    ]
                  }
                },
                "protection_url": "https://api.github.com/repos/octocat/hello-world/branches/master/protection"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Renames a branch in a repository.</p>\n<p><strong>Note:</strong> Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/github/administering-a-repository/renaming-a-branch\">Renaming a branch</a>\".</p>\n<p>The permissions required to use this endpoint depends on whether you are renaming the default branch.</p>\n<p>To rename a non-default branch:</p>\n<ul>\n<li>Users must have push access.</li>\n<li>GitHub Apps must have the <code>contents:write</code> repository permission.</li>\n</ul>\n<p>To rename the default branch:</p>\n<ul>\n<li>Users must have admin or owner permissions.</li>\n<li>GitHub Apps must have the <code>administration:write</code> repository permission.</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/merges",
        "title": "Merge a branch",
        "category": "branches",
        "subcategory": "branches",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the base branch that the head will be merged into.</p>",
            "name": "base",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the base branch that the head will be merged into.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The head to merge. This can be a branch name or a commit SHA1.</p>",
            "name": "head",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The head to merge. This can be a branch name or a commit SHA1.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Commit message to use for the merge commit. If omitted, a default message will be used.</p>",
            "name": "commit_message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Commit message to use for the merge commit. If omitted, a default message will be used.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "base": "master",
                "head": "cool_feature",
                "commit_message": "Shipped cool_feature!"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Successful Response (The resulting merge commit)",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                "commit": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "author": {
                    "name": "Monalisa Octocat",
                    "email": "mona@github.com",
                    "date": "2011-04-14T16:00:49Z"
                  },
                  "committer": {
                    "name": "Monalisa Octocat",
                    "email": "mona@github.com",
                    "date": "2011-04-14T16:00:49Z"
                  },
                  "message": "Fix all the bugs",
                  "tree": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  },
                  "comment_count": 0,
                  "verification": {
                    "verified": false,
                    "reason": "unsigned",
                    "signature": null,
                    "payload": null
                  }
                },
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "committer": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "parents": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                ],
                "stats": {
                  "additions": 104,
                  "deletions": 4,
                  "total": 108
                },
                "files": [
                  {
                    "filename": "file1.txt",
                    "additions": 10,
                    "deletions": 2,
                    "changes": 12,
                    "status": "modified",
                    "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
                    "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
                    "patch": "@@ -29,7 +29,7 @@\n....."
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Successful Response (The resulting merge commit)</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response when already merged</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found when the base or head does not exist</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict when there is a merge conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "branch-protection": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "title": "Get branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection",
                "required_status_checks": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
                  "contexts": [
                    "continuous-integration/travis-ci"
                  ],
                  "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts",
                  "enforcement_level": "non_admins"
                },
                "enforce_admins": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
                  "enabled": true
                },
                "required_pull_request_reviews": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
                  "dismissal_restrictions": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
                    "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
                    "users": [
                      {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      }
                    ],
                    "teams": [
                      {
                        "id": 1,
                        "node_id": "MDQ6VGVhbTE=",
                        "url": "https://api.github.com/teams/1",
                        "html_url": "https://github.com/orgs/github/teams/justice-league",
                        "name": "Justice League",
                        "slug": "justice-league",
                        "description": "A great team.",
                        "privacy": "closed",
                        "permission": "admin",
                        "members_url": "https://api.github.com/teams/1/members{/member}",
                        "repositories_url": "https://api.github.com/teams/1/repos",
                        "parent": null
                      }
                    ]
                  },
                  "dismiss_stale_reviews": true,
                  "require_code_owner_reviews": true,
                  "required_approving_review_count": 2
                },
                "restrictions": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
                  "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
                  "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
                  "users": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "teams": [
                    {
                      "id": 1,
                      "node_id": "MDQ6VGVhbTE=",
                      "url": "https://api.github.com/teams/1",
                      "html_url": "https://github.com/orgs/github/teams/justice-league",
                      "name": "Justice League",
                      "slug": "justice-league",
                      "description": "A great team.",
                      "privacy": "closed",
                      "permission": "admin",
                      "members_url": "https://api.github.com/teams/1/members{/member}",
                      "repositories_url": "https://api.github.com/teams/1/repos",
                      "parent": null
                    }
                  ],
                  "apps": [
                    {
                      "id": 1,
                      "slug": "octoapp",
                      "node_id": "MDExOkludGVncmF0aW9uMQ==",
                      "owner": {
                        "login": "github",
                        "id": 1,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "url": "https://api.github.com/orgs/github",
                        "repos_url": "https://api.github.com/orgs/github/repos",
                        "events_url": "https://api.github.com/orgs/github/events",
                        "hooks_url": "https://api.github.com/orgs/github/hooks",
                        "issues_url": "https://api.github.com/orgs/github/issues",
                        "members_url": "https://api.github.com/orgs/github/members{/member}",
                        "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "description": "A great organization"
                      },
                      "name": "Octocat App",
                      "description": "",
                      "external_url": "https://example.com",
                      "html_url": "https://github.com/apps/octoapp",
                      "created_at": "2017-07-08T16:18:44-04:00",
                      "updated_at": "2017-07-08T16:18:44-04:00",
                      "permissions": {
                        "metadata": "read",
                        "contents": "read",
                        "issues": "write",
                        "single_file": "write"
                      },
                      "events": [
                        "push",
                        "pull_request"
                      ]
                    }
                  ]
                },
                "required_linear_history": {
                  "enabled": true
                },
                "allow_force_pushes": {
                  "enabled": true
                },
                "allow_deletions": {
                  "enabled": true
                },
                "required_conversation_resolution": {
                  "enabled": true
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.luke-cage-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "title": "Update branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "object or null",
            "description": "<p><strong>Required</strong>. Require status checks to pass before merging. Set to <code>null</code> to disable.</p>",
            "properties": {
              "strict": {
                "type": "boolean",
                "description": "<p><strong>Required</strong>. Require branches to be up to date before merging.</p>",
                "name": "strict",
                "in": "body",
                "rawType": "boolean",
                "rawDescription": "Require branches to be up to date before merging.",
                "childParamsGroups": []
              },
              "contexts": {
                "type": "array of strings",
                "deprecated": true,
                "description": "<p><strong>Required</strong>. <strong>Deprecated</strong>: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use <code>checks</code> instead of <code>contexts</code> for more fine-grained control.</p>",
                "items": {
                  "type": "string"
                },
                "name": "contexts",
                "in": "body",
                "rawType": "array",
                "rawDescription": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n",
                "childParamsGroups": []
              },
              "checks": {
                "type": "array of objects",
                "description": "<p>The list of status checks to require in order to merge into this branch.</p>",
                "items": {
                  "type": "object",
                  "required": [
                    "context"
                  ],
                  "properties": {
                    "context": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The name of the required check</p>",
                      "name": "context",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The name of the required check",
                      "childParamsGroups": []
                    },
                    "app_id": {
                      "type": "integer",
                      "description": "<p>The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.</p>",
                      "name": "app_id",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
                      "childParamsGroups": []
                    }
                  }
                },
                "name": "checks",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of status checks to require in order to merge into this branch.",
                "childParamsGroups": [
                  {
                    "parentName": "checks",
                    "parentType": "items",
                    "id": "checks-items",
                    "params": [
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The name of the required check</p>",
                        "name": "context",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The name of the required check",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p>The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.</p>",
                        "name": "app_id",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              }
            },
            "required": [
              "strict",
              "contexts"
            ],
            "name": "required_status_checks",
            "in": "body",
            "rawType": [
              "object",
              "null"
            ],
            "rawDescription": "Require status checks to pass before merging. Set to `null` to disable.",
            "childParamsGroups": [
              {
                "parentName": "required_status_checks",
                "parentType": "object",
                "id": "required_status_checks-object",
                "params": [
                  {
                    "type": "boolean",
                    "description": "<p><strong>Required</strong>. Require branches to be up to date before merging.</p>",
                    "name": "strict",
                    "in": "body",
                    "rawType": "boolean",
                    "rawDescription": "Require branches to be up to date before merging.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of strings",
                    "deprecated": true,
                    "description": "<p><strong>Required</strong>. <strong>Deprecated</strong>: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use <code>checks</code> instead of <code>contexts</code> for more fine-grained control.</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "contexts",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "**Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.\n",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of objects",
                    "description": "<p>The list of status checks to require in order to merge into this branch.</p>",
                    "items": {
                      "type": "object",
                      "required": [
                        "context"
                      ],
                      "properties": {
                        "context": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The name of the required check</p>",
                          "name": "context",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The name of the required check",
                          "childParamsGroups": []
                        },
                        "app_id": {
                          "type": "integer",
                          "description": "<p>The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.</p>",
                          "name": "app_id",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
                          "childParamsGroups": []
                        }
                      }
                    },
                    "name": "checks",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of status checks to require in order to merge into this branch.",
                    "childParamsGroups": [
                      {
                        "parentName": "checks",
                        "parentType": "items",
                        "id": "checks-items",
                        "params": [
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The name of the required check</p>",
                            "name": "context",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The name of the required check",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p>The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.</p>",
                            "name": "app_id",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parentName": "checks",
                "parentType": "items",
                "id": "checks-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The name of the required check</p>",
                    "name": "context",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the required check",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.</p>",
                    "name": "app_id",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "boolean or null",
            "description": "<p><strong>Required</strong>. Enforce all configured restrictions for administrators. Set to <code>true</code> to enforce required status checks for repository administrators. Set to <code>null</code> to disable.</p>",
            "name": "enforce_admins",
            "in": "body",
            "rawType": [
              "boolean",
              "null"
            ],
            "rawDescription": "Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.",
            "childParamsGroups": []
          },
          {
            "type": "object or null",
            "description": "<p><strong>Required</strong>. Require at least one approving review on a pull request, before merging. Set to <code>null</code> to disable.</p>",
            "properties": {
              "dismissal_restrictions": {
                "type": "object",
                "description": "<p>Specify which users and teams can dismiss pull request reviews. Pass an empty <code>dismissal_restrictions</code> object to disable. User and team <code>dismissal_restrictions</code> are only available for organization-owned repositories. Omit this parameter for personal repositories.</p>",
                "properties": {
                  "users": {
                    "type": "array of strings",
                    "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "users",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of user `login`s with dismissal access",
                    "childParamsGroups": []
                  },
                  "teams": {
                    "type": "array of strings",
                    "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "teams",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of team `slug`s with dismissal access",
                    "childParamsGroups": []
                  }
                },
                "name": "dismissal_restrictions",
                "in": "body",
                "rawType": "object",
                "rawDescription": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                "childParamsGroups": [
                  {
                    "parentName": "dismissal_restrictions",
                    "parentType": "object",
                    "id": "dismissal_restrictions-object",
                    "params": [
                      {
                        "type": "array of strings",
                        "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                        "items": {
                          "type": "string"
                        },
                        "name": "users",
                        "in": "body",
                        "rawType": "array",
                        "rawDescription": "The list of user `login`s with dismissal access",
                        "childParamsGroups": []
                      },
                      {
                        "type": "array of strings",
                        "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                        "items": {
                          "type": "string"
                        },
                        "name": "teams",
                        "in": "body",
                        "rawType": "array",
                        "rawDescription": "The list of team `slug`s with dismissal access",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              },
              "dismiss_stale_reviews": {
                "type": "boolean",
                "description": "<p>Set to <code>true</code> if you want to automatically dismiss approving reviews when someone pushes a new commit.</p>",
                "name": "dismiss_stale_reviews",
                "in": "body",
                "rawType": "boolean",
                "rawDescription": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
                "childParamsGroups": []
              },
              "require_code_owner_reviews": {
                "type": "boolean",
                "description": "<p>Blocks merging pull requests until <a href=\"https://docs.github.com/articles/about-code-owners/\">code owners</a> review them.</p>",
                "name": "require_code_owner_reviews",
                "in": "body",
                "rawType": "boolean",
                "rawDescription": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.",
                "childParamsGroups": []
              },
              "required_approving_review_count": {
                "type": "integer",
                "description": "<p>Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.</p>",
                "name": "required_approving_review_count",
                "in": "body",
                "rawType": "integer",
                "rawDescription": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
                "childParamsGroups": []
              }
            },
            "name": "required_pull_request_reviews",
            "in": "body",
            "rawType": [
              "object",
              "null"
            ],
            "rawDescription": "Require at least one approving review on a pull request, before merging. Set to `null` to disable.",
            "childParamsGroups": [
              {
                "parentName": "required_pull_request_reviews",
                "parentType": "object",
                "id": "required_pull_request_reviews-object",
                "params": [
                  {
                    "type": "object",
                    "description": "<p>Specify which users and teams can dismiss pull request reviews. Pass an empty <code>dismissal_restrictions</code> object to disable. User and team <code>dismissal_restrictions</code> are only available for organization-owned repositories. Omit this parameter for personal repositories.</p>",
                    "properties": {
                      "users": {
                        "type": "array of strings",
                        "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                        "items": {
                          "type": "string"
                        },
                        "name": "users",
                        "in": "body",
                        "rawType": "array",
                        "rawDescription": "The list of user `login`s with dismissal access",
                        "childParamsGroups": []
                      },
                      "teams": {
                        "type": "array of strings",
                        "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                        "items": {
                          "type": "string"
                        },
                        "name": "teams",
                        "in": "body",
                        "rawType": "array",
                        "rawDescription": "The list of team `slug`s with dismissal access",
                        "childParamsGroups": []
                      }
                    },
                    "name": "dismissal_restrictions",
                    "in": "body",
                    "rawType": "object",
                    "rawDescription": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
                    "childParamsGroups": [
                      {
                        "parentName": "dismissal_restrictions",
                        "parentType": "object",
                        "id": "dismissal_restrictions-object",
                        "params": [
                          {
                            "type": "array of strings",
                            "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                            "items": {
                              "type": "string"
                            },
                            "name": "users",
                            "in": "body",
                            "rawType": "array",
                            "rawDescription": "The list of user `login`s with dismissal access",
                            "childParamsGroups": []
                          },
                          {
                            "type": "array of strings",
                            "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                            "items": {
                              "type": "string"
                            },
                            "name": "teams",
                            "in": "body",
                            "rawType": "array",
                            "rawDescription": "The list of team `slug`s with dismissal access",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "boolean",
                    "description": "<p>Set to <code>true</code> if you want to automatically dismiss approving reviews when someone pushes a new commit.</p>",
                    "name": "dismiss_stale_reviews",
                    "in": "body",
                    "rawType": "boolean",
                    "rawDescription": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "boolean",
                    "description": "<p>Blocks merging pull requests until <a href=\"https://docs.github.com/articles/about-code-owners/\">code owners</a> review them.</p>",
                    "name": "require_code_owner_reviews",
                    "in": "body",
                    "rawType": "boolean",
                    "rawDescription": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.</p>",
                    "name": "required_approving_review_count",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
                    "childParamsGroups": []
                  }
                ]
              },
              {
                "parentName": "dismissal_restrictions",
                "parentType": "object",
                "id": "dismissal_restrictions-object",
                "params": [
                  {
                    "type": "array of strings",
                    "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "users",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of user `login`s with dismissal access",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of strings",
                    "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "teams",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of team `slug`s with dismissal access",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "object or null",
            "description": "<p><strong>Required</strong>. Restrict who can push to the protected branch. User, app, and team <code>restrictions</code> are only available for organization-owned repositories. Set to <code>null</code> to disable.</p>",
            "properties": {
              "users": {
                "type": "array of strings",
                "description": "<p><strong>Required</strong>. The list of user <code>login</code>s with push access</p>",
                "items": {
                  "type": "string"
                },
                "name": "users",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of user `login`s with push access",
                "childParamsGroups": []
              },
              "teams": {
                "type": "array of strings",
                "description": "<p><strong>Required</strong>. The list of team <code>slug</code>s with push access</p>",
                "items": {
                  "type": "string"
                },
                "name": "teams",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of team `slug`s with push access",
                "childParamsGroups": []
              },
              "apps": {
                "type": "array of strings",
                "description": "<p>The list of app <code>slug</code>s with push access</p>",
                "items": {
                  "type": "string"
                },
                "name": "apps",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of app `slug`s with push access",
                "childParamsGroups": []
              }
            },
            "required": [
              "users",
              "teams"
            ],
            "name": "restrictions",
            "in": "body",
            "rawType": [
              "object",
              "null"
            ],
            "rawDescription": "Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.",
            "childParamsGroups": [
              {
                "parentName": "restrictions",
                "parentType": "object",
                "id": "restrictions-object",
                "params": [
                  {
                    "type": "array of strings",
                    "description": "<p><strong>Required</strong>. The list of user <code>login</code>s with push access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "users",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of user `login`s with push access",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of strings",
                    "description": "<p><strong>Required</strong>. The list of team <code>slug</code>s with push access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "teams",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of team `slug`s with push access",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of strings",
                    "description": "<p>The list of app <code>slug</code>s with push access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "apps",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of app `slug`s with push access",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "boolean",
            "description": "<p>Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to <code>true</code> to enforce a linear commit history. Set to <code>false</code> to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: <code>false</code>. For more information, see \"<a href=\"https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history\">Requiring a linear commit history</a>\" in the GitHub Help documentation.</p>",
            "name": "required_linear_history",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see \"[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "boolean or null",
            "description": "<p>Permits force pushes to the protected branch by anyone with write access to the repository. Set to <code>true</code> to allow force pushes. Set to <code>false</code> or <code>null</code> to block force pushes. Default: <code>false</code>. For more information, see \"<a href=\"https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch\">Enabling force pushes to a protected branch</a>\" in the GitHub Help documentation.\"</p>",
            "name": "allow_force_pushes",
            "in": "body",
            "rawType": [
              "boolean",
              "null"
            ],
            "rawDescription": "Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.\"",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Allows deletion of the protected branch by anyone with write access to the repository. Set to <code>false</code> to prevent deletion of the protected branch. Default: <code>false</code>. For more information, see \"<a href=\"https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch\">Enabling force pushes to a protected branch</a>\" in the GitHub Help documentation.</p>",
            "name": "allow_deletions",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see \"[Enabling force pushes to a protected branch](https://docs.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Blocks creation of new branches which match the branch protection pattern. Set to <code>true</code> to prohibit new branch creation. Default: <code>false</code>.</p>",
            "name": "block_creations",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Blocks creation of new branches which match the branch protection pattern. Set to `true` to prohibit new branch creation. Default: `false`.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to <code>false</code> to disable. Default: <code>false</code>.</p>",
            "name": "required_conversation_resolution",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>The list of status checks to require in order to merge into this branch.</p>",
            "items": {
              "type": "string"
            },
            "name": "contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The list of status checks to require in order to merge into this branch.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "required_status_checks": {
                  "strict": true,
                  "contexts": [
                    "continuous-integration/travis-ci"
                  ]
                },
                "enforce_admins": true,
                "required_pull_request_reviews": {
                  "dismissal_restrictions": {
                    "users": [
                      "octocat"
                    ],
                    "teams": [
                      "justice-league"
                    ]
                  },
                  "dismiss_stale_reviews": true,
                  "require_code_owner_reviews": true,
                  "required_approving_review_count": 2,
                  "bypass_pull_request_allowances": {
                    "users": [
                      "octocat"
                    ],
                    "teams": [
                      "justice-league"
                    ]
                  }
                },
                "restrictions": {
                  "users": [
                    "octocat"
                  ],
                  "teams": [
                    "justice-league"
                  ],
                  "apps": [
                    "super-ci"
                  ]
                },
                "required_linear_history": true,
                "allow_force_pushes": true,
                "allow_deletions": true,
                "block_creations": true,
                "required_conversation_resolution": true
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Protecting a branch requires admin or owner permissions to the repository.</p>\n<p><strong>Note</strong>: Passing new arrays of <code>users</code> and <code>teams</code> replaces their previous values.</p>\n<p><strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.luke-cage-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection",
        "title": "Delete branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "title": "Get admin branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
                "enabled": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "title": "Set admin branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins",
                "enabled": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
        "title": "Delete admin branch protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "title": "Get pull request review protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
                "dismissal_restrictions": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
                  "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
                  "users": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "teams": [
                    {
                      "id": 1,
                      "node_id": "MDQ6VGVhbTE=",
                      "url": "https://api.github.com/teams/1",
                      "html_url": "https://github.com/orgs/github/teams/justice-league",
                      "name": "Justice League",
                      "slug": "justice-league",
                      "description": "A great team.",
                      "privacy": "closed",
                      "permission": "admin",
                      "members_url": "https://api.github.com/teams/1/members{/member}",
                      "repositories_url": "https://api.github.com/teams/1/repos",
                      "parent": null
                    }
                  ]
                },
                "dismiss_stale_reviews": true,
                "require_code_owner_reviews": true,
                "required_approving_review_count": 2
              }
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.luke-cage-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "title": "Update pull request review protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "object",
            "description": "<p>Specify which users and teams can dismiss pull request reviews. Pass an empty <code>dismissal_restrictions</code> object to disable. User and team <code>dismissal_restrictions</code> are only available for organization-owned repositories. Omit this parameter for personal repositories.</p>",
            "properties": {
              "users": {
                "type": "array of strings",
                "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                "items": {
                  "type": "string"
                },
                "name": "users",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of user `login`s with dismissal access",
                "childParamsGroups": []
              },
              "teams": {
                "type": "array of strings",
                "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                "items": {
                  "type": "string"
                },
                "name": "teams",
                "in": "body",
                "rawType": "array",
                "rawDescription": "The list of team `slug`s with dismissal access",
                "childParamsGroups": []
              }
            },
            "name": "dismissal_restrictions",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.",
            "childParamsGroups": [
              {
                "parentName": "dismissal_restrictions",
                "parentType": "object",
                "id": "dismissal_restrictions-object",
                "params": [
                  {
                    "type": "array of strings",
                    "description": "<p>The list of user <code>login</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "users",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of user `login`s with dismissal access",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of strings",
                    "description": "<p>The list of team <code>slug</code>s with dismissal access</p>",
                    "items": {
                      "type": "string"
                    },
                    "name": "teams",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "The list of team `slug`s with dismissal access",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "boolean",
            "description": "<p>Set to <code>true</code> if you want to automatically dismiss approving reviews when someone pushes a new commit.</p>",
            "name": "dismiss_stale_reviews",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Blocks merging pull requests until <a href=\"https://docs.github.com/articles/about-code-owners/\">code owners</a> have reviewed.</p>",
            "name": "require_code_owner_reviews",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p>Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.</p>",
            "name": "required_approving_review_count",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "dismissal_restrictions": {
                  "users": [
                    "octocat"
                  ],
                  "teams": [
                    "justice-league"
                  ]
                },
                "bypass_pull_request_allowances": {
                  "users": [
                    "octocat"
                  ],
                  "teams": [
                    "justice-league"
                  ]
                },
                "dismiss_stale_reviews": true,
                "require_code_owner_reviews": true,
                "required_approving_review_count": 2
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_pull_request_reviews",
                "dismissal_restrictions": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions",
                  "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/users",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions/teams",
                  "users": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "teams": [
                    {
                      "id": 1,
                      "node_id": "MDQ6VGVhbTE=",
                      "url": "https://api.github.com/teams/1",
                      "html_url": "https://github.com/orgs/github/teams/justice-league",
                      "name": "Justice League",
                      "slug": "justice-league",
                      "description": "A great team.",
                      "privacy": "closed",
                      "permission": "admin",
                      "members_url": "https://api.github.com/teams/1/members{/member}",
                      "repositories_url": "https://api.github.com/teams/1/repos",
                      "parent": null
                    }
                  ]
                },
                "dismiss_stale_reviews": true,
                "require_code_owner_reviews": true,
                "required_approving_review_count": 2
              }
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.</p>\n<p><strong>Note</strong>: Passing new arrays of <code>users</code> and <code>teams</code> replaces their previous values.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Protected Branches API now has a setting for requiring a specified number of approving pull request reviews before merging. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-03-16-protected-branches-required-approving-reviews\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.luke-cage-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
        "title": "Delete pull request review protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "title": "Get commit signature protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures",
                "enabled": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of <code>true</code> indicates you must sign commits on this branch. For more information, see <a href=\"https://docs.github.com/articles/signing-commits-with-gpg\">Signing commits with GPG</a> in GitHub Help.</p>\n<p><strong>Note</strong>: You must enable branch protection to require signed commits.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.zzzax-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "title": "Create commit signature protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures",
                "enabled": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.zzzax-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
        "title": "Delete commit signature protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>Protected Branches API can now manage a setting for requiring signed commits. This feature is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2018-02-22-protected-branches-required-signatures\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.zzzax-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "title": "Get status checks protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
                "strict": true,
                "contexts": [
                  "continuous-integration/travis-ci"
                ],
                "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "title": "Update status check protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "boolean",
            "description": "<p>Require branches to be up to date before merging.</p>",
            "name": "strict",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Require branches to be up to date before merging.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "deprecated": true,
            "description": "<p>The list of status checks to require in order to merge into this branch</p>",
            "items": {
              "type": "string"
            },
            "name": "contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The list of status checks to require in order to merge into this branch",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "strict": true,
                "contexts": [
                  "continuous-integration/travis-ci"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks",
                "strict": true,
                "contexts": [
                  "continuous-integration/travis-ci"
                ],
                "contexts_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
        "title": "Remove status check protection",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "title": "Get all status check contexts",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                "continuous-integration/travis-ci"
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "title": "Add status check contexts",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. contexts parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "contexts parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                "continuous-integration/travis-ci",
                "continuous-integration/jenkins"
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "title": "Set status check contexts",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. contexts parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "contexts parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                "continuous-integration/travis-ci"
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
        "title": "Remove status check contexts",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. contexts parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "contexts parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                "continuous-integration/travis-ci"
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "title": "Get access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions",
                "users_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/users",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
                "apps_url": "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/restrictions/teams",
                "users": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos",
                    "parent": null
                  }
                ],
                "apps": [
                  {
                    "id": 1,
                    "slug": "octoapp",
                    "node_id": "MDExOkludGVncmF0aW9uMQ==",
                    "owner": {
                      "login": "github",
                      "id": 1,
                      "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                      "url": "https://api.github.com/orgs/github",
                      "repos_url": "https://api.github.com/orgs/github/repos",
                      "events_url": "https://api.github.com/orgs/github/events",
                      "hooks_url": "https://api.github.com/orgs/github/hooks",
                      "issues_url": "https://api.github.com/orgs/github/issues",
                      "members_url": "https://api.github.com/orgs/github/members{/member}",
                      "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "description": "A great organization"
                    },
                    "name": "Octocat App",
                    "description": "",
                    "external_url": "https://example.com",
                    "html_url": "https://github.com/apps/octoapp",
                    "created_at": "2017-07-08T16:18:44-04:00",
                    "updated_at": "2017-07-08T16:18:44-04:00",
                    "permissions": {
                      "metadata": "read",
                      "contents": "read",
                      "issues": "write",
                      "single_file": "write"
                    },
                    "events": [
                      "push",
                      "pull_request"
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Lists who has access to this protected branch.</p>\n<p><strong>Note</strong>: Users, apps, and teams <code>restrictions</code> are only available for organization-owned repositories.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
        "title": "Delete access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Disables the ability to restrict who can push to this branch.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "title": "Get apps with access to the protected branch",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with <code>write</code> access to the <code>contents</code> permission can be added as authorized actors on a protected branch.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "title": "Add app access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. apps parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "apps",
            "in": "body",
            "rawType": "array",
            "rawDescription": "apps parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Grants the specified apps push access for this branch. Only installed GitHub Apps with <code>write</code> access to the <code>contents</code> permission can be added as authorized actors on a protected branch.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>The GitHub Apps that have push access to this branch. Use the app's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "title": "Set app access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. apps parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "apps",
            "in": "body",
            "rawType": "array",
            "rawDescription": "apps parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with <code>write</code> access to the <code>contents</code> permission can be added as authorized actors on a protected branch.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>The GitHub Apps that have push access to this branch. Use the app's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
        "title": "Remove app access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. apps parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "apps",
            "in": "body",
            "rawType": "array",
            "rawDescription": "apps parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Removes the ability of an app to push to this branch. Only installed GitHub Apps with <code>write</code> access to the <code>contents</code> permission can be added as authorized actors on a protected branch.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>The GitHub Apps that have push access to this branch. Use the app's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "title": "Get teams with access to the protected branch",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Lists the teams who have push access to this branch. The list includes child teams.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "title": "Add team access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. teams parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "teams",
            "in": "body",
            "rawType": "array",
            "rawDescription": "teams parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Grants the specified teams push access for this branch. You can also give push access to child teams.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>The teams that can have push access. Use the team's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "title": "Set team access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. teams parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "teams",
            "in": "body",
            "rawType": "array",
            "rawDescription": "teams parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>The teams that can have push access. Use the team's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
        "title": "Remove team access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. teams parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "teams",
            "in": "body",
            "rawType": "array",
            "rawDescription": "teams parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Removes the ability of a team to push to this branch. You can also remove push access for child teams.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>Teams that should no longer have push access. Use the team's <code>slug</code>. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "title": "Get users with access to the protected branch",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Lists the people who have push access to this branch.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "title": "Add user access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. users parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "users",
            "in": "body",
            "rawType": "array",
            "rawDescription": "users parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Grants the specified people push access for this branch.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>Usernames for people who can have push access. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "title": "Set user access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. users parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "users",
            "in": "body",
            "rawType": "array",
            "rawDescription": "users parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>Usernames for people who can have push access. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
        "title": "Remove user access restrictions",
        "category": "branches",
        "subcategory": "branch-protection",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The name of the branch.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. users parameter</p>",
            "items": {
              "type": "string"
            },
            "name": "users",
            "in": "body",
            "rawType": "array",
            "rawDescription": "users parameter",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "branch": "BRANCH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Removes the ability of a user to push to this branch.</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>array</code></td><td>Usernames of the people who should no longer have push access. <strong>Note</strong>: The list of users, apps, and teams in total is limited to 100 items.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ]
  },
  "checks": {
    "runs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/check-runs",
        "title": "Create a check run",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the check. For example, \"code-coverage\".</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the check. For example, \"code-coverage\".",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The SHA of the commit.</p>",
            "name": "head_sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the commit.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.</p>",
            "name": "details_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A reference for the run on the integrator's system.</p>",
            "name": "external_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A reference for the run on the integrator's system.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The current status. Can be one of <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ],
            "default": "queued",
            "name": "status",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>The time that the check run began. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "started_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required if you provide <code>completed_at</code> or a <code>status</code> of <code>completed</code></strong>. The final conclusion of the check. Can be one of <code>action_required</code>, <code>cancelled</code>, <code>failure</code>, <code>neutral</code>, <code>success</code>, <code>skipped</code>, <code>stale</code>, or <code>timed_out</code>. When the conclusion is <code>action_required</code>, additional details should be provided on the site specified by <code>details_url</code>.<br>\n<strong>Note:</strong> Providing <code>conclusion</code> will automatically set the <code>status</code> parameter to <code>completed</code>. You cannot change a check run conclusion to <code>stale</code>, only GitHub can set this.</p>",
            "enum": [
              "action_required",
              "cancelled",
              "failure",
              "neutral",
              "success",
              "skipped",
              "stale",
              "timed_out"
            ],
            "name": "conclusion",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>The time the check completed. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "completed_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>Check runs can accept a variety of data in the <code>output</code> object, including a <code>title</code> and <code>summary</code> and can optionally provide descriptive details about the run. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object\"><code>output</code> object</a> description.</p>",
            "properties": {
              "title": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The title of the check run.</p>",
                "name": "title",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The title of the check run.",
                "childParamsGroups": []
              },
              "summary": {
                "type": "string",
                "maxLength": 65535,
                "description": "<p><strong>Required</strong>. The summary of the check run. This parameter supports Markdown.</p>",
                "name": "summary",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The summary of the check run. This parameter supports Markdown.",
                "childParamsGroups": []
              },
              "text": {
                "type": "string",
                "maxLength": 65535,
                "description": "<p>The details of the check run. This parameter supports Markdown.</p>",
                "name": "text",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The details of the check run. This parameter supports Markdown.",
                "childParamsGroups": []
              },
              "annotations": {
                "type": "array of objects",
                "description": "<p>Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the <strong>Checks</strong> and <strong>Files changed</strong> tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run\">Update a check run</a> endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"<a href=\"https://docs.github.com/articles/about-status-checks#checks\">About status checks</a>\". See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object\"><code>annotations</code> object</a> description for details about how to use this parameter.</p>",
                "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                      "name": "path",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                      "childParamsGroups": []
                    },
                    "start_line": {
                      "type": "integer",
                      "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                      "name": "start_line",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The start line of the annotation.",
                      "childParamsGroups": []
                    },
                    "end_line": {
                      "type": "integer",
                      "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                      "name": "end_line",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The end line of the annotation.",
                      "childParamsGroups": []
                    },
                    "start_column": {
                      "type": "integer",
                      "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                      "name": "start_column",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                      "childParamsGroups": []
                    },
                    "end_column": {
                      "type": "integer",
                      "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                      "name": "end_column",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                      "childParamsGroups": []
                    },
                    "annotation_level": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                      "enum": [
                        "notice",
                        "warning",
                        "failure"
                      ],
                      "name": "annotation_level",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                      "childParamsGroups": []
                    },
                    "message": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                      "name": "message",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                      "childParamsGroups": []
                    },
                    "title": {
                      "type": "string",
                      "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                      "name": "title",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                      "childParamsGroups": []
                    },
                    "raw_details": {
                      "type": "string",
                      "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                      "name": "raw_details",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                      "childParamsGroups": []
                    }
                  },
                  "required": [
                    "path",
                    "start_line",
                    "end_line",
                    "annotation_level",
                    "message"
                  ]
                },
                "name": "annotations",
                "in": "body",
                "rawType": "array",
                "rawDescription": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object) description for details about how to use this parameter.",
                "childParamsGroups": [
                  {
                    "parentName": "annotations",
                    "parentType": "items",
                    "id": "annotations-items",
                    "params": [
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                        "name": "path",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                        "name": "start_line",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The start line of the annotation.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                        "name": "end_line",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The end line of the annotation.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                        "name": "start_column",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                        "name": "end_column",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                        "enum": [
                          "notice",
                          "warning",
                          "failure"
                        ],
                        "name": "annotation_level",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                        "name": "message",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                        "name": "title",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                        "name": "raw_details",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              },
              "images": {
                "type": "array of objects",
                "description": "<p>Adds images to the output displayed in the GitHub pull request UI. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#images-object\"><code>images</code> object</a> description for details.</p>",
                "items": {
                  "type": "object",
                  "properties": {
                    "alt": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                      "name": "alt",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The alternative text for the image.",
                      "childParamsGroups": []
                    },
                    "image_url": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                      "name": "image_url",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The full URL of the image.",
                      "childParamsGroups": []
                    },
                    "caption": {
                      "type": "string",
                      "description": "<p>A short image description.</p>",
                      "name": "caption",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "A short image description.",
                      "childParamsGroups": []
                    }
                  },
                  "required": [
                    "alt",
                    "image_url"
                  ]
                },
                "name": "images",
                "in": "body",
                "rawType": "array",
                "rawDescription": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#images-object) description for details.",
                "childParamsGroups": [
                  {
                    "parentName": "images",
                    "parentType": "items",
                    "id": "images-items",
                    "params": [
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                        "name": "alt",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The alternative text for the image.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                        "name": "image_url",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The full URL of the image.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>A short image description.</p>",
                        "name": "caption",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "A short image description.",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              }
            },
            "required": [
              "title",
              "summary"
            ],
            "name": "output",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object) description.",
            "childParamsGroups": [
              {
                "parentName": "output",
                "parentType": "object",
                "id": "output-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The title of the check run.</p>",
                    "name": "title",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The title of the check run.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 65535,
                    "description": "<p><strong>Required</strong>. The summary of the check run. This parameter supports Markdown.</p>",
                    "name": "summary",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The summary of the check run. This parameter supports Markdown.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 65535,
                    "description": "<p>The details of the check run. This parameter supports Markdown.</p>",
                    "name": "text",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The details of the check run. This parameter supports Markdown.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of objects",
                    "description": "<p>Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the <strong>Checks</strong> and <strong>Files changed</strong> tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run\">Update a check run</a> endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"<a href=\"https://docs.github.com/articles/about-status-checks#checks\">About status checks</a>\". See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object\"><code>annotations</code> object</a> description for details about how to use this parameter.</p>",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                          "name": "path",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                          "childParamsGroups": []
                        },
                        "start_line": {
                          "type": "integer",
                          "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                          "name": "start_line",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The start line of the annotation.",
                          "childParamsGroups": []
                        },
                        "end_line": {
                          "type": "integer",
                          "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                          "name": "end_line",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The end line of the annotation.",
                          "childParamsGroups": []
                        },
                        "start_column": {
                          "type": "integer",
                          "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                          "name": "start_column",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                          "childParamsGroups": []
                        },
                        "end_column": {
                          "type": "integer",
                          "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                          "name": "end_column",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                          "childParamsGroups": []
                        },
                        "annotation_level": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                          "enum": [
                            "notice",
                            "warning",
                            "failure"
                          ],
                          "name": "annotation_level",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                          "childParamsGroups": []
                        },
                        "message": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                          "name": "message",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                          "childParamsGroups": []
                        },
                        "title": {
                          "type": "string",
                          "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                          "name": "title",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                          "childParamsGroups": []
                        },
                        "raw_details": {
                          "type": "string",
                          "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                          "name": "raw_details",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                          "childParamsGroups": []
                        }
                      },
                      "required": [
                        "path",
                        "start_line",
                        "end_line",
                        "annotation_level",
                        "message"
                      ]
                    },
                    "name": "annotations",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object) description for details about how to use this parameter.",
                    "childParamsGroups": [
                      {
                        "parentName": "annotations",
                        "parentType": "items",
                        "id": "annotations-items",
                        "params": [
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                            "name": "path",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                            "name": "start_line",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The start line of the annotation.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                            "name": "end_line",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The end line of the annotation.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                            "name": "start_column",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                            "name": "end_column",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                            "enum": [
                              "notice",
                              "warning",
                              "failure"
                            ],
                            "name": "annotation_level",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                            "name": "message",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                            "name": "title",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                            "name": "raw_details",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "array of objects",
                    "description": "<p>Adds images to the output displayed in the GitHub pull request UI. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#images-object\"><code>images</code> object</a> description for details.</p>",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alt": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                          "name": "alt",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The alternative text for the image.",
                          "childParamsGroups": []
                        },
                        "image_url": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                          "name": "image_url",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The full URL of the image.",
                          "childParamsGroups": []
                        },
                        "caption": {
                          "type": "string",
                          "description": "<p>A short image description.</p>",
                          "name": "caption",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "A short image description.",
                          "childParamsGroups": []
                        }
                      },
                      "required": [
                        "alt",
                        "image_url"
                      ]
                    },
                    "name": "images",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#images-object) description for details.",
                    "childParamsGroups": [
                      {
                        "parentName": "images",
                        "parentType": "items",
                        "id": "images-items",
                        "params": [
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                            "name": "alt",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The alternative text for the image.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                            "name": "image_url",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The full URL of the image.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>A short image description.</p>",
                            "name": "caption",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "A short image description.",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parentName": "annotations",
                "parentType": "items",
                "id": "annotations-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                    "name": "path",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                    "name": "start_line",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The start line of the annotation.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                    "name": "end_line",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The end line of the annotation.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                    "name": "start_column",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                    "name": "end_column",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                    "enum": [
                      "notice",
                      "warning",
                      "failure"
                    ],
                    "name": "annotation_level",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                    "name": "message",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                    "name": "title",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                    "name": "raw_details",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                    "childParamsGroups": []
                  }
                ]
              },
              {
                "parentName": "images",
                "parentType": "items",
                "id": "images-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                    "name": "alt",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The alternative text for the image.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                    "name": "image_url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The full URL of the image.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>A short image description.</p>",
                    "name": "caption",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short image description.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of objects",
            "description": "<p>Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#check_run\"><code>check_run.requested_action</code> webhook</a> to your app. Each action includes a <code>label</code>, <code>identifier</code> and <code>description</code>. A maximum of three actions are accepted. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object\"><code>actions</code> object</a> description. To learn more about check runs and requested actions, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions\">Check runs and requested actions</a>.\"</p>",
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "<p><strong>Required</strong>. The text to be displayed on a button in the web UI. The maximum size is 20 characters.</p>",
                  "name": "label",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                  "childParamsGroups": []
                },
                "description": {
                  "type": "string",
                  "maxLength": 40,
                  "description": "<p><strong>Required</strong>. A short explanation of what this action would do. The maximum size is 40 characters.</p>",
                  "name": "description",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "A short explanation of what this action would do. The maximum size is 40 characters.",
                  "childParamsGroups": []
                },
                "identifier": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "<p><strong>Required</strong>. A reference for the action on the integrator's system. The maximum size is 20 characters.</p>",
                  "name": "identifier",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                  "childParamsGroups": []
                }
              },
              "required": [
                "label",
                "description",
                "identifier"
              ]
            },
            "name": "actions",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions).\"",
            "childParamsGroups": [
              {
                "parentName": "actions",
                "parentType": "items",
                "id": "actions-items",
                "params": [
                  {
                    "type": "string",
                    "maxLength": 20,
                    "description": "<p><strong>Required</strong>. The text to be displayed on a button in the web UI. The maximum size is 20 characters.</p>",
                    "name": "label",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 40,
                    "description": "<p><strong>Required</strong>. A short explanation of what this action would do. The maximum size is 40 characters.</p>",
                    "name": "description",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short explanation of what this action would do. The maximum size is 40 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 20,
                    "description": "<p><strong>Required</strong>. A reference for the action on the integrator's system. The maximum size is 20 characters.</p>",
                    "name": "identifier",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "example-of-in-progress-conclusion",
            "request": {
              "contentType": "application/json",
              "description": "Example of an in_progress conclusion",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "mighty_readme",
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "status": "in_progress",
                "external_id": "42",
                "started_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "",
                  "text": ""
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response for in_progress conclusion",
              "example": {
                "id": 4,
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "node_id": "MDg6Q2hlY2tSdW40",
                "external_id": "42",
                "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                "html_url": "https://github.com/github/hello-world/runs/4",
                "details_url": "https://example.com",
                "status": "in_progress",
                "conclusion": null,
                "started_at": "2018-05-04T01:14:52Z",
                "completed_at": null,
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations_count": 2,
                  "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                },
                "name": "mighty_readme",
                "check_suite": {
                  "id": 5
                },
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "pull_requests": [
                  {
                    "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                    "id": 1934,
                    "number": 3956,
                    "head": {
                      "ref": "say-hello",
                      "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    },
                    "base": {
                      "ref": "master",
                      "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "key": "example-of-completed-conclusion",
            "request": {
              "contentType": "application/json",
              "description": "Example of a completed conclusion",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "mighty_readme",
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "status": "completed",
                "started_at": "2017-11-30T19:39:10Z",
                "conclusion": "success",
                "completed_at": "2017-11-30T19:49:10Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations": [
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'banaas'.",
                      "raw_details": "Do you mean 'bananas' or 'banana'?",
                      "start_line": 2,
                      "end_line": 2
                    },
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'aples'",
                      "raw_details": "Do you mean 'apples' or 'Naples'",
                      "start_line": 4,
                      "end_line": 4
                    }
                  ],
                  "images": [
                    {
                      "alt": "Super bananas",
                      "image_url": "http://example.com/images/42"
                    }
                  ]
                },
                "actions": [
                  {
                    "label": "Fix",
                    "identifier": "fix_errors",
                    "description": "Allow us to fix these errors for you"
                  }
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response for completed conclusion",
              "example": {
                "id": 4,
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "node_id": "MDg6Q2hlY2tSdW40",
                "external_id": "42",
                "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                "html_url": "https://github.com/github/hello-world/runs/4",
                "details_url": "https://example.com",
                "status": "completed",
                "conclusion": "neutral",
                "started_at": "2018-05-04T01:14:52Z",
                "completed_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations_count": 2,
                  "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                },
                "name": "mighty_readme",
                "check_suite": {
                  "id": 5
                },
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "pull_requests": [
                  {
                    "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                    "id": 1934,
                    "number": 3956,
                    "head": {
                      "ref": "say-hello",
                      "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    },
                    "base": {
                      "ref": "master",
                      "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array.</p>\n<p>Creates a new check run for a specific commit in a repository. Your GitHub App must have the <code>checks:write</code> permission to create check runs.</p>\n<p>In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "title": "Get a check run",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_run_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_run_id": "CHECK_RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 4,
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "node_id": "MDg6Q2hlY2tSdW40",
                "external_id": "",
                "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                "html_url": "https://github.com/github/hello-world/runs/4",
                "details_url": "https://example.com",
                "status": "completed",
                "conclusion": "neutral",
                "started_at": "2018-05-04T01:14:52Z",
                "completed_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations_count": 2,
                  "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                },
                "name": "mighty_readme",
                "check_suite": {
                  "id": 5
                },
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "pull_requests": [
                  {
                    "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                    "id": 1934,
                    "number": 3956,
                    "head": {
                      "ref": "say-hello",
                      "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    },
                    "base": {
                      "ref": "master",
                      "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array.</p>\n<p>Gets a single check run using its <code>id</code>. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the <code>repo</code> scope to get check runs in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/check-runs/{check_run_id}",
        "title": "Update a check run",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_run_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The name of the check. For example, \"code-coverage\".</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the check. For example, \"code-coverage\".",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The URL of the integrator's site that has the full details of the check.</p>",
            "name": "details_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The URL of the integrator's site that has the full details of the check.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A reference for the run on the integrator's system.</p>",
            "name": "external_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A reference for the run on the integrator's system.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "started_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The current status. Can be one of <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>",
            "enum": [
              "queued",
              "in_progress",
              "completed"
            ],
            "name": "status",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The current status. Can be one of `queued`, `in_progress`, or `completed`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required if you provide <code>completed_at</code> or a <code>status</code> of <code>completed</code></strong>. The final conclusion of the check. Can be one of <code>action_required</code>, <code>cancelled</code>, <code>failure</code>, <code>neutral</code>, <code>success</code>, <code>skipped</code>, <code>stale</code>, or <code>timed_out</code>.<br>\n<strong>Note:</strong> Providing <code>conclusion</code> will automatically set the <code>status</code> parameter to <code>completed</code>. You cannot change a check run conclusion to <code>stale</code>, only GitHub can set this.</p>",
            "enum": [
              "action_required",
              "cancelled",
              "failure",
              "neutral",
              "success",
              "skipped",
              "stale",
              "timed_out"
            ],
            "name": "conclusion",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.  \n**Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>The time the check completed. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "completed_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>Check runs can accept a variety of data in the <code>output</code> object, including a <code>title</code> and <code>summary</code> and can optionally provide descriptive details about the run. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object-1\"><code>output</code> object</a> description.</p>",
            "properties": {
              "title": {
                "type": "string",
                "description": "<p><strong>Required</strong>.</p>",
                "name": "title",
                "in": "body",
                "rawType": "string",
                "rawDescription": "**Required**.",
                "childParamsGroups": []
              },
              "summary": {
                "type": "string",
                "description": "<p><strong>Required</strong>. Can contain Markdown.</p>",
                "maxLength": 65535,
                "name": "summary",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Can contain Markdown.",
                "childParamsGroups": []
              },
              "text": {
                "type": "string",
                "description": "<p>Can contain Markdown.</p>",
                "maxLength": 65535,
                "name": "text",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Can contain Markdown.",
                "childParamsGroups": []
              },
              "annotations": {
                "type": "array of objects",
                "description": "<p>Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run\">Update a check run</a> endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"<a href=\"https://docs.github.com/articles/about-status-checks#checks\">About status checks</a>\". See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1\"><code>annotations</code> object</a> description for details.</p>",
                "maxItems": 50,
                "items": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                      "name": "path",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                      "childParamsGroups": []
                    },
                    "start_line": {
                      "type": "integer",
                      "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                      "name": "start_line",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The start line of the annotation.",
                      "childParamsGroups": []
                    },
                    "end_line": {
                      "type": "integer",
                      "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                      "name": "end_line",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The end line of the annotation.",
                      "childParamsGroups": []
                    },
                    "start_column": {
                      "type": "integer",
                      "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                      "name": "start_column",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                      "childParamsGroups": []
                    },
                    "end_column": {
                      "type": "integer",
                      "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                      "name": "end_column",
                      "in": "body",
                      "rawType": "integer",
                      "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                      "childParamsGroups": []
                    },
                    "annotation_level": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                      "enum": [
                        "notice",
                        "warning",
                        "failure"
                      ],
                      "name": "annotation_level",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                      "childParamsGroups": []
                    },
                    "message": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                      "name": "message",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                      "childParamsGroups": []
                    },
                    "title": {
                      "type": "string",
                      "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                      "name": "title",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                      "childParamsGroups": []
                    },
                    "raw_details": {
                      "type": "string",
                      "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                      "name": "raw_details",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                      "childParamsGroups": []
                    }
                  },
                  "required": [
                    "path",
                    "start_line",
                    "end_line",
                    "annotation_level",
                    "message"
                  ]
                },
                "name": "annotations",
                "in": "body",
                "rawType": "array",
                "rawDescription": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details.",
                "childParamsGroups": [
                  {
                    "parentName": "annotations",
                    "parentType": "items",
                    "id": "annotations-items",
                    "params": [
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                        "name": "path",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                        "name": "start_line",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The start line of the annotation.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                        "name": "end_line",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The end line of the annotation.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                        "name": "start_column",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "integer",
                        "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                        "name": "end_column",
                        "in": "body",
                        "rawType": "integer",
                        "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                        "enum": [
                          "notice",
                          "warning",
                          "failure"
                        ],
                        "name": "annotation_level",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                        "name": "message",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                        "name": "title",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                        "name": "raw_details",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              },
              "images": {
                "type": "array of objects",
                "description": "<p>Adds images to the output displayed in the GitHub pull request UI. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1\"><code>images</code> object</a> description for details.</p>",
                "items": {
                  "type": "object",
                  "properties": {
                    "alt": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                      "name": "alt",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The alternative text for the image.",
                      "childParamsGroups": []
                    },
                    "image_url": {
                      "type": "string",
                      "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                      "name": "image_url",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "The full URL of the image.",
                      "childParamsGroups": []
                    },
                    "caption": {
                      "type": "string",
                      "description": "<p>A short image description.</p>",
                      "name": "caption",
                      "in": "body",
                      "rawType": "string",
                      "rawDescription": "A short image description.",
                      "childParamsGroups": []
                    }
                  },
                  "required": [
                    "alt",
                    "image_url"
                  ]
                },
                "name": "images",
                "in": "body",
                "rawType": "array",
                "rawDescription": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details.",
                "childParamsGroups": [
                  {
                    "parentName": "images",
                    "parentType": "items",
                    "id": "images-items",
                    "params": [
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                        "name": "alt",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The alternative text for the image.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                        "name": "image_url",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "The full URL of the image.",
                        "childParamsGroups": []
                      },
                      {
                        "type": "string",
                        "description": "<p>A short image description.</p>",
                        "name": "caption",
                        "in": "body",
                        "rawType": "string",
                        "rawDescription": "A short image description.",
                        "childParamsGroups": []
                      }
                    ]
                  }
                ]
              }
            },
            "required": [
              "summary"
            ],
            "name": "output",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#output-object-1) description.",
            "childParamsGroups": [
              {
                "parentName": "output",
                "parentType": "object",
                "id": "output-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>.</p>",
                    "name": "title",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "**Required**.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. Can contain Markdown.</p>",
                    "maxLength": 65535,
                    "name": "summary",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Can contain Markdown.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Can contain Markdown.</p>",
                    "maxLength": 65535,
                    "name": "text",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Can contain Markdown.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "array of objects",
                    "description": "<p>Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run\">Update a check run</a> endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"<a href=\"https://docs.github.com/articles/about-status-checks#checks\">About status checks</a>\". See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1\"><code>annotations</code> object</a> description for details.</p>",
                    "maxItems": 50,
                    "items": {
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                          "name": "path",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                          "childParamsGroups": []
                        },
                        "start_line": {
                          "type": "integer",
                          "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                          "name": "start_line",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The start line of the annotation.",
                          "childParamsGroups": []
                        },
                        "end_line": {
                          "type": "integer",
                          "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                          "name": "end_line",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The end line of the annotation.",
                          "childParamsGroups": []
                        },
                        "start_column": {
                          "type": "integer",
                          "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                          "name": "start_column",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                          "childParamsGroups": []
                        },
                        "end_column": {
                          "type": "integer",
                          "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                          "name": "end_column",
                          "in": "body",
                          "rawType": "integer",
                          "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                          "childParamsGroups": []
                        },
                        "annotation_level": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                          "enum": [
                            "notice",
                            "warning",
                            "failure"
                          ],
                          "name": "annotation_level",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                          "childParamsGroups": []
                        },
                        "message": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                          "name": "message",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                          "childParamsGroups": []
                        },
                        "title": {
                          "type": "string",
                          "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                          "name": "title",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                          "childParamsGroups": []
                        },
                        "raw_details": {
                          "type": "string",
                          "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                          "name": "raw_details",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                          "childParamsGroups": []
                        }
                      },
                      "required": [
                        "path",
                        "start_line",
                        "end_line",
                        "annotation_level",
                        "message"
                      ]
                    },
                    "name": "annotations",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see \"[About status checks](https://docs.github.com/articles/about-status-checks#checks)\". See the [`annotations` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details.",
                    "childParamsGroups": [
                      {
                        "parentName": "annotations",
                        "parentType": "items",
                        "id": "annotations-items",
                        "params": [
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                            "name": "path",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                            "name": "start_line",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The start line of the annotation.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                            "name": "end_line",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The end line of the annotation.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                            "name": "start_column",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "integer",
                            "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                            "name": "end_column",
                            "in": "body",
                            "rawType": "integer",
                            "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                            "enum": [
                              "notice",
                              "warning",
                              "failure"
                            ],
                            "name": "annotation_level",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                            "name": "message",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                            "name": "title",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                            "name": "raw_details",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "array of objects",
                    "description": "<p>Adds images to the output displayed in the GitHub pull request UI. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1\"><code>images</code> object</a> description for details.</p>",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alt": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                          "name": "alt",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The alternative text for the image.",
                          "childParamsGroups": []
                        },
                        "image_url": {
                          "type": "string",
                          "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                          "name": "image_url",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "The full URL of the image.",
                          "childParamsGroups": []
                        },
                        "caption": {
                          "type": "string",
                          "description": "<p>A short image description.</p>",
                          "name": "caption",
                          "in": "body",
                          "rawType": "string",
                          "rawDescription": "A short image description.",
                          "childParamsGroups": []
                        }
                      },
                      "required": [
                        "alt",
                        "image_url"
                      ]
                    },
                    "name": "images",
                    "in": "body",
                    "rawType": "array",
                    "rawDescription": "Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#annotations-object-1) description for details.",
                    "childParamsGroups": [
                      {
                        "parentName": "images",
                        "parentType": "items",
                        "id": "images-items",
                        "params": [
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                            "name": "alt",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The alternative text for the image.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                            "name": "image_url",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "The full URL of the image.",
                            "childParamsGroups": []
                          },
                          {
                            "type": "string",
                            "description": "<p>A short image description.</p>",
                            "name": "caption",
                            "in": "body",
                            "rawType": "string",
                            "rawDescription": "A short image description.",
                            "childParamsGroups": []
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parentName": "annotations",
                "parentType": "items",
                "id": "annotations-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The path of the file to add an annotation to. For example, <code>assets/css/main.css</code>.</p>",
                    "name": "path",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The path of the file to add an annotation to. For example, `assets/css/main.css`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p><strong>Required</strong>. The start line of the annotation.</p>",
                    "name": "start_line",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The start line of the annotation.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p><strong>Required</strong>. The end line of the annotation.</p>",
                    "name": "end_line",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The end line of the annotation.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The start column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                    "name": "start_column",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The end column of the annotation. Annotations only support <code>start_column</code> and <code>end_column</code> on the same line. Omit this parameter if <code>start_line</code> and <code>end_line</code> have different values.</p>",
                    "name": "end_column",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The level of the annotation. Can be one of <code>notice</code>, <code>warning</code>, or <code>failure</code>.</p>",
                    "enum": [
                      "notice",
                      "warning",
                      "failure"
                    ],
                    "name": "annotation_level",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The level of the annotation. Can be one of `notice`, `warning`, or `failure`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. A short description of the feedback for these lines of code. The maximum size is 64 KB.</p>",
                    "name": "message",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short description of the feedback for these lines of code. The maximum size is 64 KB.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The title that represents the annotation. The maximum size is 255 characters.</p>",
                    "name": "title",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The title that represents the annotation. The maximum size is 255 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Details about this annotation. The maximum size is 64 KB.</p>",
                    "name": "raw_details",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Details about this annotation. The maximum size is 64 KB.",
                    "childParamsGroups": []
                  }
                ]
              },
              {
                "parentName": "images",
                "parentType": "items",
                "id": "images-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The alternative text for the image.</p>",
                    "name": "alt",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The alternative text for the image.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The full URL of the image.</p>",
                    "name": "image_url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The full URL of the image.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>A short image description.</p>",
                    "name": "caption",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short image description.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of objects",
            "description": "<p>Possible further actions the integrator can perform, which a user may trigger. Each action includes a <code>label</code>, <code>identifier</code> and <code>description</code>. A maximum of three actions are accepted. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object\"><code>actions</code> object</a> description. To learn more about check runs and requested actions, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions\">Check runs and requested actions</a>.\"</p>",
            "maxItems": 3,
            "items": {
              "type": "object",
              "properties": {
                "label": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "<p><strong>Required</strong>. The text to be displayed on a button in the web UI. The maximum size is 20 characters.</p>",
                  "name": "label",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                  "childParamsGroups": []
                },
                "description": {
                  "type": "string",
                  "maxLength": 40,
                  "description": "<p><strong>Required</strong>. A short explanation of what this action would do. The maximum size is 40 characters.</p>",
                  "name": "description",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "A short explanation of what this action would do. The maximum size is 40 characters.",
                  "childParamsGroups": []
                },
                "identifier": {
                  "type": "string",
                  "maxLength": 20,
                  "description": "<p><strong>Required</strong>. A reference for the action on the integrator's system. The maximum size is 20 characters.</p>",
                  "name": "identifier",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                  "childParamsGroups": []
                }
              },
              "required": [
                "label",
                "description",
                "identifier"
              ]
            },
            "name": "actions",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see \"[Check runs and requested actions](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs-and-requested-actions).\"",
            "childParamsGroups": [
              {
                "parentName": "actions",
                "parentType": "items",
                "id": "actions-items",
                "params": [
                  {
                    "type": "string",
                    "maxLength": 20,
                    "description": "<p><strong>Required</strong>. The text to be displayed on a button in the web UI. The maximum size is 20 characters.</p>",
                    "name": "label",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The text to be displayed on a button in the web UI. The maximum size is 20 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 40,
                    "description": "<p><strong>Required</strong>. A short explanation of what this action would do. The maximum size is 40 characters.</p>",
                    "name": "description",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A short explanation of what this action would do. The maximum size is 40 characters.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "maxLength": 20,
                    "description": "<p><strong>Required</strong>. A reference for the action on the integrator's system. The maximum size is 20 characters.</p>",
                    "name": "identifier",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "A reference for the action on the integrator's system. The maximum size is 20 characters.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "mighty_readme",
                "started_at": "2018-05-04T01:14:52Z",
                "status": "completed",
                "conclusion": "success",
                "completed_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notices.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations": [
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'banaas'.",
                      "raw_details": "Do you mean 'bananas' or 'banana'?",
                      "start_line": 2,
                      "end_line": 2
                    },
                    {
                      "path": "README.md",
                      "annotation_level": "warning",
                      "title": "Spell Checker",
                      "message": "Check your spelling for 'aples'",
                      "raw_details": "Do you mean 'apples' or 'Naples'",
                      "start_line": 4,
                      "end_line": 4
                    }
                  ],
                  "images": [
                    {
                      "alt": "Super bananas",
                      "image_url": "http://example.com/images/42"
                    }
                  ]
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_run_id": "CHECK_RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 4,
                "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                "node_id": "MDg6Q2hlY2tSdW40",
                "external_id": "",
                "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                "html_url": "https://github.com/github/hello-world/runs/4",
                "details_url": "https://example.com",
                "status": "completed",
                "conclusion": "neutral",
                "started_at": "2018-05-04T01:14:52Z",
                "completed_at": "2018-05-04T01:14:52Z",
                "output": {
                  "title": "Mighty Readme report",
                  "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                  "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                  "annotations_count": 2,
                  "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                },
                "name": "mighty_readme",
                "check_suite": {
                  "id": 5
                },
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "pull_requests": [
                  {
                    "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                    "id": 1934,
                    "number": 3956,
                    "head": {
                      "ref": "say-hello",
                      "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    },
                    "base": {
                      "ref": "master",
                      "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                      "repo": {
                        "id": 526,
                        "url": "https://api.github.com/repos/github/hello-world",
                        "name": "hello-world"
                      }
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array.</p>\n<p>Updates a check run for a specific commit in a repository. Your GitHub App must have the <code>checks:write</code> permission to edit check runs.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        "title": "List check run annotations",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_run_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_run_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_run_id": "CHECK_RUN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "path": "README.md",
                  "start_line": 2,
                  "end_line": 2,
                  "start_column": 5,
                  "end_column": 10,
                  "annotation_level": "warning",
                  "title": "Spell Checker",
                  "message": "Check your spelling for 'banaas'.",
                  "raw_details": "Do you mean 'bananas' or 'banana'?",
                  "blob_href": "https://api.github.com/repos/github/rest-api-description/git/blobs/abc"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists annotations for a check run using the annotation <code>id</code>. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the <code>repo</code> scope to get annotations for a check run in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        "title": "List check runs in a check suite",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_suite_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_suite_id parameter</p>"
          },
          {
            "name": "check_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns check runs with the specified <code>name</code>.</p>"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed"
              ]
            },
            "descriptionHTML": "<p>Returns check runs with the specified <code>status</code>. Can be one of <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            },
            "descriptionHTML": "<p>Filters check runs by their <code>completed_at</code> timestamp. Can be one of <code>latest</code> (returning the most recent check runs) or <code>all</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_suite_id": "CHECK_SUITE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "check_runs": [
                  {
                    "id": 4,
                    "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                    "node_id": "MDg6Q2hlY2tSdW40",
                    "external_id": "",
                    "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                    "html_url": "https://github.com/github/hello-world/runs/4",
                    "details_url": "https://example.com",
                    "status": "completed",
                    "conclusion": "neutral",
                    "started_at": "2018-05-04T01:14:52Z",
                    "completed_at": "2018-05-04T01:14:52Z",
                    "output": {
                      "title": "Mighty Readme report",
                      "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                      "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                      "annotations_count": 2,
                      "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                    },
                    "name": "mighty_readme",
                    "check_suite": {
                      "id": 5
                    },
                    "app": {
                      "id": 1,
                      "slug": "octoapp",
                      "node_id": "MDExOkludGVncmF0aW9uMQ==",
                      "owner": {
                        "login": "github",
                        "id": 1,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "url": "https://api.github.com/orgs/github",
                        "repos_url": "https://api.github.com/orgs/github/repos",
                        "events_url": "https://api.github.com/orgs/github/events",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": true
                      },
                      "name": "Octocat App",
                      "description": "",
                      "external_url": "https://example.com",
                      "html_url": "https://github.com/apps/octoapp",
                      "created_at": "2017-07-08T16:18:44-04:00",
                      "updated_at": "2017-07-08T16:18:44-04:00",
                      "permissions": {
                        "metadata": "read",
                        "contents": "read",
                        "issues": "write",
                        "single_file": "write"
                      },
                      "events": [
                        "push",
                        "pull_request"
                      ]
                    },
                    "pull_requests": [
                      {
                        "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                        "id": 1934,
                        "number": 3956,
                        "head": {
                          "ref": "say-hello",
                          "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                          "repo": {
                            "id": 526,
                            "url": "https://api.github.com/repos/github/hello-world",
                            "name": "hello-world"
                          }
                        },
                        "base": {
                          "ref": "master",
                          "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                          "repo": {
                            "id": 526,
                            "url": "https://api.github.com/repos/github/hello-world",
                            "name": "hello-world"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array.</p>\n<p>Lists check runs for a check suite using its <code>id</code>. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the <code>repo</code> scope to get check runs in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{ref}/check-runs",
        "title": "List check runs for a Git reference",
        "category": "checks",
        "subcategory": "runs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          },
          {
            "name": "check_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns check runs with the specified <code>name</code>.</p>"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "queued",
                "in_progress",
                "completed"
              ]
            },
            "descriptionHTML": "<p>Returns check runs with the specified <code>status</code>. Can be one of <code>queued</code>, <code>in_progress</code>, or <code>completed</code>.</p>"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "latest",
                "all"
              ],
              "default": "latest"
            },
            "descriptionHTML": "<p>Filters check runs by their <code>completed_at</code> timestamp. Can be one of <code>latest</code> (returning the most recent check runs) or <code>all</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "app_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "check_runs": [
                  {
                    "id": 4,
                    "head_sha": "ce587453ced02b1526dfb4cb910479d431683101",
                    "node_id": "MDg6Q2hlY2tSdW40",
                    "external_id": "",
                    "url": "https://api.github.com/repos/github/hello-world/check-runs/4",
                    "html_url": "https://github.com/github/hello-world/runs/4",
                    "details_url": "https://example.com",
                    "status": "completed",
                    "conclusion": "neutral",
                    "started_at": "2018-05-04T01:14:52Z",
                    "completed_at": "2018-05-04T01:14:52Z",
                    "output": {
                      "title": "Mighty Readme report",
                      "summary": "There are 0 failures, 2 warnings, and 1 notice.",
                      "text": "You may have some misspelled words on lines 2 and 4. You also may want to add a section in your README about how to install your app.",
                      "annotations_count": 2,
                      "annotations_url": "https://api.github.com/repos/github/hello-world/check-runs/4/annotations"
                    },
                    "name": "mighty_readme",
                    "check_suite": {
                      "id": 5
                    },
                    "app": {
                      "id": 1,
                      "slug": "octoapp",
                      "node_id": "MDExOkludGVncmF0aW9uMQ==",
                      "owner": {
                        "login": "github",
                        "id": 1,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "url": "https://api.github.com/orgs/github",
                        "repos_url": "https://api.github.com/orgs/github/repos",
                        "events_url": "https://api.github.com/orgs/github/events",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": true
                      },
                      "name": "Octocat App",
                      "description": "",
                      "external_url": "https://example.com",
                      "html_url": "https://github.com/apps/octoapp",
                      "created_at": "2017-07-08T16:18:44-04:00",
                      "updated_at": "2017-07-08T16:18:44-04:00",
                      "permissions": {
                        "metadata": "read",
                        "contents": "read",
                        "issues": "write",
                        "single_file": "write"
                      },
                      "events": [
                        "push",
                        "pull_request"
                      ]
                    },
                    "pull_requests": [
                      {
                        "url": "https://api.github.com/repos/github/hello-world/pulls/1",
                        "id": 1934,
                        "number": 3956,
                        "head": {
                          "ref": "say-hello",
                          "sha": "3dca65fa3e8d4b3da3f3d056c59aee1c50f41390",
                          "repo": {
                            "id": 526,
                            "url": "https://api.github.com/repos/github/hello-world",
                            "name": "hello-world"
                          }
                        },
                        "base": {
                          "ref": "master",
                          "sha": "e7fdf7640066d71ad16a86fbcbb9c6a10a18af4f",
                          "repo": {
                            "id": 526,
                            "url": "https://api.github.com/repos/github/hello-world",
                            "name": "hello-world"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array.</p>\n<p>Lists check runs for a commit ref. The <code>ref</code> can be a SHA, branch name, or a tag name. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the <code>repo</code> scope to get check runs in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "suites": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/check-suites",
        "title": "Create a check suite",
        "category": "checks",
        "subcategory": "suites",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The sha of the head commit.</p>",
            "name": "head_sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The sha of the head commit.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response when the suite already exists",
              "example": {
                "id": 5,
                "node_id": "MDEwOkNoZWNrU3VpdGU1",
                "head_branch": "master",
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "status": "completed",
                "conclusion": "neutral",
                "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
                "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
                "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "pull_requests": [],
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "template_repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World-Template",
                    "full_name": "octocat/Hello-World-Template",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World-Template",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World-Template.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                    "homepage": "https://github.com",
                    "forks": 9,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "watchers": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues": 0,
                    "open_issues_count": 0,
                    "is_template": true,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    },
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0
                  },
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "delete_branch_on_merge": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "head_commit": {
                  "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                  "timestamp": "2016-10-10T00:00:00Z",
                  "author": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  },
                  "committer": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  }
                },
                "latest_check_runs_count": 1,
                "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response when the suite was created",
              "example": {
                "id": 5,
                "node_id": "MDEwOkNoZWNrU3VpdGU1",
                "head_branch": "master",
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "status": "completed",
                "conclusion": "neutral",
                "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
                "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
                "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "pull_requests": [],
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "template_repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World-Template",
                    "full_name": "octocat/Hello-World-Template",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World-Template",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World-Template.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                    "homepage": "https://github.com",
                    "forks": 9,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "watchers": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues": 0,
                    "open_issues_count": 0,
                    "is_template": true,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    },
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0
                  },
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "delete_branch_on_merge": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "head_commit": {
                  "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                  "timestamp": "2016-10-10T00:00:00Z",
                  "author": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  },
                  "committer": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  }
                },
                "latest_check_runs_count": 1,
                "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array and a <code>null</code> value for <code>head_branch</code>.</p>\n<p>By default, check suites are automatically created when you create a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#check-runs\">check run</a>. You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#update-repository-preferences-for-check-suites\">Update repository preferences for check suites</a>\". Your GitHub App must have the <code>checks:write</code> permission to create check suites.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Response when the suite already exists</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Response when the suite was created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/check-suites/preferences",
        "title": "Update repository preferences for check suites",
        "category": "checks",
        "subcategory": "suites",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of objects",
            "description": "<p>Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#auto_trigger_checks-object\"><code>auto_trigger_checks</code> object</a> description for details.</p>",
            "items": {
              "type": "object",
              "properties": {
                "app_id": {
                  "type": "integer",
                  "description": "<p><strong>Required</strong>. The <code>id</code> of the GitHub App.</p>",
                  "name": "app_id",
                  "in": "body",
                  "rawType": "integer",
                  "rawDescription": "The `id` of the GitHub App.",
                  "childParamsGroups": []
                },
                "setting": {
                  "type": "boolean",
                  "description": "<p><strong>Required</strong>. Set to <code>true</code> to enable automatic creation of CheckSuite events upon pushes to the repository, or <code>false</code> to disable them.</p>",
                  "default": true,
                  "name": "setting",
                  "in": "body",
                  "rawType": "boolean",
                  "rawDescription": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                  "childParamsGroups": []
                }
              },
              "required": [
                "app_id",
                "setting"
              ]
            },
            "name": "auto_trigger_checks",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/enterprise-server@3.1/rest/reference/checks#auto_trigger_checks-object) description for details.",
            "childParamsGroups": [
              {
                "parentName": "auto_trigger_checks",
                "parentType": "items",
                "id": "auto_trigger_checks-items",
                "params": [
                  {
                    "type": "integer",
                    "description": "<p><strong>Required</strong>. The <code>id</code> of the GitHub App.</p>",
                    "name": "app_id",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The `id` of the GitHub App.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "boolean",
                    "description": "<p><strong>Required</strong>. Set to <code>true</code> to enable automatic creation of CheckSuite events upon pushes to the repository, or <code>false</code> to disable them.</p>",
                    "default": true,
                    "name": "setting",
                    "in": "body",
                    "rawType": "boolean",
                    "rawDescription": "Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "auto_trigger_checks": [
                  {
                    "app_id": 4,
                    "setting": false
                  }
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "preferences": {
                  "auto_trigger_checks": [
                    {
                      "app_id": 2,
                      "setting": true
                    },
                    {
                      "app_id": 4,
                      "setting": false
                    }
                  ]
                },
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World-Template",
                    "full_name": "octocat/Hello-World-Template",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World-Template",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World-Template.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                    "homepage": "https://github.com",
                    "forks": 9,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "watchers": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues": 0,
                    "open_issues_count": 0,
                    "is_template": true,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    },
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0
                  }
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/checks#create-a-check-suite\">Create a check suite</a>. You must have admin permissions in the repository to set preferences for check suites.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/check-suites/{check_suite_id}",
        "title": "Get a check suite",
        "category": "checks",
        "subcategory": "suites",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_suite_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_suite_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_suite_id": "CHECK_SUITE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 5,
                "node_id": "MDEwOkNoZWNrU3VpdGU1",
                "head_branch": "master",
                "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "status": "completed",
                "conclusion": "neutral",
                "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
                "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
                "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                "pull_requests": [],
                "created_at": "2017-07-08T16:18:44-04:00",
                "updated_at": "2017-07-08T16:18:44-04:00",
                "app": {
                  "id": 1,
                  "slug": "octoapp",
                  "node_id": "MDExOkludGVncmF0aW9uMQ==",
                  "owner": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "name": "Octocat App",
                  "description": "",
                  "external_url": "https://example.com",
                  "html_url": "https://github.com/apps/octoapp",
                  "created_at": "2017-07-08T16:18:44-04:00",
                  "updated_at": "2017-07-08T16:18:44-04:00",
                  "permissions": {
                    "metadata": "read",
                    "contents": "read",
                    "issues": "write",
                    "single_file": "write"
                  },
                  "events": [
                    "push",
                    "pull_request"
                  ]
                },
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "template_repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World-Template",
                    "full_name": "octocat/Hello-World-Template",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World-Template",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World-Template.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                    "homepage": "https://github.com",
                    "forks": 9,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "watchers": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues": 0,
                    "open_issues_count": 0,
                    "is_template": true,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    },
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0
                  },
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "delete_branch_on_merge": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "head_commit": {
                  "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                  "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                  "timestamp": "2016-10-10T00:00:00Z",
                  "author": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  },
                  "committer": {
                    "name": "The Octocat",
                    "email": "octocat@nowhere.com"
                  }
                },
                "latest_check_runs_count": 1,
                "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array and a <code>null</code> value for <code>head_branch</code>.</p>\n<p>Gets a single check suite using its <code>id</code>. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the <code>repo</code> scope to get check suites in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
        "title": "Rerequest a check suite",
        "category": "checks",
        "subcategory": "suites",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "check_suite_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>check_suite_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "check_suite_id": "CHECK_SUITE_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#check_suite\"><code>check_suite</code> webhook</a> event with the action <code>rerequested</code>. When a check suite is <code>rerequested</code>, its <code>status</code> is reset to <code>queued</code> and the <code>conclusion</code> is cleared.</p>\n<p>To rerequest a check suite, your GitHub App must have the <code>checks:read</code> permission on a private repository or pull access to a public repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{ref}/check-suites",
        "title": "List check suites for a Git reference",
        "category": "checks",
        "subcategory": "suites",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          },
          {
            "name": "app_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "example": 1,
            "descriptionHTML": "<p>Filters check suites by GitHub App <code>id</code>.</p>"
          },
          {
            "name": "check_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Returns check runs with the specified <code>name</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "check_suites": [
                  {
                    "id": 5,
                    "node_id": "MDEwOkNoZWNrU3VpdGU1",
                    "head_branch": "master",
                    "head_sha": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                    "status": "completed",
                    "conclusion": "neutral",
                    "url": "https://api.github.com/repos/github/hello-world/check-suites/5",
                    "before": "146e867f55c26428e5f9fade55a9bbf5e95a7912",
                    "after": "d6fde92930d4715a2b49857d24b940956b26d2d3",
                    "pull_requests": [],
                    "app": {
                      "id": 1,
                      "slug": "octoapp",
                      "node_id": "MDExOkludGVncmF0aW9uMQ==",
                      "owner": {
                        "login": "github",
                        "id": 1,
                        "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                        "url": "https://api.github.com/orgs/github",
                        "repos_url": "https://api.github.com/orgs/github/repos",
                        "events_url": "https://api.github.com/orgs/github/events",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": true
                      },
                      "name": "Octocat App",
                      "description": "",
                      "external_url": "https://example.com",
                      "html_url": "https://github.com/apps/octoapp",
                      "created_at": "2017-07-08T16:18:44-04:00",
                      "updated_at": "2017-07-08T16:18:44-04:00",
                      "permissions": {
                        "metadata": "read",
                        "contents": "read",
                        "issues": "write",
                        "single_file": "write"
                      },
                      "events": [
                        "push",
                        "pull_request"
                      ]
                    },
                    "repository": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "language": null,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues_count": 0,
                      "is_template": true,
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "delete_branch_on_merge": true,
                      "subscribers_count": 42,
                      "network_count": 0
                    },
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "head_commit": {
                      "id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                      "tree_id": "7fd1a60b01f91b314f59955a4e4d4e80d8edf11d",
                      "message": "Merge pull request #6 from Spaceghost/patch-1\n\nNew line at end of file.",
                      "timestamp": "2016-10-10T00:00:00Z",
                      "author": {
                        "name": "The Octocat",
                        "email": "octocat@nowhere.com"
                      },
                      "committer": {
                        "name": "The Octocat",
                        "email": "octocat@nowhere.com"
                      }
                    },
                    "latest_check_runs_count": 1,
                    "check_runs_url": "https://api.github.com/repos/octocat/Hello-World/check-suites/5/check-runs"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty <code>pull_requests</code> array and a <code>null</code> value for <code>head_branch</code>.</p>\n<p>Lists check suites for a commit <code>ref</code>. The <code>ref</code> can be a SHA, branch name, or a tag name. GitHub Apps must have the <code>checks:read</code> permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the <code>repo</code> scope to get check suites in a private repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ]
  },
  "code-scanning": {
    "code-scanning": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/alerts",
        "title": "List code scanning alerts for a repository",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "tool_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the tool used to generate the code scanning analysis."
            },
            "descriptionHTML": "<p>The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either <code>tool_name</code> or <code>tool_guid</code>, but not both.</p>"
          },
          {
            "name": "tool_guid",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
            },
            "descriptionHTML": "<p>The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either <code>tool_guid</code> or <code>tool_name</code>, but not both.</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
            },
            "descriptionHTML": "<p>The Git reference for the results you want to list. The <code>ref</code> for a branch can be formatted either as <code>refs/heads/&#x3C;branch name></code> or simply <code>&#x3C;branch name></code>. To reference a pull request use <code>refs/pull/&#x3C;number>/merge</code>.</p>"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "State of a code scanning alert.",
              "enum": [
                "open",
                "closed",
                "dismissed",
                "fixed"
              ]
            },
            "descriptionHTML": "<p>Set to <code>open</code>, <code>fixed</code>, or <code>dismissed</code> to list code scanning alerts in a specific state.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "number": 4,
                  "created_at": "2020-02-13T12:29:18Z",
                  "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4",
                  "html_url": "https://github.com/octocat/hello-world/code-scanning/4",
                  "state": "open",
                  "dismissed_by": null,
                  "dismissed_at": null,
                  "dismissed_reason": null,
                  "rule": {
                    "id": "js/zipslip",
                    "severity": "error",
                    "description": "Arbitrary file write during zip extraction",
                    "name": "js/zipslip"
                  },
                  "tool": {
                    "name": "CodeQL",
                    "guid": null,
                    "version": "2.4.0"
                  },
                  "most_recent_instance": {
                    "ref": "refs/heads/main",
                    "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                    "environment": "{}",
                    "state": "open",
                    "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                    "message": {
                      "text": "This path depends on a user-provided value."
                    },
                    "location": {
                      "path": "spec-main/api-session-spec.ts",
                      "start_line": 917,
                      "end_line": 917,
                      "start_column": 7,
                      "end_column": 18
                    },
                    "classifications": [
                      "test"
                    ]
                  },
                  "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/4/instances"
                },
                {
                  "number": 3,
                  "created_at": "2020-02-13T12:29:18Z",
                  "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3",
                  "html_url": "https://github.com/octocat/hello-world/code-scanning/3",
                  "state": "dismissed",
                  "dismissed_by": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "dismissed_at": "2020-02-14T12:29:18Z",
                  "dismissed_reason": "false positive",
                  "rule": {
                    "id": "js/zipslip",
                    "severity": "error",
                    "description": "Arbitrary file write during zip extraction",
                    "name": "js/zipslip"
                  },
                  "tool": {
                    "name": "CodeQL",
                    "guid": null,
                    "version": "2.4.0"
                  },
                  "most_recent_instance": {
                    "ref": "refs/heads/main",
                    "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                    "environment": "{}",
                    "state": "open",
                    "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                    "message": {
                      "text": "This path depends on a user-provided value."
                    },
                    "location": {
                      "path": "lib/ab12-gen.js",
                      "start_line": 917,
                      "end_line": 917,
                      "start_column": 7,
                      "end_column": 18
                    },
                    "classifications": []
                  },
                  "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/3/instances"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all open code scanning alerts for the default branch (usually <code>main</code>\nor <code>master</code>). You must use an access token with the <code>security_events</code> scope to use\nthis endpoint. GitHub Apps must have the <code>security_events</code> read permission to use\nthis endpoint.</p>\n<p>The response includes a <code>most_recent_instance</code> object.\nThis provides details of the most recent instance of this alert\nfor the default branch or for the specified Git reference\n(if you used <code>ref</code> in the request).</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "title": "Get a code scanning alert",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "alert_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The security alert number.",
              "readOnly": true
            },
            "descriptionHTML": "<p>The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the <code>number</code> field in the response from the <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code> operation.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "alert_number": "ALERT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "number": 42,
                "created_at": "2020-06-19T11:21:34Z",
                "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42",
                "html_url": "https://github.com/octocat/hello-world/code-scanning/42",
                "state": "dismissed",
                "dismissed_by": {
                  "login": "octocat",
                  "id": 54933897,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "dismissed_at": "2020-02-14T12:29:18Z",
                "dismissed_reason": "false positive",
                "rule": {
                  "id": "js/zipslip",
                  "severity": "error",
                  "description": "Arbitrary file write during zip extraction (\"Zip Slip\")",
                  "name": "js/zipslip",
                  "full_description": "Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.",
                  "tags": [
                    "security",
                    "external/cwe/cwe-022"
                  ],
                  "help": "# Arbitrary file write during zip extraction (\"Zip Slip\")\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ..."
                },
                "tool": {
                  "name": "CodeQL",
                  "guid": null,
                  "version": "2.4.0"
                },
                "most_recent_instance": {
                  "ref": "refs/heads/main",
                  "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                  "environment": "{}",
                  "state": "dismissed",
                  "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                  "message": {
                    "text": "This path depends on a user-provided value."
                  },
                  "location": {
                    "path": "spec-main/api-session-spec.ts",
                    "start_line": 917,
                    "end_line": 917,
                    "start_column": 7,
                    "end_column": 18
                  },
                  "classifications": [
                    "test"
                  ]
                },
                "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a single code scanning alert. You must use an access token with the <code>security_events</code> scope to use this endpoint. GitHub Apps must have the <code>security_events</code> read permission to use this endpoint.</p>\n<p><strong>Deprecation notice</strong>:\nThe instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by <code>instances_url</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
        "title": "Update a code scanning alert",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "alert_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The security alert number.",
              "readOnly": true
            },
            "descriptionHTML": "<p>The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the <code>number</code> field in the response from the <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code> operation.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Sets the state of the code scanning alert. Can be one of <code>open</code> or <code>dismissed</code>. You must provide <code>dismissed_reason</code> when you set the state to <code>dismissed</code>.</p>",
            "type": "string",
            "enum": [
              "open",
              "dismissed"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p><strong>Required when the state is dismissed.</strong> The reason for dismissing or closing the alert. Can be one of: <code>false positive</code>, <code>won't fix</code>, and <code>used in tests</code>.</p>",
            "enum": [
              null,
              "false positive",
              "won't fix",
              "used in tests"
            ],
            "name": "dismissed_reason",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "**Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "state": "dismissed",
                "dismissed_reason": "false positive",
                "dismissed_note": "This alert is not actually correct, because there's a sanitizer included in the library."
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "alert_number": "ALERT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "number": 42,
                "created_at": "2020-08-25T21:28:36Z",
                "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42",
                "html_url": "https://github.com/octocat/hello-world/code-scanning/42",
                "state": "dismissed",
                "dismissed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "dismissed_at": "2020-09-02T22:34:56Z",
                "dismissed_reason": "false positive",
                "rule": {
                  "id": "js/zipslip",
                  "severity": "error",
                  "description": "Arbitrary file write during zip extraction (\"Zip Slip\")",
                  "name": "js/zipslip",
                  "full_description": "Extracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten.",
                  "tags": [
                    "security",
                    "external/cwe/cwe-022"
                  ],
                  "help": "# Arbitrary file write during zip extraction (\"Zip Slip\")\\nExtracting files from a malicious zip archive without validating that the destination file path is within the destination directory can cause files outside the destination directory to be overwritten ..."
                },
                "tool": {
                  "name": "CodeQL",
                  "guid": null,
                  "version": "2.4.0"
                },
                "most_recent_instance": {
                  "ref": "refs/heads/main",
                  "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                  "environment": "{}",
                  "state": "dismissed",
                  "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                  "message": {
                    "text": "This path depends on a user-provided value."
                  },
                  "location": {
                    "path": "spec-main/api-session-spec.ts",
                    "start_line": 917,
                    "end_line": 917,
                    "start_column": 7,
                    "end_column": 18
                  },
                  "classifications": [
                    "test"
                  ]
                },
                "instances_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/alerts/42/instances"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the status of a single code scanning alert. You must use an access token with the <code>security_events</code> scope to use this endpoint. GitHub Apps must have the <code>security_events</code> write permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if the repository is archived or if github advanced security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        "title": "List instances of a code scanning alert",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "alert_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The security alert number.",
              "readOnly": true
            },
            "descriptionHTML": "<p>The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the <code>number</code> field in the response from the <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code> operation.</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
            },
            "descriptionHTML": "<p>The Git reference for the results you want to list. The <code>ref</code> for a branch can be formatted either as <code>refs/heads/&#x3C;branch name></code> or simply <code>&#x3C;branch name></code>. To reference a pull request use <code>refs/pull/&#x3C;number>/merge</code>.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "alert_number": "ALERT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "ref": "refs/heads/main",
                  "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                  "environment": "",
                  "state": "open",
                  "commit_sha": "39406e42cb832f683daa691dd652a8dc36ee8930",
                  "message": {
                    "text": "This path depends on a user-provided value."
                  },
                  "location": {
                    "path": "lib/ab12-gen.js",
                    "start_line": 917,
                    "end_line": 917,
                    "start_column": 7,
                    "end_column": 18
                  },
                  "classifications": [
                    "library"
                  ]
                },
                {
                  "ref": "refs/pull/3740/merge",
                  "analysis_key": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                  "environment": "",
                  "category": ".github/workflows/codeql-analysis.yml:CodeQL-Build",
                  "state": "fixed",
                  "commit_sha": "b09da05606e27f463a2b49287684b4ae777092f2",
                  "message": {
                    "text": "This suffix check is missing a length comparison to correctly handle lastIndexOf returning -1."
                  },
                  "location": {
                    "path": "app/script.js",
                    "start_line": 2,
                    "end_line": 2,
                    "start_column": 10,
                    "end_column": 50
                  },
                  "classifications": [
                    "source"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all instances of the specified code scanning alert. You must use an access token with the <code>security_events</code> scope to use this endpoint. GitHub Apps must have the <code>security_events</code> read permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/analyses",
        "title": "List code scanning analyses for a repository",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "tool_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The name of the tool used to generate the code scanning analysis."
            },
            "descriptionHTML": "<p>The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either <code>tool_name</code> or <code>tool_guid</code>, but not both.</p>"
          },
          {
            "name": "tool_guid",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "description": "The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data."
            },
            "descriptionHTML": "<p>The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either <code>tool_guid</code> or <code>tool_name</code>, but not both.</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`."
            },
            "descriptionHTML": "<p>The Git reference for the analyses you want to list. The <code>ref</code> for a branch can be formatted either as <code>refs/heads/&#x3C;branch name></code> or simply <code>&#x3C;branch name></code>. To reference a pull request use <code>refs/pull/&#x3C;number>/merge</code>.</p>"
          },
          {
            "name": "sarif_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "An identifier for the upload.",
              "examples": [
                "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
              ]
            },
            "descriptionHTML": "<p>Filter analyses belonging to the same SARIF upload.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "ref": "refs/heads/main",
                  "commit_sha": "d99612c3e1f2970085cfbaeadf8f010ef69bad83",
                  "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
                  "environment": "{\"language\":\"python\"}",
                  "error": "",
                  "category": ".github/workflows/codeql-analysis.yml:analyze/language:python",
                  "created_at": "2020-08-27T15:05:21Z",
                  "results_count": 17,
                  "rules_count": 49,
                  "id": 201,
                  "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201",
                  "sarif_id": "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53",
                  "tool": {
                    "name": "CodeQL",
                    "guid": null,
                    "version": "2.4.0"
                  },
                  "deletable": true,
                  "warning": ""
                },
                {
                  "ref": "refs/heads/my-branch",
                  "commit_sha": "c8cff6510d4d084fb1b4aa13b64b97ca12b07321",
                  "analysis_key": ".github/workflows/shiftleft.yml:build",
                  "environment": "{}",
                  "error": "",
                  "category": ".github/workflows/shiftleft.yml:build/",
                  "created_at": "2020-08-31T22:46:44Z",
                  "results_count": 17,
                  "rules_count": 32,
                  "id": 200,
                  "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/200",
                  "sarif_id": "8981cd8e-b078-4ac3-a3be-1dad7dbd0b582",
                  "tool": {
                    "name": "Python Security Analysis",
                    "guid": null,
                    "version": "1.2.0"
                  },
                  "deletable": true,
                  "warning": ""
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the details of all code scanning analyses for a repository,\nstarting with the most recent.\nThe response is paginated and you can use the <code>page</code> and <code>per_page</code> parameters\nto list the analyses you're interested in.\nBy default 30 analyses are listed per page.</p>\n<p>The <code>rules_count</code> field in the response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand <code>0</code> is returned in this field.</p>\n<p>You must use an access token with the <code>security_events</code> scope to use this endpoint.\nGitHub Apps must have the <code>security_events</code> read permission to use this endpoint.</p>\n<p><strong>Deprecation notice</strong>:\nThe <code>tool_name</code> field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the <code>tool</code> field.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "title": "Get a code scanning analysis for a repository",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "analysis_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The ID of the analysis, as returned from the <code>GET /repos/{owner}/{repo}/code-scanning/analyses</code> operation.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "analysis_id": "ANALYSIS_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "ref": "refs/heads/main",
                "commit_sha": "c18c69115654ff0166991962832dc2bd7756e655",
                "analysis_key": ".github/workflows/codeql-analysis.yml:analyze",
                "environment": "{\"language\":\"javascript\"}",
                "error": "",
                "category": ".github/workflows/codeql-analysis.yml:analyze/language:javascript",
                "created_at": "2021-01-13T11:55:49Z",
                "results_count": 3,
                "rules_count": 67,
                "id": 3602840,
                "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/201",
                "sarif_id": "47177e22-5596-11eb-80a1-c1e54ef945c6",
                "tool": {
                  "name": "CodeQL",
                  "guid": null,
                  "version": "2.4.0"
                },
                "deletable": true,
                "warning": ""
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a specified code scanning analysis for a repository.\nYou must use an access token with the <code>security_events</code> scope to use this endpoint.\nGitHub Apps must have the <code>security_events</code> read permission to use this endpoint.</p>\n<p>The default JSON response contains fields that describe the analysis.\nThis includes the Git reference and commit SHA to which the analysis relates,\nthe datetime of the analysis, the name of the code scanning tool,\nand the number of alerts.</p>\n<p>The <code>rules_count</code> field in the default response give the number of rules\nthat were run in the analysis.\nFor very old analyses this data is not available,\nand <code>0</code> is returned in this field.</p>\n<p>If you use the Accept header <code>application/sarif+json</code>,\nthe response contains the analysis data that was uploaded.\nThis is formatted as\n<a href=\"https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html\">SARIF version 2.1.0</a>.</p>\n<p><strong>Deprecation notice</strong>:\nThe <code>tool_name</code> field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the <code>tool</code> field.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
        "title": "Delete a code scanning analysis from a repository",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "analysis_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The ID of the analysis, as returned from the <code>GET /repos/{owner}/{repo}/code-scanning/analyses</code> operation.</p>"
          },
          {
            "name": "confirm_delete",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "descriptionHTML": "<p>Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without setting this parameter to <code>true</code>, you'll get a 400 response with the message: <code>Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.</code></p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "analysis_id": "ANALYSIS_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "next_analysis_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41",
                "confirm_delete_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses/41?confirm_delete"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if the repository is archived or if github advanced security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "descriptionHTML": "<p>Deletes a specified code scanning analysis from a repository. For\nprivate repositories, you must use an access token with the <code>repo</code> scope. For public repositories,\nyou must use an access token with <code>public_repo</code> and <code>repo:security_events</code> scopes.\nGitHub Apps must have the <code>security_events</code> write permission to use this endpoint.</p>\n<p>You can delete one analysis at a time.\nTo delete a series of analyses, start with the most recent analysis and work backwards.\nConceptually, the process is similar to the undo function in a text editor.</p>\n<p><strong>Note</strong>: The ability to delete analyses was introduced in GitHub Enterprise Server 3.1.\nYou can delete analyses that were generated prior to installing this release,\nhowever, if you do so, you will lose information about fixed alerts for all such analyses,\nfor the relevant code scanning tool.\nWe recommend that you only delete analyses that were generated with earlier releases\nif you don't need the details of fixed alerts from pre-3.1 releases.</p>\n<p>When you list the analyses for a repository,\none or more will be identified as deletable in the response:</p>\n<pre><code>\"deletable\": true\n</code></pre>\n<p>An analysis is deletable when it's the most recent in a set of analyses.\nTypically, a repository will have multiple sets of analyses\nfor each enabled code scanning tool,\nwhere a set is determined by a unique combination of analysis values:</p>\n<ul>\n<li><code>ref</code></li>\n<li><code>tool</code></li>\n<li><code>analysis_key</code></li>\n<li><code>environment</code></li>\n</ul>\n<p>If you attempt to delete an analysis that is not the most recent in a set,\nyou'll get a 400 response with the message:</p>\n<pre><code>Analysis specified is not deletable.\n</code></pre>\n<p>The response from a successful <code>DELETE</code> operation provides you with\ntwo alternative URLs for deleting the next analysis in the set\n(see the example default response below).\nUse the <code>next_analysis_url</code> URL if you want to avoid accidentally deleting the final analysis\nin the set. This is a useful option if you want to preserve at least one analysis\nfor the specified tool in your repository.\nUse the <code>confirm_delete_url</code> URL if you are content to remove all analyses for a tool.\nWhen you delete the last analysis in a set the value of <code>next_analysis_url</code> and <code>confirm_delete_url</code>\nin the 200 response is <code>null</code>.</p>\n<p>As an example of the deletion process,\nlet's imagine that you added a workflow that configured a particular code scanning tool\nto analyze the code in a repository. This tool has added 15 analyses:\n10 on the default branch, and another 5 on a topic branch.\nYou therefore have two separate sets of analyses for this tool.\nYou've now decided that you want to remove all of the analyses for the tool.\nTo do this you must make 15 separate deletion requests.\nTo start, you must find the deletable analysis for one of the sets,\nstep through deleting the analyses in that set,\nand then repeat the process for the second set.\nThe procedure therefore consists of a nested loop:</p>\n<p><strong>Outer loop</strong>:</p>\n<ul>\n<li>\n<p>List the analyses for the repository, filtered by tool.</p>\n</li>\n<li>\n<p>Parse this list to find a deletable analysis. If found:</p>\n<p><strong>Inner loop</strong>:</p>\n<ul>\n<li>Delete the identified analysis.</li>\n<li>Parse the response for the value of <code>confirm_delete_url</code> and, if found, use this in the next iteration.</li>\n</ul>\n</li>\n</ul>\n<p>The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the <code>confirm_delete_url</code> value. Alternatively, you could use the <code>next_analysis_url</code> value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.</p>",
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/sarifs",
        "title": "Upload an analysis as SARIF data",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The SHA of the commit to which the analysis you are uploading relates.</p>",
            "type": "string",
            "minLength": 40,
            "maxLength": 40,
            "pattern": "^[0-9a-fA-F]+$",
            "name": "commit_sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the commit to which the analysis you are uploading relates.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The full Git reference, formatted as <code>refs/heads/&#x3C;branch name></code>,\n<code>refs/pull/&#x3C;number>/merge</code>, or <code>refs/pull/&#x3C;number>/head</code>.</p>",
            "name": "ref",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The full Git reference, formatted as `refs/heads/<branch name>`,\n`refs/pull/<number>/merge`, or `refs/pull/<number>/head`.",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using <a href=\"http://www.gnu.org/software/gzip/manual/gzip.html\"><code>gzip</code></a> and then translate the contents of the file into a Base64 encoding string. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning\">SARIF support for code scanning</a>.\"</p>",
            "type": "string",
            "name": "sarif",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see \"[SARIF support for code scanning](https://docs.github.com/enterprise-server@3.1/code-security/secure-coding/sarif-support-for-code-scanning).\"",
            "childParamsGroups": []
          },
          {
            "description": "<p>The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.</p>",
            "type": "string",
            "format": "uri",
            "examples": [
              "file:///github/workspace/"
            ],
            "name": "checkout_uri",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The base directory used in the analysis, as it appears in the SARIF file.\nThis property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The time that the analysis run began. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "format": "date-time",
            "type": "string",
            "name": "started_at",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the <code>tool_guid</code> parameter of operations such as <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code>.</p>",
            "type": "string",
            "name": "tool_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to \"API\". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "id": "47177e22-5596-11eb-80a1-c1e54ef945c6",
                "url": "https://api.github.com/repos/octocat/hello-world/code-scanning/sarifs/47177e22-5596-11eb-80a1-c1e54ef945c6"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request if the sarif field is invalid</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if the repository is archived or if github advanced security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "413",
            "description": "<p>Payload Too Large if the sarif field is too large</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "descriptionHTML": "<p>Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the <code>security_events</code> scope to use this endpoint. GitHub Apps must have the <code>security_events</code> write permission to use this endpoint.</p>\n<p>There are two places where you can upload code scanning results.</p>\n<ul>\n<li>If you upload to a pull request, for example <code>--ref refs/pull/42/merge</code> or <code>--ref refs/pull/42/head</code>, then the results appear as alerts in a pull request check. For more information, see \"<a href=\"/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests\">Triaging code scanning alerts in pull requests</a>.\"</li>\n<li>If you upload to a branch, for example <code>--ref refs/heads/my-branch</code>, then the results appear in the <strong>Security</strong> tab for your repository. For more information, see \"<a href=\"/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository\">Managing code scanning alerts for your repository</a>.\"</li>\n</ul>\n<p>You must compress the SARIF-formatted analysis data that you want to upload, using <code>gzip</code>, and then encode it as a Base64 format string. For example:</p>\n<pre><code>gzip -c analysis-data.sarif | base64 -w0\n</code></pre>\n<p>SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.</p>\n<p>The <code>202 Accepted</code>, response includes an <code>id</code> value.\nYou can use this ID to check the status of the upload by using this for the <code>/sarifs/{sarif_id}</code> endpoint.\nFor more information, see \"<a href=\"/rest/reference/code-scanning#get-information-about-a-sarif-upload\">Get information about a SARIF upload</a>.\"</p>",
        "subcategory": "code-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
        "title": "Get information about a SARIF upload",
        "category": "code-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sarif_id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true,
            "descriptionHTML": "<p>The SARIF ID obtained after uploading.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "sarif_id": "SARIF_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "processing_status": "complete",
                "analyses_url": "https://api.github.com/repos/octocat/hello-world/code-scanning/analyses?sarif_id=47177e22-5596-11eb-80a1-c1e54ef945c6"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see \"<a href=\"/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository\">Get a code scanning analysis for a repository</a>.\" You must use an access token with the <code>security_events</code> scope to use this endpoint. GitHub Apps must have the <code>security_events</code> read permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Response if GitHub Advanced Security is not enabled for this repository</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if the sarif id does not match any upload</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "code-scanning"
      }
    ]
  },
  "codes-of-conduct": {
    "codes-of-conduct": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/codes_of_conduct",
        "title": "Get all codes of conduct",
        "category": "codes-of-conduct",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "citizen_code_of_conduct",
                  "name": "Citizen Code of Conduct",
                  "url": "https://api.github.com/codes_of_conduct/citizen_code_of_conduct",
                  "html_url": "http://citizencodeofconduct.org/"
                },
                {
                  "key": "contributor_covenant",
                  "name": "Contributor Covenant",
                  "url": "https://api.github.com/codes_of_conduct/contributor_covenant",
                  "html_url": "https://www.contributor-covenant.org/version/2/0/code_of_conduct/"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "codes-of-conduct"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/codes_of_conduct/{key}",
        "title": "Get a code of conduct",
        "category": "codes-of-conduct",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "key": "KEY"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key": "contributor_covenant",
                "name": "Contributor Covenant",
                "url": "https://api.github.com/codes_of_conduct/contributor_covenant",
                "body": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n",
                "html_url": "http://contributor-covenant.org/version/1/4/"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "codes-of-conduct"
      }
    ]
  },
  "collaborators": {
    "collaborators": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/collaborators",
        "title": "List repository collaborators",
        "category": "collaborators",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "affiliation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outside",
                "direct",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filter collaborators returned by their affiliation. Can be one of:<br>\n* <code>outside</code>: All outside collaborators of an organization-owned repository.<br>\n* <code>direct</code>: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.<br>\n* <code>all</code>: All collaborators the authenticated user can see.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false,
                  "permissions": {
                    "pull": true,
                    "push": true,
                    "admin": false
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.\nOrganization members with write, maintain, or admin privileges on the organization-owned repository can use this endpoint.</p>\n<p>Team members will include the members of child teams.</p>\n<p>You must authenticate using an access token with the <code>read:org</code> and <code>repo</code> scopes with push access to use this\nendpoint. GitHub Apps must have the <code>members</code> organization permission and <code>metadata</code> repository permission to use this\nendpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/collaborators/{username}",
        "title": "Check if a user is a repository collaborator",
        "category": "collaborators",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if user is a collaborator"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.</p>\n<p>Team members will include the members of child teams.</p>\n<p>You must authenticate using an access token with the <code>read:org</code> and <code>repo</code> scopes with push access to use this\nendpoint. GitHub Apps must have the <code>members</code> organization permission and <code>metadata</code> repository permission to use this\nendpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if user is a collaborator</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if user is not a collaborator</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/collaborators/{username}",
        "title": "Add a repository collaborator",
        "category": "collaborators",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permission to grant the collaborator. <strong>Only valid on organization-owned repositories.</strong> Can be one of:<br>\n* <code>pull</code> - can pull, but not push to or administer this repository.<br>\n* <code>push</code> - can pull and push, but not administer this repository.<br>\n* <code>admin</code> - can pull, push and administer this repository.<br>\n* <code>maintain</code> - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.<br>\n* <code>triage</code> - Recommended for contributors who need to proactively manage issues and pull requests without write access.</p>",
            "enum": [
              "pull",
              "push",
              "admin",
              "maintain",
              "triage"
            ],
            "default": "push",
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:  \n\\* `pull` - can pull, but not push to or administer this repository.  \n\\* `push` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push and administer this repository.  \n\\* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.  \n\\* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"push\""
            ],
            "name": "permissions",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "response-when-a-new-invitation-is-created",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response when a new invitation is created",
              "example": {
                "id": 1,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                },
                "invitee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "inviter": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "permissions": "write",
                "created_at": "2016-06-13T14:52:50-05:00",
                "url": "https://api.github.com/user/repository_invitations/1296269",
                "html_url": "https://github.com/octocat/Hello-World/invitations"
              }
            }
          }
        ],
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Response when a new invitation is created</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response when person is already a collaborator</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "descriptionHTML": "<p>This endpoint triggers <a href=\"https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>\n<p>For more information on permission levels, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization\">Repository permission levels for an organization</a>\". There are restrictions on which permissions can be granted to organization members when an organization base role is in place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the request will fail with:</p>\n<pre><code>Cannot assign {member} permission of {role name}\n</code></pre>\n<p>Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>\n<p>The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#invitations\">repository invitations API endpoints</a>.</p>\n<p><strong>Rate limits</strong></p>\n<p>You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.</p>"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/collaborators/{username}",
        "title": "Remove a repository collaborator",
        "category": "collaborators",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/collaborators/{username}/permission",
        "title": "Get repository permissions for a user",
        "category": "collaborators",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if user has admin permissions",
              "example": {
                "permission": "admin",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Checks the repository permission of a collaborator. The possible repository permissions are <code>admin</code>, <code>write</code>, <code>read</code>, and <code>none</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if user has admin permissions</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "invitations": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/invitations",
        "title": "List repository invitations",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                  },
                  "invitee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "inviter": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "permissions": "write",
                  "created_at": "2016-06-13T14:52:50-05:00",
                  "url": "https://api.github.com/user/repository_invitations/1296269",
                  "html_url": "https://github.com/octocat/Hello-World/invitations",
                  "node_id": "MDQ6VXNlcjE="
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/invitations/{invitation_id}",
        "title": "Update a repository invitation",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>invitation_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permissions that the associated user will have on the repository. Valid values are <code>read</code>, <code>write</code>, <code>maintain</code>, <code>triage</code>, and <code>admin</code>.</p>",
            "enum": [
              "read",
              "write",
              "maintain",
              "triage",
              "admin"
            ],
            "name": "permissions",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "invitation_id": "INVITATION_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                },
                "invitee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "inviter": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "permissions": "write",
                "created_at": "2016-06-13T14:52:50-05:00",
                "expired": false,
                "url": "https://api.github.com/user/repository_invitations/1296269",
                "html_url": "https://github.com/octocat/Hello-World/invitations"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/invitations/{invitation_id}",
        "title": "Delete a repository invitation",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>invitation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "invitation_id": "INVITATION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/repository_invitations",
        "title": "List repository invitations for the authenticated user",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                  },
                  "invitee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "inviter": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "permissions": "write",
                  "created_at": "2016-06-13T14:52:50-05:00",
                  "url": "https://api.github.com/user/repository_invitations/1296269",
                  "html_url": "https://github.com/octocat/Hello-World/invitations",
                  "node_id": "MDQ6VXNlcjE="
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>When authenticating as a user, this endpoint will list all currently open repository invitations for that user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/user/repository_invitations/{invitation_id}",
        "title": "Accept a repository invitation",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>invitation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "invitation_id": "INVITATION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/repository_invitations/{invitation_id}",
        "title": "Decline a repository invitation",
        "category": "collaborators",
        "subcategory": "invitations",
        "parameters": [
          {
            "name": "invitation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>invitation_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "invitation_id": "INVITATION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          }
        ]
      }
    ]
  },
  "commits": {
    "commits": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits",
        "title": "List commits",
        "category": "commits",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sha",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>SHA or branch to start listing commits from. Default: the repository’s default branch (usually <code>master</code>).</p>"
          },
          {
            "name": "path",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Only commits containing this file path will be returned.</p>"
          },
          {
            "name": "author",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>GitHub login or email address by which to filter by commit author.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "until",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only commits before this date will be returned. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                  "commit": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "author": {
                      "name": "Monalisa Octocat",
                      "email": "support@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "support@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "message": "Fix all the bugs",
                    "tree": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    },
                    "comment_count": 0,
                    "verification": {
                      "verified": false,
                      "reason": "unsigned",
                      "signature": null,
                      "payload": null
                    }
                  },
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "committer": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
        "title": "List branches for HEAD commit",
        "category": "commits",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>commit_sha parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "commit_sha": "COMMIT_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "name": "branch_5",
                  "commit": {
                    "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
                  },
                  "protected": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/\">blog post</a> for more details. To access the new endpoints during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.groot-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        "title": "List pull requests associated with a commit",
        "category": "commits",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>commit_sha parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "commit_sha": "COMMIT_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "id": 1,
                  "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                  "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                  "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                  "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "number": 1347,
                  "state": "open",
                  "locked": true,
                  "title": "Amazing new feature",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Please pull these awesome changes in!",
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "active_lock_reason": "too heated",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:01:12Z",
                  "closed_at": "2011-01-26T19:01:12Z",
                  "merged_at": "2011-01-26T19:01:12Z",
                  "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    {
                      "login": "hubot",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/hubot",
                      "html_url": "https://github.com/hubot",
                      "followers_url": "https://api.github.com/users/hubot/followers",
                      "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                      "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                      "organizations_url": "https://api.github.com/users/hubot/orgs",
                      "repos_url": "https://api.github.com/users/hubot/repos",
                      "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/hubot/received_events",
                      "type": "User",
                      "site_admin": true
                    }
                  ],
                  "requested_reviewers": [
                    {
                      "login": "other_user",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/other_user",
                      "html_url": "https://github.com/other_user",
                      "followers_url": "https://api.github.com/users/other_user/followers",
                      "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                      "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                      "organizations_url": "https://api.github.com/users/other_user/orgs",
                      "repos_url": "https://api.github.com/users/other_user/repos",
                      "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/other_user/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "requested_teams": [
                    {
                      "id": 1,
                      "node_id": "MDQ6VGVhbTE=",
                      "url": "https://api.github.com/teams/1",
                      "html_url": "https://github.com/orgs/github/teams/justice-league",
                      "name": "Justice League",
                      "slug": "justice-league",
                      "description": "A great team.",
                      "privacy": "closed",
                      "permission": "admin",
                      "members_url": "https://api.github.com/teams/1/members{/member}",
                      "repositories_url": "https://api.github.com/teams/1/repos",
                      "parent": null
                    }
                  ],
                  "head": {
                    "label": "octocat:new-topic",
                    "ref": "new-topic",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "user": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "repo": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "language": null,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues_count": 0,
                      "is_template": true,
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "allow_rebase_merge": true,
                      "template_repository": null,
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "allow_squash_merge": true,
                      "delete_branch_on_merge": true,
                      "allow_merge_commit": true,
                      "subscribers_count": 42,
                      "network_count": 0,
                      "license": {
                        "key": "mit",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT",
                        "node_id": "MDc6TGljZW5zZW1pdA==",
                        "html_url": "https://github.com/licenses/mit"
                      },
                      "forks": 1,
                      "open_issues": 1,
                      "watchers": 1
                    }
                  },
                  "base": {
                    "label": "octocat:master",
                    "ref": "master",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "user": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "repo": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "language": null,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues_count": 0,
                      "is_template": true,
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "allow_rebase_merge": true,
                      "template_repository": null,
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "allow_squash_merge": true,
                      "delete_branch_on_merge": true,
                      "allow_merge_commit": true,
                      "subscribers_count": 42,
                      "network_count": 0,
                      "license": {
                        "key": "mit",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT",
                        "node_id": "MDc6TGljZW5zZW1pdA==",
                        "html_url": "https://github.com/licenses/mit"
                      },
                      "forks": 1,
                      "open_issues": 1,
                      "watchers": 1
                    }
                  },
                  "_links": {
                    "self": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                    },
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/1347"
                    },
                    "issue": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                    },
                    "comments": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                    },
                    "review_comments": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                    },
                    "review_comment": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                    },
                    "commits": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                    },
                    "statuses": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  },
                  "author_association": "OWNER",
                  "auto_merge": null,
                  "draft": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>Listing branches or pull requests for a commit in the Commits API is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2019-04-11-pulls-branches-for-commit/\">blog post</a> for more details. To access the new endpoints during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.groot-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{ref}",
        "title": "Get a commit",
        "category": "commits",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                "commit": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "author": {
                    "name": "Monalisa Octocat",
                    "email": "mona@github.com",
                    "date": "2011-04-14T16:00:49Z"
                  },
                  "committer": {
                    "name": "Monalisa Octocat",
                    "email": "mona@github.com",
                    "date": "2011-04-14T16:00:49Z"
                  },
                  "message": "Fix all the bugs",
                  "tree": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  },
                  "comment_count": 0,
                  "verification": {
                    "verified": false,
                    "reason": "unsigned",
                    "signature": null,
                    "payload": null
                  }
                },
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "committer": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "parents": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                ],
                "stats": {
                  "additions": 104,
                  "deletions": 4,
                  "total": 108
                },
                "files": [
                  {
                    "filename": "file1.txt",
                    "additions": 10,
                    "deletions": 2,
                    "changes": 12,
                    "status": "modified",
                    "raw_url": "https://github.com/octocat/Hello-World/raw/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
                    "blob_url": "https://github.com/octocat/Hello-World/blob/7ca483543807a51b6079e54ac4cc392bc29ae284/file1.txt",
                    "patch": "@@ -29,7 +29,7 @@\n....."
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the contents of a single commit reference. You must have <code>read</code> access for the repository to use this endpoint.</p>\n<p><strong>Note:</strong> If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.</p>\n<p>You can pass the appropriate <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests\">media type</a> to  fetch <code>diff</code> and <code>patch</code> formats. Diffs with binary data will have no <code>patch</code> property.</p>\n<p>To return only the SHA-1 hash of the commit reference, you can provide the <code>sha</code> custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests\">media type</a> in the <code>Accept</code> header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.</p>\n<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/compare/{basehead}",
        "title": "Compare two commits",
        "category": "commits",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "basehead",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The base branch and head branch to compare. This parameter expects the format <code>{base}...{head}</code>.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "basehead": "BASEHEAD"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/compare/master...topic",
                "html_url": "https://github.com/octocat/Hello-World/compare/master...topic",
                "permalink_url": "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17",
                "diff_url": "https://github.com/octocat/Hello-World/compare/master...topic.diff",
                "patch_url": "https://github.com/octocat/Hello-World/compare/master...topic.patch",
                "base_commit": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                  "commit": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "author": {
                      "name": "Monalisa Octocat",
                      "email": "mona@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "mona@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "message": "Fix all the bugs",
                    "tree": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    },
                    "comment_count": 0,
                    "verification": {
                      "verified": false,
                      "reason": "unsigned",
                      "signature": null,
                      "payload": null
                    }
                  },
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "committer": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  ]
                },
                "merge_base_commit": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                  "commit": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "author": {
                      "name": "Monalisa Octocat",
                      "email": "mona@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "mona@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "message": "Fix all the bugs",
                    "tree": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    },
                    "comment_count": 0,
                    "verification": {
                      "verified": false,
                      "reason": "unsigned",
                      "signature": null,
                      "payload": null
                    }
                  },
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "committer": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  ]
                },
                "status": "behind",
                "ahead_by": 1,
                "behind_by": 2,
                "total_commits": 1,
                "commits": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                    "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                    "commit": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "author": {
                        "name": "Monalisa Octocat",
                        "email": "mona@github.com",
                        "date": "2011-04-14T16:00:49Z"
                      },
                      "committer": {
                        "name": "Monalisa Octocat",
                        "email": "mona@github.com",
                        "date": "2011-04-14T16:00:49Z"
                      },
                      "message": "Fix all the bugs",
                      "tree": {
                        "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                      },
                      "comment_count": 0,
                      "verification": {
                        "verified": false,
                        "reason": "unsigned",
                        "signature": null,
                        "payload": null
                      }
                    },
                    "author": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "committer": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "parents": [
                      {
                        "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                      }
                    ]
                  }
                ],
                "files": [
                  {
                    "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
                    "filename": "file1.txt",
                    "status": "added",
                    "additions": 103,
                    "deletions": 21,
                    "changes": 124,
                    "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
                    "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The <code>basehead</code> param is comprised of two parts: <code>base</code> and <code>head</code>. Both must be branch names in <code>repo</code>. To compare branches across other repositories in the same network as <code>repo</code>, use the format <code>&lt;USERNAME&gt;:branch</code>.</p>\n<p>The response from the API is equivalent to running the <code>git log base..head</code> command; however, commits are returned in chronological order. Pass the appropriate <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests\">media type</a> to fetch diff and patch formats.</p>\n<p>The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a <code>renamed</code> status have a <code>previous_filename</code> field showing the previous filename of the file, and files with a <code>modified</code> status have a <code>patch</code> field showing the changes made to the file.</p>\n<p><strong>Working with large comparisons</strong></p>\n<p>The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits\">List commits</a> to enumerate all commits in the range.</p>\n<p>For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long\nto generate. You can typically resolve this error by using a smaller commit range.</p>\n<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ]
      }
    ],
    "comments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/comments",
        "title": "List commit comments for a repository",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
                  "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                  "id": 1,
                  "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
                  "body": "Great stuff",
                  "path": "file1.txt",
                  "position": 4,
                  "line": 14,
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Commit Comments use <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types\">these custom media types</a>. You can read more about the use of media types in the API <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">here</a>.</p>\n<p>Comments are ordered by ascending ID.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}",
        "title": "Get a commit comment",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
                "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                "id": 1,
                "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
                "body": "Great stuff",
                "path": "file1.txt",
                "position": 4,
                "line": 14,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "author_association": "COLLABORATOR",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}",
        "title": "Update a commit comment",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The contents of the comment</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the comment",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Nice change"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
                "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                "id": 1,
                "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
                "body": "Nice change",
                "path": "file1.txt",
                "position": 4,
                "line": 14,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "author_association": "COLLABORATOR",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}",
        "title": "Delete a commit comment",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "title": "List commit comments",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>commit_sha parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "commit_sha": "COMMIT_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
                  "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                  "id": 1,
                  "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
                  "body": "Great stuff",
                  "path": "file1.txt",
                  "position": 4,
                  "line": 14,
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Use the <code>:commit_sha</code> to specify the commit that will have its comments listed.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "title": "Create a commit comment",
        "category": "commits",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>commit_sha parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The contents of the comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the comment.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Relative path of the file to comment on.</p>",
            "name": "path",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Relative path of the file to comment on.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p>Line index in the diff to comment on.</p>",
            "name": "position",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "Line index in the diff to comment on.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p><strong>Deprecated</strong>. Use <strong>position</strong> parameter instead. Line number in the file to comment on.</p>",
            "name": "line",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "**Deprecated**. Use **position** parameter instead. Line number in the file to comment on.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Great stuff",
                "path": "file1.txt",
                "position": 4,
                "line": 1
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "commit_sha": "COMMIT_SHA"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e#commitcomment-1",
                "url": "https://api.github.com/repos/octocat/Hello-World/comments/1",
                "id": 1,
                "node_id": "MDEzOkNvbW1pdENvbW1lbnQx",
                "body": "Great stuff",
                "path": "file1.txt",
                "position": 4,
                "line": 14,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "author_association": "COLLABORATOR",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Create a comment for a commit using its <code>:commit_sha</code>.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "statuses": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{ref}/status",
        "title": "Get the combined status for a specific reference",
        "category": "commits",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "state": "success",
                "statuses": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "id": 1,
                    "node_id": "MDY6U3RhdHVzMQ==",
                    "state": "success",
                    "description": "Build has completed successfully",
                    "target_url": "https://ci.example.com/1000/output",
                    "context": "continuous-integration/jenkins",
                    "created_at": "2012-07-20T01:19:13Z",
                    "updated_at": "2012-07-20T01:19:13Z"
                  },
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                    "id": 2,
                    "node_id": "MDY6U3RhdHVzMg==",
                    "state": "success",
                    "description": "Testing has completed successfully",
                    "target_url": "https://ci.example.com/2000/output",
                    "context": "security/brakeman",
                    "created_at": "2012-08-20T01:19:13Z",
                    "updated_at": "2012-08-20T01:19:13Z"
                  }
                ],
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "total_count": 2,
                "repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                },
                "commit_url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "url": "https://api.github.com/repos/octocat/Hello-World/6dcb09b5b57875f334f61aebed695e2e4193db5e/status"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.</p>\n<p>Additionally, a combined <code>state</code> is returned. The <code>state</code> is one of:</p>\n<ul>\n<li><strong>failure</strong> if any of the contexts report as <code>error</code> or <code>failure</code></li>\n<li><strong>pending</strong> if there are no statuses or a context is <code>pending</code></li>\n<li><strong>success</strong> if the latest status for all contexts is <code>success</code></li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/commits/{ref}/statuses",
        "title": "List commit statuses for a reference",
        "category": "commits",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                  "id": 1,
                  "node_id": "MDY6U3RhdHVzMQ==",
                  "state": "success",
                  "description": "Build has completed successfully",
                  "target_url": "https://ci.example.com/1000/output",
                  "context": "continuous-integration/jenkins",
                  "created_at": "2012-07-20T01:19:13Z",
                  "updated_at": "2012-07-20T01:19:13Z",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.</p>\n<p>This resource is also available via a legacy route: <code>GET /repos/:owner/:repo/statuses/:ref</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/statuses/{sha}",
        "title": "Create a commit status",
        "category": "commits",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The state of the status. Can be one of <code>error</code>, <code>failure</code>, <code>pending</code>, or <code>success</code>.</p>",
            "enum": [
              "error",
              "failure",
              "pending",
              "success"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.<br>\nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:<br>\n<code>http://ci.example.com/user/repo/build/sha</code></p>",
            "name": "target_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.  \nFor example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:  \n`http://ci.example.com/user/repo/build/sha`",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the status.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the status.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A string label to differentiate this status from the status of other systems. This field is case-insensitive.</p>",
            "default": "default",
            "name": "context",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A string label to differentiate this status from the status of other systems. This field is case-insensitive.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "state": "success",
                "target_url": "https://example.com/build/status",
                "description": "The build succeeded!",
                "context": "continuous-integration/jenkins"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "sha": "SHA"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                "id": 1,
                "node_id": "MDY6U3RhdHVzMQ==",
                "state": "success",
                "description": "Build has completed successfully",
                "target_url": "https://ci.example.com/1000/output",
                "context": "continuous-integration/jenkins",
                "created_at": "2012-07-20T01:19:13Z",
                "updated_at": "2012-07-20T01:19:13Z",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access in a repository can create commit statuses for a given SHA.</p>\n<p>Note: there is a limit of 1000 statuses per <code>sha</code> and <code>context</code> within a repository. Attempts to create more than 1000 statuses will result in a validation error.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      }
    ]
  },
  "deploy-keys": {
    "deploy-keys": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/keys",
        "title": "List deploy keys",
        "category": "deploy-keys",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "key": "ssh-rsa AAA...",
                  "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                  "title": "octocat@octomac",
                  "verified": true,
                  "created_at": "2014-12-10T15:53:42Z",
                  "read_only": true
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "deploy-keys"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/keys",
        "title": "Create a deploy key",
        "category": "deploy-keys",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>A name for the key.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A name for the key.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The contents of the key.</p>",
            "name": "key",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the key.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>If <code>true</code>, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  </p>\n<p>Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"<a href=\"https://docs.github.com/articles/repository-permission-levels-for-an-organization/\">Repository permission levels for an organization</a>\" and \"<a href=\"https://docs.github.com/articles/permission-levels-for-a-user-account-repository/\">Permission levels for a user account repository</a>.\"</p>",
            "name": "read_only",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.  \n  \nDeploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see \"[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)\" and \"[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "octocat@octomac",
                "key": "ssh-rsa AAA...",
                "read_only": true
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "key": "ssh-rsa AAA...",
                "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "title": "octocat@octomac",
                "verified": true,
                "created_at": "2014-12-10T15:53:42Z",
                "read_only": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You can create a read-only deploy key.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "deploy-keys"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/keys/{key_id}",
        "title": "Get a deploy key",
        "category": "deploy-keys",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "key_id": "KEY_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "key": "ssh-rsa AAA...",
                "url": "https://api.github.com/repos/octocat/Hello-World/keys/1",
                "title": "octocat@octomac",
                "verified": true,
                "created_at": "2014-12-10T15:53:42Z",
                "read_only": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "deploy-keys"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/keys/{key_id}",
        "title": "Delete a deploy key",
        "category": "deploy-keys",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "key_id": "KEY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "deploy-keys"
      }
    ]
  },
  "deployments": {
    "deployments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/deployments",
        "title": "List deployments",
        "category": "deployments",
        "subcategory": "deployments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sha",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "descriptionHTML": "<p>The SHA recorded at creation time.</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "descriptionHTML": "<p>The name of the ref. This can be a branch, tag, or SHA.</p>"
          },
          {
            "name": "task",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "none"
            },
            "descriptionHTML": "<p>The name of the task for the deployment (e.g., <code>deploy</code> or <code>deploy:migrations</code>).</p>"
          },
          {
            "name": "environment",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ],
              "default": "none"
            },
            "descriptionHTML": "<p>The name of the environment that was deployed to (e.g., <code>staging</code> or <code>production</code>).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/example/deployments/1",
                  "id": 1,
                  "node_id": "MDEwOkRlcGxveW1lbnQx",
                  "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                  "ref": "topic-branch",
                  "task": "deploy",
                  "payload": {},
                  "original_environment": "staging",
                  "environment": "production",
                  "description": "Deploy request from hubot",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2012-07-20T01:19:13Z",
                  "updated_at": "2012-07-20T01:19:13Z",
                  "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
                  "repository_url": "https://api.github.com/repos/octocat/example",
                  "transient_environment": false,
                  "production_environment": true
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Simple filtering of deployments is available via query parameters:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/deployments",
        "title": "Create a deployment",
        "category": "deployments",
        "subcategory": "deployments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The ref to deploy. This can be a branch, tag, or SHA.</p>",
            "name": "ref",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The ref to deploy. This can be a branch, tag, or SHA.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Specifies a task to execute (e.g., <code>deploy</code> or <code>deploy:migrations</code>).</p>",
            "default": "deploy",
            "name": "task",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.</p>",
            "default": true,
            "name": "auto_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/commits#commit-statuses\">status</a> contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.</p>",
            "items": {
              "type": "string"
            },
            "name": "required_contexts",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The [status](https://docs.github.com/enterprise-server@3.1/rest/reference/commits#commit-statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": true
              },
              {
                "type": "string",
                "description": "JSON payload with extra information about the deployment.",
                "default": ""
              }
            ],
            "name": "payload",
            "in": "body",
            "type": "object or string or ",
            "description": "<p>JSON payload with extra information about the deployment.</p>",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Name for the target deployment environment (e.g., <code>production</code>, <code>staging</code>, <code>qa</code>).</p>",
            "default": "production",
            "name": "environment",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name for the target deployment environment (e.g., `production`, `staging`, `qa`).",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p>Short description of the deployment.</p>",
            "default": "",
            "name": "description",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Short description of the deployment.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: <code>false</code><br>\n<strong>Note:</strong> This parameter requires you to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type.</p>",
            "default": false,
            "name": "transient_environment",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Specifies if the given environment is one that end-users directly interact with. Default: <code>true</code> when <code>environment</code> is <code>production</code> and <code>false</code> otherwise.<br>\n<strong>Note:</strong> This parameter requires you to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type.</p>",
            "name": "production_environment",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "simple-example",
            "request": {
              "contentType": "application/json",
              "description": "Simple example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "ref": "topic-branch",
                "payload": "{ \"deploy\": \"migrate\" }",
                "description": "Deploy request from hubot"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Simple example",
              "example": {
                "url": "https://api.github.com/repos/octocat/example/deployments/1",
                "id": 1,
                "node_id": "MDEwOkRlcGxveW1lbnQx",
                "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                "ref": "topic-branch",
                "task": "deploy",
                "payload": {},
                "original_environment": "staging",
                "environment": "production",
                "description": "Deploy request from hubot",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2012-07-20T01:19:13Z",
                "updated_at": "2012-07-20T01:19:13Z",
                "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
                "repository_url": "https://api.github.com/repos/octocat/example",
                "transient_environment": false,
                "production_environment": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>Deployments offer a few configurable parameters with certain defaults.</p>\n<p>The <code>ref</code> parameter can be any named branch, tag, or SHA. At GitHub Enterprise Server we often deploy branches and verify them\nbefore we merge a pull request.</p>\n<p>The <code>environment</code> parameter allows deployments to be issued to different runtime environments. Teams often have\nmultiple environments for verifying their applications, such as <code>production</code>, <code>staging</code>, and <code>qa</code>. This parameter\nmakes it easier to track which environments have requested deployments. The default environment is <code>production</code>.</p>\n<p>The <code>auto_merge</code> parameter is used to ensure that the requested ref is not behind the repository's default branch. If\nthe ref <em>is</em> behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,\nthe API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will\nreturn a failure response.</p>\n<p>By default, <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/commits#commit-statuses\">commit statuses</a> for every submitted context must be in a <code>success</code>\nstate. The <code>required_contexts</code> parameter allows you to specify a subset of contexts that must be <code>success</code>, or to\nspecify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do\nnot require any contexts or create any commit statuses, the deployment will always succeed.</p>\n<p>The <code>payload</code> parameter is available for any extra information that a deployment system might need. It is a JSON text\nfield that will be passed on when a deployment event is dispatched.</p>\n<p>The <code>task</code> parameter is used by the deployment system to allow different execution paths. In the web world this might\nbe <code>deploy:migrations</code> to run schema changes on the system. In the compiled world this could be a flag to compile an\napplication with debugging enabled.</p>\n<p>Users with <code>repo</code> or <code>repo_deployment</code> scopes can create a deployment for a given ref.</p>\n<h4 id=\"merged-branch-response\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#merged-branch-response\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Merged branch response</h4>\n<p>You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating\na deployment. This auto-merge happens when:</p>\n<ul>\n<li>Auto-merge option is enabled in the repository</li>\n<li>Topic branch does not include the latest changes on the base branch, which is <code>master</code> in the response example</li>\n<li>There are no merge conflicts</li>\n</ul>\n<p>If there are no new commits in the base branch, a new request to create a deployment should give a successful\nresponse.</p>\n<h4 id=\"merge-conflict-response\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#merge-conflict-response\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Merge conflict response</h4>\n<p>This error happens when the <code>auto_merge</code> option is enabled and when the default branch (in this case <code>master</code>), can't\nbe merged into the branch that's being deployed (in this case <code>topic-branch</code>), due to merge conflicts.</p>\n<h4 id=\"failed-commit-status-checks\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#failed-commit-status-checks\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Failed commit status checks</h4>\n<p>This error happens when the <code>required_contexts</code> parameter indicates that one or more contexts need to have a <code>success</code>\nstatus for the commit to be deployed, but one or more of the required contexts do not have a state of <code>success</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "202",
            "description": "<p>Merged branch response</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict when there is a merge conflict or the commit's status checks failed</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/deployments/{deployment_id}",
        "title": "Get a deployment",
        "category": "deployments",
        "subcategory": "deployments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>deployment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "deployment_id": "DEPLOYMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/example/deployments/1",
                "id": 1,
                "node_id": "MDEwOkRlcGxveW1lbnQx",
                "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                "ref": "topic-branch",
                "task": "deploy",
                "payload": {},
                "original_environment": "staging",
                "environment": "production",
                "description": "Deploy request from hubot",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2012-07-20T01:19:13Z",
                "updated_at": "2012-07-20T01:19:13Z",
                "statuses_url": "https://api.github.com/repos/octocat/example/deployments/1/statuses",
                "repository_url": "https://api.github.com/repos/octocat/example",
                "transient_environment": false,
                "production_environment": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>New features in the Deployments API on GitHub are currently available during a public beta. Please see the <a href=\"https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/\">blog post</a> for full details.</p>\n<p>To access the new <code>environment</code> parameter, the two new values for the <code>state</code> parameter (<code>in_progress</code> and <code>queued</code>), and use <code>auto_inactive</code> on production deployments during the public beta period, you must provide the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.flash-preview+json</code></pre>",
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/deployments/{deployment_id}",
        "title": "Delete a deployment",
        "category": "deployments",
        "subcategory": "deployments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>deployment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "deployment_id": "DEPLOYMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple deployments will always have an active deployment. Anyone with <code>repo</code> or <code>repo_deployment</code> scopes can delete a deployment.</p>\n<p>To set a deployment as inactive, you must:</p>\n<ul>\n<li>Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.</li>\n<li>Mark the active deployment as inactive by adding any non-successful deployment status.</li>\n</ul>\n<p>For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/#create-a-deployment\">Create a deployment</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-deployment-status\">Create a deployment status</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "statuses": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "title": "List deployment statuses",
        "category": "deployments",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>deployment_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "deployment_id": "DEPLOYMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
                  "id": 1,
                  "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
                  "state": "success",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "description": "Deployment finished successfully.",
                  "environment": "production",
                  "target_url": "https://example.com/deployment/42/output",
                  "created_at": "2012-07-20T01:19:13Z",
                  "updated_at": "2012-07-20T01:19:13Z",
                  "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
                  "repository_url": "https://api.github.com/repos/octocat/example",
                  "environment_url": "https://test-branch.lab.acme.com",
                  "log_url": "https://example.com/deployment/42/output"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Users with pull access can view deployment statuses for a deployment:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>New features in the Deployments API on GitHub are currently available during a public beta. Please see the <a href=\"https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/\">blog post</a> for full details.</p>\n<p>To access the new <code>environment</code> parameter, the two new values for the <code>state</code> parameter (<code>in_progress</code> and <code>queued</code>), and use <code>auto_inactive</code> on production deployments during the public beta period, you must provide the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.flash-preview+json</code></pre>",
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "title": "Create a deployment status",
        "category": "deployments",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>deployment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The state of the status. Can be one of <code>error</code>, <code>failure</code>, <code>inactive</code>, <code>in_progress</code>, <code>queued</code>, <code>pending</code>, or <code>success</code>. <strong>Note:</strong> To use the <code>inactive</code> state, you must provide the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type. When you set a transient deployment to <code>inactive</code>, the deployment will be shown as <code>destroyed</code> in GitHub.</p>",
            "enum": [
              "error",
              "failure",
              "inactive",
              "in_progress",
              "queued",
              "pending",
              "success"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued`, `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. <strong>Note:</strong> It's recommended to use the <code>log_url</code> parameter, which replaces <code>target_url</code>.</p>",
            "default": "",
            "name": "target_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The full URL of the deployment's output. This parameter replaces <code>target_url</code>. We will continue to accept <code>target_url</code> to support legacy uses, but we recommend replacing <code>target_url</code> with <code>log_url</code>. Setting <code>log_url</code> will automatically set <code>target_url</code> to the same value. Default: <code>\"\"</code><br>\n<strong>Note:</strong> This parameter requires you to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type.</p>",
            "default": "",
            "name": "log_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the status. The maximum description length is 140 characters.</p>",
            "default": "",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the status. The maximum description length is 140 characters.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Name for the target deployment environment, which can be changed when setting a deploy status. For example, <code>production</code>, <code>staging</code>, or <code>qa</code>.</p>",
            "enum": [
              "production",
              "staging",
              "qa"
            ],
            "name": "environment",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Sets the URL for accessing your environment. Default: <code>\"\"</code><br>\n<strong>Note:</strong> This parameter requires you to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type.</p>",
            "default": "",
            "name": "environment_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Sets the URL for accessing your environment. Default: `\"\"`  \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Adds a new <code>inactive</code> status to all prior non-transient, non-production environment deployments with the same repository and <code>environment</code> name as the created status's deployment. An <code>inactive</code> status is only added to deployments that had a <code>success</code> state. Default: <code>true</code>\n<strong>Note:</strong> This parameter requires you to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments\"><code>application/vnd.github.ant-man-preview+json</code></a> custom media type.</p>",
            "name": "auto_inactive",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true` \n**Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/enterprise-server@3.1/rest/overview/api-previews#enhanced-deployments) custom media type.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "environment": "production",
                "state": "success",
                "log_url": "https://example.com/deployment/42/output",
                "description": "Deployment finished successfully."
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "deployment_id": "DEPLOYMENT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
                "id": 1,
                "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
                "state": "success",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "description": "Deployment finished successfully.",
                "environment": "production",
                "target_url": "https://example.com/deployment/42/output",
                "created_at": "2012-07-20T01:19:13Z",
                "updated_at": "2012-07-20T01:19:13Z",
                "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
                "repository_url": "https://api.github.com/repos/octocat/example",
                "environment_url": "https://test-branch.lab.acme.com",
                "log_url": "https://example.com/deployment/42/output"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Users with <code>push</code> access can create deployment statuses for a given deployment.</p>\n<p>GitHub Apps require <code>read &#x26; write</code> access to \"Deployments\" and <code>read-only</code> access to \"Repo contents\" (for private repos). OAuth Apps require the <code>repo_deployment</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>New features in the Deployments API on GitHub are currently available during a public beta. Please see the <a href=\"https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/\">blog post</a> for full details.</p>\n<p>To access the new <code>environment</code> parameter, the two new values for the <code>state</code> parameter (<code>in_progress</code> and <code>queued</code>), and use <code>auto_inactive</code> on production deployments during the public beta period, you must provide the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.flash-preview+json</code></pre>",
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
        "title": "Get a deployment status",
        "category": "deployments",
        "subcategory": "statuses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "deployment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>deployment_id parameter</p>"
          },
          {
            "name": "status_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "deployment_id": "DEPLOYMENT_ID",
                "status_id": "STATUS_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/example/deployments/42/statuses/1",
                "id": 1,
                "node_id": "MDE2OkRlcGxveW1lbnRTdGF0dXMx",
                "state": "success",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "description": "Deployment finished successfully.",
                "environment": "production",
                "target_url": "https://example.com/deployment/42/output",
                "created_at": "2012-07-20T01:19:13Z",
                "updated_at": "2012-07-20T01:19:13Z",
                "deployment_url": "https://api.github.com/repos/octocat/example/deployments/42",
                "repository_url": "https://api.github.com/repos/octocat/example",
                "environment_url": "https://test-branch.lab.acme.com",
                "log_url": "https://example.com/deployment/42/output"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Users with pull access can view a deployment status for a deployment:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>New features in the Deployments API on GitHub are currently available during a public beta. Please see the <a href=\"https://developer.github.com/changes/2018-10-16-deployments-environments-states-and-auto-inactive-updates/\">blog post</a> for full details.</p>\n<p>To access the new <code>environment</code> parameter, the two new values for the <code>state</code> parameter (<code>in_progress</code> and <code>queued</code>), and use <code>auto_inactive</code> on production deployments during the public beta period, you must provide the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.flash-preview+json</code></pre>",
          "<p>The <code>inactive</code> state and the <code>log_url</code>, <code>environment_url</code>, and <code>auto_inactive</code> parameters are currently available for developers to preview. Please see the <a href=\"https://developer.github.com/changes/2016-04-06-deployment-and-deployment-status-enhancements\">blog post</a> for full details.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.ant-man-preview+json</code></pre>"
        ]
      }
    ]
  },
  "emojis": {
    "emojis": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/emojis",
        "title": "Get emojis",
        "category": "emojis",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "200",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all the emojis available to use on GitHub Enterprise Server.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "emojis"
      }
    ]
  },
  "enterprise-admin": {
    "admin-stats": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/all",
        "title": "Get all statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "repos": {
                  "total_repos": 212,
                  "root_repos": 194,
                  "fork_repos": 18,
                  "org_repos": 51,
                  "total_pushes": 3082,
                  "total_wikis": 15
                },
                "hooks": {
                  "total_hooks": 27,
                  "active_hooks": 23,
                  "inactive_hooks": 4
                },
                "pages": {
                  "total_pages": 36
                },
                "orgs": {
                  "total_orgs": 33,
                  "disabled_orgs": 0,
                  "total_teams": 60,
                  "total_team_members": 314
                },
                "users": {
                  "total_users": 254,
                  "admin_users": 45,
                  "suspended_users": 21
                },
                "pulls": {
                  "total_pulls": 86,
                  "merged_pulls": 60,
                  "mergeable_pulls": 21,
                  "unmergeable_pulls": 3
                },
                "issues": {
                  "total_issues": 179,
                  "open_issues": 83,
                  "closed_issues": 96
                },
                "milestones": {
                  "total_milestones": 7,
                  "open_milestones": 6,
                  "closed_milestones": 1
                },
                "gists": {
                  "total_gists": 178,
                  "private_gists": 151,
                  "public_gists": 25
                },
                "comments": {
                  "total_commit_comments": 6,
                  "total_gist_comments": 28,
                  "total_issue_comments": 366,
                  "total_pull_request_comments": 30
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/comments",
        "title": "Get comment statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/gists",
        "title": "Get gist statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/hooks",
        "title": "Get hooks statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/issues",
        "title": "Get issue statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/milestones",
        "title": "Get milestone statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/orgs",
        "title": "Get organization statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/pages",
        "title": "Get pages statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/pulls",
        "title": "Get pull request statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/repos",
        "title": "Get repository statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/stats/users",
        "title": "Get users statistics",
        "category": "enterprise-admin",
        "subcategory": "admin-stats",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "announcement": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/announcement",
        "title": "Get the global announcement banner",
        "category": "enterprise-admin",
        "subcategory": "announcement",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "announcement": "Very **important** announcement about _nothing_.",
                "expires_at": "2021-01-01T00:00:00.000+00:00"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the current message and expiration date of the global announcement banner in your enterprise.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/enterprise/announcement",
        "title": "Set the global announcement banner",
        "category": "enterprise-admin",
        "subcategory": "announcement",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax\">Basic writing and formatting syntax</a>.\"</p>",
            "examples": [
              "Very **important** announcement about _nothing_."
            ],
            "name": "announcement",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The announcement text in GitHub Flavored Markdown. For more information about GitHub Flavored Markdown, see \"[Basic writing and formatting syntax](https://docs.github.com/enterprise-server@3.1/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax).\"",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "format": "date-time",
            "description": "<p>The time at which the announcement expires. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>. To set an announcement that never expires, omit this parameter, set it to <code>null</code>, or set it to an empty string.</p>",
            "examples": [
              "\"2021-01-01T00:00:00.000-07:00\""
            ],
            "name": "expires_at",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "The time at which the announcement expires. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. To set an announcement that never expires, omit this parameter, set it to `null`, or set it to an empty string.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "announcement": "Very **important** announcement about _nothing_.",
                "expires_at": "2021-01-01T00:00:00.000+00:00"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Sets the message and expiration time for the global announcement banner in your enterprise.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/enterprise/announcement",
        "title": "Remove the global announcement banner",
        "category": "enterprise-admin",
        "subcategory": "announcement",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes the global announcement banner in your enterprise.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "global-webhooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/hooks",
        "title": "List global webhooks",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "type": "Global",
                  "id": 1,
                  "name": "web",
                  "active": true,
                  "events": [
                    "organization",
                    "user"
                  ],
                  "config": {
                    "url": "https://example.com",
                    "content_type": "json",
                    "insecure_ssl": "0",
                    "secret": "********"
                  },
                  "updated_at": "2017-12-07T00:14:59Z",
                  "created_at": "2017-12-07T00:14:59Z",
                  "url": "https://api.github.com/admin/hooks/1",
                  "ping_url": "https://api.github.com/admin/hooks/1/pings"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/hooks",
        "title": "Create a global webhook",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.superpro-preview+json"
            },
            "required": true,
            "descriptionHTML": "<p>This API is under preview and subject to change.</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. Must be passed as \"web\".</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Must be passed as \"web\".",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p><strong>Required</strong>. Key/value pairs to provide settings for this webhook.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value in the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\"><code>X-Hub-Signature</code></a> header.</p>",
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header.",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "type": "string",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "name": "insecure_ssl",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                "childParamsGroups": []
              }
            },
            "required": [
              "url"
            ],
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook.",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value in the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\"><code>X-Hub-Signature</code></a> header.</p>",
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "name": "insecure_ssl",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> that trigger this webhook. A global webhook can be triggered by <code>user</code> and <code>organization</code> events. Default: <code>user</code> and <code>organization</code>.</p>",
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "web",
                "events": [
                  "organization",
                  "user"
                ],
                "config": {
                  "url": "https://example.com/webhook",
                  "content_type": "json",
                  "secret": "secret"
                }
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Global",
                "id": 1,
                "name": "web",
                "active": true,
                "events": [
                  "organization",
                  "user"
                ],
                "config": {
                  "url": "https://example.com",
                  "content_type": "json",
                  "insecure_ssl": "0",
                  "secret": "********"
                },
                "updated_at": "2017-12-07T00:14:59Z",
                "created_at": "2017-12-07T00:14:59Z",
                "url": "https://api.github.com/admin/hooks/1",
                "ping_url": "https://api.github.com/admin/hooks/1/pings"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/hooks/{hook_id}",
        "title": "Get a global webhook",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.superpro-preview+json"
            },
            "required": true,
            "descriptionHTML": "<p>This API is under preview and subject to change.</p>"
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Global",
                "id": 1,
                "name": "web",
                "active": true,
                "events": [
                  "organization",
                  "user"
                ],
                "config": {
                  "url": "https://example.com",
                  "content_type": "json",
                  "insecure_ssl": "0",
                  "secret": "********"
                },
                "updated_at": "2017-12-07T00:14:59Z",
                "created_at": "2017-12-07T00:14:59Z",
                "url": "https://api.github.com/admin/hooks/1",
                "ping_url": "https://api.github.com/admin/hooks/1/pings"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/hooks/{hook_id}",
        "title": "Update a global webhook",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "accept",
            "in": "header",
            "schema": {
              "type": "string",
              "default": "application/vnd.github.superpro-preview+json"
            },
            "required": true,
            "descriptionHTML": "<p>This API is under preview and subject to change.</p>"
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "object",
            "description": "<p>Key/value pairs to provide settings for this webhook.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value in the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\"><code>X-Hub-Signature</code></a> header.</p>",
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header.",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "type": "string",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "name": "insecure_ssl",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                "childParamsGroups": []
              }
            },
            "required": [
              "url"
            ],
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook.",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value in the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\"><code>X-Hub-Signature</code></a> header.</p>",
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value in the [`X-Hub-Signature`](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers) header.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "name": "insecure_ssl",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> that trigger this webhook. A global webhook can be triggered by <code>user</code> and <code>organization</code> events. Default: <code>user</code> and <code>organization</code>.</p>",
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) that trigger this webhook. A global webhook can be triggered by `user` and `organization` events. Default: `user` and `organization`.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "events": [
                  "organization"
                ],
                "config": {
                  "url": "https://example.com/webhook"
                }
              },
              "parameters": {
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Global",
                "id": 1,
                "name": "web",
                "active": true,
                "events": [
                  "organization"
                ],
                "config": {
                  "url": "https://example.com",
                  "content_type": "form",
                  "insecure_ssl": "0"
                },
                "updated_at": "2017-12-07T00:14:59Z",
                "created_at": "2017-12-07T00:14:59Z",
                "url": "https://api.github.com/admin/hooks/1",
                "ping_url": "https://api.github.com/admin/hooks/1/pings"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Parameters that are not provided will be overwritten with the default value or removed if no default exists.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/hooks/{hook_id}",
        "title": "Delete a global webhook",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/hooks/{hook_id}/pings",
        "title": "Ping a global webhook",
        "category": "enterprise-admin",
        "subcategory": "global-webhooks",
        "parameters": [
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>This will trigger a <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event\">ping event</a> to be sent to the webhook.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#global-webhooks\">Global Webhooks API</a> is currently available for developers to preview. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.superpro-preview+json</code></pre>"
        ]
      }
    ],
    "ldap": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/ldap/teams/{team_id}/mapping",
        "title": "Update LDAP mapping for a team",
        "category": "enterprise-admin",
        "subcategory": "ldap",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://www.ldap.com/ldap-dns-and-rdns\">distinguished name</a> (DN) of the LDAP entry to map to a team.</p>",
            "name": "ldap_dn",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com"
              },
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "ldap_dn": "cn=Enterprise Ops,ou=teams,dc=github,dc=com",
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "parent": null
              }
            }
          }
        ],
        "descriptionHTML": "<p>Updates the <a href=\"https://www.ldap.com/ldap-dns-and-rdns\">distinguished name</a> (DN) of the LDAP entry to map to a team. <a href=\"https://docs.github.com/enterprise/admin/guides/user-management/using-ldap/#enabling-ldap-sync\">LDAP synchronization</a> must be enabled to map LDAP entries to a team. Use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams/#create-a-team\">Create a team</a> endpoint to create a team with LDAP mapping.</p>\n<p>If you pass the <code>hellcat-preview</code> media type, you can also update the LDAP mapping of a child team.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The Nested Teams API is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2017-08-30-preview-nested-teams\">blog post</a> for full details. To access the API, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.hellcat-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/ldap/teams/{team_id}/sync",
        "title": "Sync LDAP mapping for a team",
        "category": "enterprise-admin",
        "subcategory": "ldap",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "status": "queued"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that this API call does not automatically initiate an LDAP sync. Rather, if a <code>201</code> is returned, the sync job is queued successfully, and is performed when the instance is ready.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/ldap/users/{username}/mapping",
        "title": "Update LDAP mapping for a user",
        "category": "enterprise-admin",
        "subcategory": "ldap",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://www.ldap.com/ldap-dns-and-rdns\">distinguished name</a> (DN) of the LDAP entry to map to a team.</p>",
            "name": "ldap_dn",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              },
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com",
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "twitter_username": "monatheoctocat",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z",
                "private_gists": 81,
                "total_private_repos": 100,
                "owned_private_repos": 100,
                "disk_usage": 10000,
                "collaborators": 8,
                "two_factor_authentication": true,
                "plan": {
                  "name": "Medium",
                  "space": 400,
                  "private_repos": 20,
                  "collaborators": 0
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/ldap/users/{username}/sync",
        "title": "Sync LDAP mapping for a user",
        "category": "enterprise-admin",
        "subcategory": "ldap",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "status": "queued"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that this API call does not automatically initiate an LDAP sync. Rather, if a <code>201</code> is returned, the sync job is queued successfully, and is performed when the instance is ready.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      }
    ],
    "license": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/enterprise/settings/license",
        "title": "Get license information",
        "category": "enterprise-admin",
        "subcategory": "license",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "seats": 1400,
                "seats_used": 1316,
                "seats_available": 84,
                "kind": "standard",
                "days_until_expiration": 365,
                "expire_at": "2016/02/06 12:41:52 -0600"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "management-console": [
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "get",
        "requestPath": "/setup/api/configcheck",
        "title": "Get the configuration status",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "status": "running",
                "progress": [
                  {
                    "status": "DONE",
                    "key": "Appliance core components"
                  },
                  {
                    "status": "DONE",
                    "key": "GitHub utilities"
                  },
                  {
                    "status": "DONE",
                    "key": "GitHub applications"
                  },
                  {
                    "status": "CONFIGURING",
                    "key": "GitHub services"
                  },
                  {
                    "status": "PENDING",
                    "key": "Reloading appliance services"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint allows you to check the status of the most recent configuration process:</p>\n<p>Note that you may need to wait several seconds after you start a process before you can check its status.</p>\n<p>The different statuses are:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Status</th><th>Description</th></tr></thead><tbody><tr><td><code>PENDING</code></td><td>The job has not started yet</td></tr><tr><td><code>CONFIGURING</code></td><td>The job is running</td></tr><tr><td><code>DONE</code></td><td>The job has finished correctly</td></tr><tr><td><code>FAILED</code></td><td>The job has finished unexpectedly</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "post",
        "requestPath": "/setup/api/configure",
        "title": "Start a configuration process",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint allows you to start a configuration process at any time for your updated settings to take effect:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "get",
        "requestPath": "/setup/api/maintenance",
        "title": "Get the maintenance status",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "status": "scheduled",
                "scheduled_time": "Tuesday, January 22 at 15:34 -0800",
                "connection_services": [
                  {
                    "name": "git operations",
                    "number": 0
                  },
                  {
                    "name": "mysql queries",
                    "number": 233
                  },
                  {
                    "name": "aqueduct jobs",
                    "number": 34
                  },
                  {
                    "name": "resque jobs",
                    "number": 54
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Check your installation's maintenance status:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "post",
        "requestPath": "/setup/api/maintenance",
        "title": "Enable or disable maintenance mode",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. A JSON string with the attributes <code>enabled</code> and <code>when</code>.</p>\n<p>The possible values for <code>enabled</code> are <code>true</code> and <code>false</code>. When it's <code>false</code>, the attribute <code>when</code> is ignored and the maintenance mode is turned off. <code>when</code> defines the time period when the maintenance was enabled.</p>\n<p>The possible values for <code>when</code> are <code>now</code> or any date parseable by <a href=\"https://github.com/mojombo/chronic\">mojombo/chronic</a>.</p>",
            "name": "maintenance",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A JSON string with the attributes `enabled` and `when`.\n\nThe possible values for `enabled` are `true` and `false`. When it's `false`, the attribute `when` is ignored and the maintenance mode is turned off. `when` defines the time period when the maintenance was enabled.\n\nThe possible values for `when` are `now` or any date parseable by [mojombo/chronic](https://github.com/mojombo/chronic).",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "maintenance": "{\"enabled\":true, \"when\":\"now\"}"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "status": "scheduled",
                "scheduled_time": "Tuesday, January 22 at 15:34 -0800",
                "connection_services": [
                  {
                    "name": "git operations",
                    "number": 0
                  },
                  {
                    "name": "mysql queries",
                    "number": 233
                  },
                  {
                    "name": "aqueduct jobs",
                    "number": 34
                  },
                  {
                    "name": "resque jobs",
                    "number": 54
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "get",
        "requestPath": "/setup/api/settings",
        "title": "Get settings",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "enterprise": {
                  "private_mode": false,
                  "public_pages": false,
                  "subdomain_isolation": true,
                  "signup_enabled": false,
                  "github_hostname": "ghe.local",
                  "identicons_host": "dotcom",
                  "http_proxy": null,
                  "auth_mode": "default",
                  "expire_sessions": false,
                  "admin_password": null,
                  "configuration_id": 1401777404,
                  "configuration_run_count": 4,
                  "avatar": {
                    "enabled": false,
                    "uri": ""
                  },
                  "customer": {
                    "name": "GitHub",
                    "email": "stannis@themannis.biz",
                    "uuid": "af6cac80-e4e1-012e-d822-1231380e52e9",
                    "secret_key_data": "-----BEGIN PGP PRIVATE KEY BLOCK-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\nlQcYBE5TCgsBEACk4yHpUcapplebaumBMXYMiLF+nCQ0lxpx...\n-----END PGP PRIVATE KEY BLOCK-----\n",
                    "public_key_data": "-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\nmI0ETqzZYgEEALSe6snowdenXyqvLfSQ34HWD6C7....\n-----END PGP PUBLIC KEY BLOCK-----\n"
                  },
                  "license": {
                    "seats": 0,
                    "evaluation": false,
                    "perpetual": false,
                    "unlimited_seating": true,
                    "support_key": "ssh-rsa AAAAB3N....",
                    "ssh_allowed": true,
                    "cluster_support": false,
                    "expire_at": "2016-04-27T00:00:00-07:00"
                  },
                  "github_ssl": {
                    "enabled": false,
                    "cert": null,
                    "key": null
                  },
                  "ldap": {
                    "host": null,
                    "port": 0,
                    "base": [],
                    "uid": null,
                    "bind_dn": null,
                    "password": null,
                    "method": "Plain",
                    "search_strategy": "detect",
                    "user_groups": [],
                    "admin_group": null,
                    "virtual_attribute_enabled": false,
                    "recursive_group_search": false,
                    "posix_support": true,
                    "user_sync_emails": false,
                    "user_sync_keys": false,
                    "user_sync_interval": 4,
                    "team_sync_interval": 4,
                    "sync_enabled": false,
                    "reconciliation": {
                      "user": null,
                      "org": null
                    },
                    "profile": {
                      "uid": "uid",
                      "name": null,
                      "mail": null,
                      "key": null
                    }
                  },
                  "cas": {
                    "url": null
                  },
                  "saml": {
                    "sso_url": null,
                    "certificate": null,
                    "certificate_path": null,
                    "issuer": null,
                    "idp_initiated_sso": false,
                    "disable_admin_demote": false
                  },
                  "github_oauth": {
                    "client_id": "12313412",
                    "client_secret": "kj123131132",
                    "organization_name": "Homestar Runners",
                    "organization_team": "homestarrunners/characters"
                  },
                  "smtp": {
                    "enabled": true,
                    "address": "smtp.example.com",
                    "authentication": "plain",
                    "port": "1234",
                    "domain": "blah",
                    "username": "foo",
                    "user_name": "mr_foo",
                    "enable_starttls_auto": true,
                    "password": "bar",
                    "discard-to-noreply-address": true,
                    "support_address": "enterprise@github.com",
                    "support_address_type": "email",
                    "noreply_address": "noreply@github.com"
                  },
                  "ntp": {
                    "primary_server": "0.pool.ntp.org",
                    "secondary_server": "1.pool.ntp.org"
                  },
                  "timezone": null,
                  "snmp": {
                    "enabled": false,
                    "community": ""
                  },
                  "syslog": {
                    "enabled": false,
                    "server": null,
                    "protocol_name": "udp"
                  },
                  "assets": null,
                  "pages": {
                    "enabled": true
                  },
                  "collectd": {
                    "enabled": false,
                    "server": null,
                    "port": 0,
                    "encryption": null,
                    "username": null,
                    "password": null
                  },
                  "mapping": {
                    "enabled": true,
                    "tileserver": null,
                    "basemap": "company.map-qsz2zrvs",
                    "token": null
                  },
                  "load_balancer": null
                },
                "run_list": [
                  "recipe[enterprise-configure]"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the settings for your instance. To change settings, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#set-settings\">Set settings endpoint</a>.</p>\n<p><strong>Note:</strong> You cannot retrieve the management console password with the Enterprise administration API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "put",
        "requestPath": "/setup/api/settings",
        "title": "Set settings",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#get-settings\">Get settings endpoint</a>.</p>",
            "name": "settings",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A JSON string with the new settings. Note that you only need to pass the specific settings you want to modify. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#get-settings).",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "settings": "{ \"enterprise\": { \"public_pages\": true }}"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Applies settings on your instance. For a list of the available settings, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#get-settings\">Get settings endpoint</a>.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</li>\n<li>You cannot set the management console password with the Enterprise administration API. Use the <code>ghe-set-password</code> utility to change the management console password. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/admin/configuration/configuring-your-enterprise/command-line-utilities#ghe-set-password\">Command-line utilities</a>.\"</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "get",
        "requestPath": "/setup/api/settings/authorized-keys",
        "title": "Get all authorized SSH keys",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "post",
        "requestPath": "/setup/api/settings/authorized-keys",
        "title": "Add an authorized SSH key",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The public SSH key.</p>",
            "name": "authorized_key",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The public SSH key.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "delete",
        "requestPath": "/setup/api/settings/authorized-keys",
        "title": "Remove an authorized SSH key",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The public SSH key.</p>",
            "name": "authorized_key",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The public SSH key.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "authorized_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQCssTL/Vtu/ODLTj0VtZoRAbvf7uiv5997GyDq0MoAZUjb5jmA5wYe2/wF6sFuhiZTnZoF1ZtCHunPp0hM/GHrn6VySBhNncx14YO8FPt1CIhEeRMSEjUK9cY3xAbS365oXY8vnUHJsS9+1tr/2bx/+4NJfcUt/Ezf1OR/0LStQXw=="
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                },
                {
                  "key": "ssh-rsa AAAAB3NzaC1yc2EAAAAB...",
                  "pretty-print": "ssh-rsa 01:14:0f:f2:0f:e2:fe:e8:f4:72:62:af:75:f7:1a:88:3e:04:92:64"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "post",
        "requestPath": "/setup/api/start",
        "title": "Create a GitHub license",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The content of your <em>.ghl</em> license file.</p>",
            "name": "license",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The content of your _.ghl_ license file.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>You <strong>must</strong> provide a password <em>only if</em> you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter.</p>",
            "name": "password",
            "in": "body",
            "rawType": "string",
            "rawDescription": "You **must** provide a password _only if_ you are uploading your license for the first time. If you previously set a password through the web interface, you don't need this parameter.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>An optional JSON string containing the installation settings. For a list of the available settings, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#get-settings\">Get settings endpoint</a>.</p>",
            "name": "settings",
            "in": "body",
            "rawType": "string",
            "rawDescription": "An optional JSON string containing the installation settings. For a list of the available settings, see the [Get settings endpoint](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#get-settings).",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>When you boot a GitHub instance for the first time, you can use the following endpoint to upload a license.</p>\n<p>Note that you need to <code>POST</code> to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#start-a-configuration-process\"><code>/setup/api/configure</code></a> to start the actual configuration process.</p>\n<p>When using this endpoint, your GitHub instance must have a password set. This can be accomplished two ways:</p>\n<ol>\n<li>If you're working directly with the API before accessing the web interface, you must pass in the password parameter to set your password.</li>\n<li>If you set up your instance via the web interface before accessing the API, your calls to this endpoint do not need the password parameter.</li>\n</ol>\n<p><strong>Note:</strong> The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME",
        "verb": "post",
        "requestPath": "/setup/api/upgrade",
        "title": "Upgrade a license",
        "category": "enterprise-admin",
        "subcategory": "management-console",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The content of your new <em>.ghl</em> license file.</p>",
            "name": "license",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The content of your new _.ghl_ license file.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/x-www-form-urlencoded",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "202",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This API upgrades your license and also triggers the configuration process.</p>\n<p><strong>Note:</strong> The request body for this operation must be submitted as <code>application/x-www-form-urlencoded</code> data. You can submit a parameter value as a string, or you can use a tool such as <code>curl</code> to submit a parameter value as the contents of a text file. For more information, see the <a href=\"https://curl.se/docs/manpage.html#--data-urlencode\"><code>curl</code> documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ]
      }
    ],
    "org-pre-receive-hooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/pre-receive-hooks",
        "title": "List pre-receive hooks for an organization",
        "category": "enterprise-admin",
        "subcategory": "org-pre-receive-hooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>The sort order for the response collection.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 42,
                  "name": "Check Commits",
                  "enforcement": "disabled",
                  "configuration_url": "https://github.example.com/api/v3/admin/pre-receive-hooks/42",
                  "allow_downstream_configuration": true
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List all pre-receive hooks that are enabled or testing for this organization as well as any disabled hooks that can be configured at the organization level. Globally disabled pre-receive hooks that do not allow downstream configuration are not listed.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Get a pre-receive hook for an organization",
        "category": "enterprise-admin",
        "subcategory": "org-pre-receive-hooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "disabled",
                "configuration_url": "https://github.example.com/api/v3/admin/pre-receive-hooks/42",
                "allow_downstream_configuration": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Update pre-receive hook enforcement for an organization",
        "category": "enterprise-admin",
        "subcategory": "org-pre-receive-hooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>The state of enforcement for the hook on this repository.</p>",
            "type": "string",
            "name": "enforcement",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of enforcement for the hook on this repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether repositories can override enforcement.</p>",
            "type": "boolean",
            "name": "allow_downstream_configuration",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether repositories can override enforcement.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "enforcement": "enabled",
                "allow_downstream_configuration": false
              },
              "parameters": {
                "org": "ORG",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "enabled",
                "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42",
                "allow_downstream_configuration": false
              }
            }
          }
        ],
        "descriptionHTML": "<p>For pre-receive hooks which are allowed to be configured at the org level, you can set <code>enforcement</code> and <code>allow_downstream_configuration</code></p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Remove pre-receive hook enforcement for an organization",
        "category": "enterprise-admin",
        "subcategory": "org-pre-receive-hooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "disabled",
                "configuration_url": "https://github.example.com/api/v3/admin/pre-receive-hooks/42",
                "allow_downstream_configuration": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>Removes any overrides for this hook at the org level for this org.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      }
    ],
    "orgs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/organizations",
        "title": "Create an organization",
        "category": "enterprise-admin",
        "subcategory": "orgs",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The organization's username.</p>",
            "name": "login",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The organization's username.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The login of the user who will manage this organization.</p>",
            "name": "admin",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The login of the user who will manage this organization.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The organization's display name.</p>",
            "name": "profile_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The organization's display name.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "login": "github",
                "profile_name": "GitHub, Inc.",
                "admin": "monalisaoctocat"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "issues_url": "https://api.github.com/orgs/github/issues",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/organizations/{org}",
        "title": "Update an organization name",
        "category": "enterprise-admin",
        "subcategory": "orgs",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The organization's new name.</p>",
            "name": "login",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The organization's new name.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "login": "the-new-octocats"
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "message": "Job queued to rename organization. It may take a few minutes to complete.",
                "url": "https://<hostname>/api/v3/organizations/1"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ]
      }
    ],
    "pre-receive-environments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/pre-receive-environments",
        "title": "List pre-receive environments",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "default": "created"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "name": "Default",
                  "image_url": "githubenterprise://internal",
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1",
                  "html_url": "https://github.example.com/admin/pre-receive-environments/1",
                  "default_environment": true,
                  "created_at": "2016-05-20T11:35:45-05:00",
                  "hooks_count": 14,
                  "download": {
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest",
                    "state": "not_started",
                    "downloaded_at": "2016-05-26T07:42:53-05:00",
                    "message": null
                  }
                },
                {
                  "id": 2,
                  "name": "DevTools Hook Env",
                  "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                  "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                  "default_environment": false,
                  "created_at": "2016-05-20T11:35:45-05:00",
                  "hooks_count": 1,
                  "download": {
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                    "state": "success",
                    "downloaded_at": "2016-05-26T07:42:53-05:00",
                    "message": null
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/pre-receive-environments",
        "title": "Create a pre-receive environment",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The new pre-receive environment's name.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new pre-receive environment's name.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. URL from which to download a tarball of this environment.</p>",
            "name": "image_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "URL from which to download a tarball of this environment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "DevTools Hook Env",
                "image_url": "https://my_file_server/path/to/devtools_env.tar.gz"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "DevTools Hook Env",
                "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                "default_environment": false,
                "created_at": "2016-05-20T11:35:45-05:00",
                "hooks_count": 1,
                "download": {
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                  "state": "not_started",
                  "downloaded_at": null,
                  "message": null
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "title": "Get a pre-receive environment",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "pre_receive_environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_environment_id": "PRE_RECEIVE_ENVIRONMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "DevTools Hook Env",
                "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                "default_environment": false,
                "created_at": "2016-05-20T11:35:45-05:00",
                "hooks_count": 1,
                "download": {
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                  "state": "not_started",
                  "downloaded_at": null,
                  "message": null
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "title": "Update a pre-receive environment",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "pre_receive_environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>This pre-receive environment's new name.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "This pre-receive environment's new name.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>URL from which to download a tarball of this environment.</p>",
            "name": "image_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "URL from which to download a tarball of this environment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_environment_id": "PRE_RECEIVE_ENVIRONMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 2,
                "name": "DevTools Hook Env",
                "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                "default_environment": false,
                "created_at": "2016-05-20T11:35:45-05:00",
                "hooks_count": 1,
                "download": {
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                  "state": "success",
                  "downloaded_at": "2016-05-26T07:42:53-05:00",
                  "message": null
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>You cannot modify the default environment. If you attempt to modify the default environment, you will receive a <code>422 Unprocessable Entity</code> response.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Client Errors</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/pre-receive-environments/{pre_receive_environment_id}",
        "title": "Delete a pre-receive environment",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "pre_receive_environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_environment_id": "PRE_RECEIVE_ENVIRONMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>If you attempt to delete an environment that cannot be deleted, you will receive a <code>422 Unprocessable Entity</code> response.</p>\n<p>The possible error messages are:</p>\n<ul>\n<li><em>Cannot modify or delete the default environment</em></li>\n<li><em>Cannot delete environment that has hooks</em></li>\n<li><em>Cannot delete environment when download is in progress</em></li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Client Errors</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads",
        "title": "Start a pre-receive environment download",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "pre_receive_environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_environment_id": "PRE_RECEIVE_ENVIRONMENT_ID"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
                "state": "not_started",
                "downloaded_at": null,
                "message": null
              }
            }
          }
        ],
        "descriptionHTML": "<p>Triggers a new download of the environment tarball from the environment's <code>image_url</code>. When the download is finished, the newly downloaded tarball will overwrite the existing environment.</p>\n<p>If a download cannot be triggered, you will receive a <code>422 Unprocessable Entity</code> response.</p>\n<p>The possible error messages are:</p>\n<ul>\n<li><em>Cannot modify or delete the default environment</em></li>\n<li><em>Can not start a new download when a download is in progress</em></li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Client Errors</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/pre-receive-environments/{pre_receive_environment_id}/downloads/latest",
        "title": "Get the download status for a pre-receive environment",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-environments",
        "parameters": [
          {
            "name": "pre_receive_environment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_environment_id": "PRE_RECEIVE_ENVIRONMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://github.example.com/api/v3/admin/pre-receive-environments/3/downloads/latest",
                "state": "success",
                "downloaded_at": "2016-05-26T07:42:53-05:00",
                "message": null
              }
            }
          }
        ],
        "descriptionHTML": "<p>In addition to seeing the download status at the \"<a href=\"#get-a-pre-receive-environment\">Get a pre-receive environment</a>\" endpoint, there is also this separate endpoint for just the download status.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      }
    ],
    "pre-receive-hooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/pre-receive-hooks",
        "title": "List pre-receive hooks",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-hooks",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>One of <code>created</code> (when the repository was starred) or <code>updated</code> (when it was last pushed to) or <code>name</code>.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "name": "Check Commits",
                  "enforcement": "disabled",
                  "script": "scripts/commmit_check.sh",
                  "script_repository": {
                    "id": 595,
                    "full_name": "DevIT/hooks",
                    "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
                    "html_url": "https://github.example.com/DevIT/hooks"
                  },
                  "environment": {
                    "id": 2,
                    "name": "DevTools Hook Env",
                    "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                    "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                    "default_environment": false,
                    "created_at": "2016-05-20T11:35:45-05:00",
                    "hooks_count": 1,
                    "download": {
                      "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                      "state": "success",
                      "downloaded_at": "2016-05-26T07:42:53-05:00",
                      "message": null
                    }
                  },
                  "allow_downstream_configuration": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/pre-receive-hooks",
        "title": "Create a pre-receive hook",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-hooks",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the hook.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the hook.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The script that the hook runs.</p>",
            "name": "script",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The script that the hook runs.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p><strong>Required</strong>. The GitHub repository where the script is kept.</p>",
            "properties": {},
            "additionalProperties": true,
            "name": "script_repository",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The GitHub repository where the script is kept.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p><strong>Required</strong>. The pre-receive environment where the script is executed.</p>",
            "properties": {},
            "additionalProperties": true,
            "name": "environment",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The pre-receive environment where the script is executed.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The state of enforcement for this hook. default: <code>disabled</code></p>",
            "name": "enforcement",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of enforcement for this hook. default: `disabled`",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Whether enforcement can be overridden at the org or repo level. default: <code>false</code></p>",
            "name": "allow_downstream_configuration",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether enforcement can be overridden at the org or repo level. default: `false`",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Check Commits",
                "script": "scripts/commit_check.sh",
                "enforcement": "disabled",
                "allow_downstream_configuration": false,
                "script_repository": {
                  "full_name": "DevIT/hooks"
                },
                "environment": {
                  "id": 2
                }
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "name": "Check Commits",
                "enforcement": "disabled",
                "script": "scripts/commmit_check.sh",
                "script_repository": {
                  "id": 595,
                  "full_name": "DevIT/hooks",
                  "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
                  "html_url": "https://github.example.com/DevIT/hooks"
                },
                "environment": {
                  "id": 2,
                  "name": "DevTools Hook Env",
                  "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                  "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                  "default_environment": false,
                  "created_at": "2016-05-20T11:35:45-05:00",
                  "hooks_count": 1,
                  "download": {
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                    "state": "success",
                    "downloaded_at": "2016-05-26T07:42:53-05:00",
                    "message": null
                  }
                },
                "allow_downstream_configuration": false
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Get a pre-receive hook",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-hooks",
        "parameters": [
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "name": "Check Commits",
                "enforcement": "disabled",
                "script": "scripts/commmit_check.sh",
                "script_repository": {
                  "id": 595,
                  "full_name": "DevIT/hooks",
                  "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
                  "html_url": "https://github.example.com/DevIT/hooks"
                },
                "environment": {
                  "id": 2,
                  "name": "DevTools Hook Env",
                  "image_url": "https://my_file_server/path/to/devtools_env.tar.gz",
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2",
                  "html_url": "https://github.example.com/admin/pre-receive-environments/2",
                  "default_environment": false,
                  "created_at": "2016-05-20T11:35:45-05:00",
                  "hooks_count": 1,
                  "download": {
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/2/downloads/latest",
                    "state": "success",
                    "downloaded_at": "2016-05-26T07:42:53-05:00",
                    "message": null
                  }
                },
                "allow_downstream_configuration": false
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Update a pre-receive hook",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-hooks",
        "parameters": [
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The name of the hook.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the hook.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The script that the hook runs.</p>",
            "name": "script",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The script that the hook runs.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>The GitHub repository where the script is kept.</p>",
            "properties": {},
            "additionalProperties": true,
            "name": "script_repository",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The GitHub repository where the script is kept.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>The pre-receive environment where the script is executed.</p>",
            "properties": {},
            "additionalProperties": true,
            "name": "environment",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The pre-receive environment where the script is executed.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The state of enforcement for this hook.</p>",
            "name": "enforcement",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of enforcement for this hook.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Whether enforcement can be overridden at the org or repo level.</p>",
            "name": "allow_downstream_configuration",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether enforcement can be overridden at the org or repo level.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Check Commits",
                "environment": {
                  "id": 1
                },
                "allow_downstream_configuration": true
              },
              "parameters": {
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "name": "Check Commits",
                "enforcement": "disabled",
                "script": "scripts/commmit_check.sh",
                "script_repository": {
                  "id": 595,
                  "full_name": "DevIT/hooks",
                  "url": "https://github.example.com/api/v3/repos/DevIT/hooks",
                  "html_url": "https://github.example.com/DevIT/hooks"
                },
                "environment": {
                  "id": 1,
                  "name": "Default",
                  "image_url": "githubenterprise://internal",
                  "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1",
                  "html_url": "https://github.example.com/admin/pre-receive-environments/1",
                  "default_environment": true,
                  "created_at": "2016-05-20T11:35:45-05:00",
                  "hooks_count": 1,
                  "download": {
                    "url": "https://github.example.com/api/v3/admin/pre-receive-environments/1/downloads/latest",
                    "state": "success",
                    "downloaded_at": "2016-05-26T07:42:53-05:00",
                    "message": null
                  }
                },
                "allow_downstream_configuration": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Delete a pre-receive hook",
        "category": "enterprise-admin",
        "subcategory": "pre-receive-hooks",
        "parameters": [
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      }
    ],
    "repo-pre-receive-hooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pre-receive-hooks",
        "title": "List pre-receive hooks for a repository",
        "category": "enterprise-admin",
        "subcategory": "repo-pre-receive-hooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "name"
              ],
              "default": "created"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 42,
                  "name": "Check Commits",
                  "enforcement": "disabled",
                  "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List all pre-receive hooks that are enabled or testing for this repository as well as any disabled hooks that are allowed to be enabled at the repository level. Pre-receive hooks that are disabled at a higher level and are not configurable will not be listed.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Get a pre-receive hook for a repository",
        "category": "enterprise-admin",
        "subcategory": "repo-pre-receive-hooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "disabled",
                "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Update pre-receive hook enforcement for a repository",
        "category": "enterprise-admin",
        "subcategory": "repo-pre-receive-hooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>The state of enforcement for the hook on this repository.</p>",
            "type": "string",
            "enum": [
              "enabled",
              "disabled",
              "testing"
            ],
            "name": "enforcement",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of enforcement for the hook on this repository.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "enforcement": "enabled"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "enabled",
                "configuration_url": "https://github.example.com/api/v3/repos/octocat/hello-world/pre-receive-hooks/42"
              }
            }
          }
        ],
        "descriptionHTML": "<p>For pre-receive hooks which are allowed to be configured at the repo level, you can set <code>enforcement</code></p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pre-receive-hooks/{pre_receive_hook_id}",
        "title": "Remove pre-receive hook enforcement for a repository",
        "category": "enterprise-admin",
        "subcategory": "repo-pre-receive-hooks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pre_receive_hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>pre_receive_hook_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pre_receive_hook_id": "PRE_RECEIVE_HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Responds with effective values inherited from owner and/or global level.",
              "example": {
                "id": 42,
                "name": "Check Commits",
                "enforcement": "disabled",
                "configuration_url": "https://github.example.com/api/v3/orgs/octocat/pre-receive-hooks/42"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Deletes any overridden enforcement on this repository for the specified hook.</p>\n<p>Responds with effective values inherited from owner and/or global level.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Responds with effective values inherited from owner and/or global level.</p>"
          }
        ],
        "previews": [
          "<p>APIs for managing pre-receive hooks are currently available for developers to preview. During the preview period, the APIs may change without advance notice.</p>\n<p>To access the API you must provide a custom <a href=\"/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.eye-scream-preview</code></pre>"
        ]
      }
    ],
    "users": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/keys",
        "title": "List public keys",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "accessed"
              ],
              "default": "created"
            },
            "descriptionHTML": ""
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Only show public keys accessed after the given time.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                  "id": 2,
                  "url": "https://api.github.com/user/keys/2",
                  "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                  "created_at": "2020-06-11T21:31:57Z",
                  "verified": false,
                  "read_only": false,
                  "last_used": "2020-06-11T22:31:57Z",
                  "user_id": 1,
                  "repository_id": 2
                },
                {
                  "key": "9Og8iYjAyymI9LvABpJerYrMxURPc8r+dB7TJyvv1234",
                  "id": 3,
                  "url": "https://api.github.com/user/keys/2",
                  "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                  "created_at": "2020-06-11T21:31:57Z",
                  "verified": false,
                  "read_only": false,
                  "last_used": "2020-06-11T22:31:57Z",
                  "user_id": 1,
                  "repository_id": 2
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/keys/{key_ids}",
        "title": "Delete a public key",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "key_ids",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "key_ids": "KEY_IDS"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/admin/tokens",
        "title": "List personal access tokens",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 2,
                  "url": "https://enterprise.octocat.com/api/v3/authorizations/2",
                  "app": {
                    "name": "My personal access token",
                    "url": "https://docs.github.com/enterprise/rest/reference/enterprise-admin#list-personal-access-tokens",
                    "client_id": "00000000000000000000"
                  },
                  "token": "ghp_16C7e42F292c6912E7710c838347Ae178B4a",
                  "hashed_token": "23cffb2fab1b0a62747863eba88cb9327e561f2f7a0c8661c0d9b83146cb8d45",
                  "token_last_eight": "Ae178B4a",
                  "note": "My personal access token",
                  "note_url": null,
                  "created_at": "2019-04-24T21:49:02Z",
                  "updated_at": "2019-04-24T21:49:02Z",
                  "scopes": [
                    "admin:business",
                    "admin:gpg_key",
                    "admin:org",
                    "admin:org_hook",
                    "admin:pre_receive_hook",
                    "admin:public_key",
                    "admin:repo_hook",
                    "delete_repo",
                    "gist",
                    "notifications",
                    "repo",
                    "user",
                    "write:discussion"
                  ],
                  "fingerprint": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists personal access tokens for all users, including admin users.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/tokens/{token_id}",
        "title": "Delete a personal access token",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "token_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "token_id": "TOKEN_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a personal access token. Returns a <code>403 - Forbidden</code> status when a personal access token is in use. For example, if you access this endpoint with the same personal access token that you are trying to delete, you will receive this error.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/users",
        "title": "Create a user",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The user's username.</p>",
            "name": "login",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The user's username.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required for built-in authentication.</strong> The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For details on built-in and centrally-managed authentication, see the the <a href=\"https://docs.github.com/enterprise/2.18/admin/guides/user-management/authenticating-users-for-your-github-enterprise-server-instance/\">GitHub authentication guide</a>.</p>",
            "name": "email",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required for built-in authentication.** The user's email address. This parameter can be omitted when using CAS, LDAP, or SAML. For details on built-in and centrally-managed authentication, see the the [GitHub authentication guide](https://docs.github.com/enterprise/2.18/admin/guides/user-management/authenticating-users-for-your-github-enterprise-server-instance/).",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "login": "monalisa",
                "email": "octocat@github.com"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If an external authentication mechanism is used, the login name should match the login name in the external system. If you are using LDAP authentication, you should also <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-user\">update the LDAP mapping</a> for the user.</p>\n<p>The login name will be normalized to only contain alphanumeric characters or single hyphens. For example, if you send <code>\"octo_cat\"</code> as the login, a user named <code>\"octo-cat\"</code> will be created.</p>\n<p>If the login name or email address is already associated with an account, the server will return a <code>422</code> response.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/admin/users/{username}",
        "title": "Update the username for a user",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The user's new username.</p>",
            "name": "login",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The user's new username.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "login": "thenewmonalisa"
              },
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "message": "Job queued to rename user. It may take a few minutes to complete.",
                "url": "https://api.github.com/user/1"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/users/{username}",
        "title": "Delete a user",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deleting a user will delete all their repositories, gists, applications, and personal settings. <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#suspend-a-user\">Suspending a user</a> is often a better option.</p>\n<p>You can delete any user account except your own.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/admin/users/{username}/authorizations",
        "title": "Create an impersonation OAuth token",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p>A list of <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scopes</a>.</p>",
            "items": {
              "type": "string"
            },
            "name": "scopes",
            "in": "body",
            "rawType": "array",
            "rawDescription": "A list of [scopes](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response when getting an existing impersonation OAuth token",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response when creating a new impersonation OAuth token",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Response when getting an existing impersonation OAuth token</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Response when creating a new impersonation OAuth token</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/admin/users/{username}/authorizations",
        "title": "Delete an impersonation OAuth token",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/users/{username}/site_admin",
        "title": "Promote a user to be a site administrator",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/users/{username}/site_admin",
        "title": "Demote a site administrator",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You can demote any user account except your own.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/users/{username}/suspended",
        "title": "Suspend a user",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The reason the user is being suspended. This message will be logged in the <a href=\"https://docs.github.com/enterprise/admin/articles/audit-logging/\">audit log</a>. If you don't provide a <code>reason</code>, it will default to \"Suspended via API by <em>SITE_ADMINISTRATOR</em>\", where <em>SITE_ADMINISTRATOR</em> is the person who performed the action.</p>",
            "name": "reason",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The reason the user is being suspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to \"Suspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If your GitHub instance uses <a href=\"https://docs.github.com/enterprise/admin/guides/user-management/using-ldap\">LDAP Sync with Active Directory LDAP servers</a>, Active Directory LDAP-authenticated users cannot be suspended through this API. If you attempt to suspend an Active Directory LDAP-authenticated user through this API, it will return a <code>403</code> response.</p>\n<p>You can suspend any user account except your own.</p>\n<p>Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/users/{username}/suspended",
        "title": "Unsuspend a user",
        "category": "enterprise-admin",
        "subcategory": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The reason the user is being unsuspended. This message will be logged in the <a href=\"https://docs.github.com/enterprise/admin/articles/audit-logging/\">audit log</a>. If you don't provide a <code>reason</code>, it will default to \"Unsuspended via API by <em>SITE_ADMINISTRATOR</em>\", where <em>SITE_ADMINISTRATOR</em> is the person who performed the action.</p>",
            "name": "reason",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The reason the user is being unsuspended. This message will be logged in the [audit log](https://docs.github.com/enterprise/admin/articles/audit-logging/). If you don't provide a `reason`, it will default to \"Unsuspended via API by _SITE\\_ADMINISTRATOR_\", where _SITE\\_ADMINISTRATOR_ is the person who performed the action.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If your GitHub instance uses <a href=\"https://docs.github.com/enterprise/admin/guides/user-management/using-ldap\">LDAP Sync with Active Directory LDAP servers</a>, this API is disabled and will return a <code>403</code> response. Active Directory LDAP-authenticated users cannot be unsuspended using the API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ]
  },
  "gists": {
    "gists": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists",
        "title": "List gists for the authenticated user",
        "category": "gists",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                  "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                  "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                  "id": "aa5a315d61ae9438b18d",
                  "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                  "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                  "files": {
                    "hello_world.rb": {
                      "filename": "hello_world.rb",
                      "type": "application/x-ruby",
                      "language": "Ruby",
                      "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                      "size": 167
                    }
                  },
                  "public": true,
                  "created_at": "2010-04-14T02:15:15Z",
                  "updated_at": "2011-06-20T11:34:15Z",
                  "description": "Hello World Examples",
                  "comments": 0,
                  "user": null,
                  "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "truncated": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/gists",
        "title": "Create a gist",
        "category": "gists",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p>Description of the gist</p>",
            "type": "string",
            "examples": [
              "Example Ruby script"
            ],
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Description of the gist",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. Names and content for the files that make up the gist</p>",
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "content": {
                  "description": "Content of the file",
                  "readOnly": false,
                  "type": "string"
                }
              },
              "required": [
                "content"
              ]
            },
            "examples": [
              {
                "hello.rb": {
                  "content": "puts \"Hello, World!\""
                }
              }
            ],
            "name": "files",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Names and content for the files that make up the gist",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "description": "Flag indicating whether the gist is public",
                "type": "boolean",
                "default": false,
                "examples": [
                  true
                ]
              },
              {
                "type": "string",
                "default": "false",
                "enum": [
                  "true",
                  "false"
                ],
                "examples": [
                  "true"
                ]
              }
            ],
            "name": "public",
            "in": "body",
            "type": "boolean or string or ",
            "description": "<p>Flag indicating whether the gist is public</p>",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                "id": "aa5a315d61ae9438b18d",
                "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                "created_at": "2010-04-14T02:15:15Z",
                "updated_at": "2011-06-20T11:34:15Z",
                "description": "Hello World Examples",
                "comments": 0,
                "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Allows you to add a new gist with one or more files.</p>\n<p><strong>Note:</strong> Don't name your files \"gistfile\" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/public",
        "title": "List public gists",
        "category": "gists",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                  "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                  "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                  "id": "aa5a315d61ae9438b18d",
                  "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                  "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                  "files": {
                    "hello_world.rb": {
                      "filename": "hello_world.rb",
                      "type": "application/x-ruby",
                      "language": "Ruby",
                      "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                      "size": 167
                    }
                  },
                  "public": true,
                  "created_at": "2010-04-14T02:15:15Z",
                  "updated_at": "2011-06-20T11:34:15Z",
                  "description": "Hello World Examples",
                  "comments": 0,
                  "user": null,
                  "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "truncated": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List public gists sorted by most recently updated to least recently updated.</p>\n<p>Note: With <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">pagination</a>, you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/starred",
        "title": "List starred gists",
        "category": "gists",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                  "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                  "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                  "id": "aa5a315d61ae9438b18d",
                  "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                  "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                  "files": {
                    "hello_world.rb": {
                      "filename": "hello_world.rb",
                      "type": "application/x-ruby",
                      "language": "Ruby",
                      "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                      "size": 167
                    }
                  },
                  "public": true,
                  "created_at": "2010-04-14T02:15:15Z",
                  "updated_at": "2011-06-20T11:34:15Z",
                  "description": "Hello World Examples",
                  "comments": 0,
                  "user": null,
                  "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "truncated": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List the authenticated user's starred gists:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}",
        "title": "Get a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                "id": "aa5a315d61ae9438b18d",
                "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                "created_at": "2010-04-14T02:15:15Z",
                "updated_at": "2011-06-20T11:34:15Z",
                "description": "Hello World Examples",
                "comments": 0,
                "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden Gist</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/gists/{gist_id}",
        "title": "Update a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>Description of the gist</p>",
            "type": "string",
            "examples": [
              "Example Ruby script"
            ],
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Description of the gist",
            "childParamsGroups": []
          },
          {
            "description": "<p>Names of files to be updated</p>",
            "type": "object",
            "additionalProperties": {
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "content": {
                  "description": "The new content of the file",
                  "type": "string"
                },
                "filename": {
                  "description": "The new filename for the file",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "anyOf": [
                {
                  "required": [
                    "content"
                  ]
                },
                {
                  "required": [
                    "filename"
                  ]
                },
                {
                  "type": "object",
                  "maxProperties": 0
                }
              ]
            },
            "examples": [
              {
                "hello.rb": {
                  "content": "blah",
                  "filename": "goodbye.rb"
                }
              }
            ],
            "name": "files",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Names of files to be updated",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                "id": "aa5a315d61ae9438b18d",
                "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                "created_at": "2010-04-14T02:15:15Z",
                "updated_at": "2011-06-20T11:34:15Z",
                "description": "Hello World Examples",
                "comments": 0,
                "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/gists/{gist_id}",
        "title": "Delete a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/commits",
        "title": "List gist commits",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f",
                  "version": "57a7f021a713b1c5a6a199b54cc514735d2d462f",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "change_status": {
                    "deletions": 0,
                    "additions": 180,
                    "total": 180
                  },
                  "committed_at": "2010-04-14T02:15:15Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/forks",
        "title": "List gist forks",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                  "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                  "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                  "id": "aa5a315d61ae9438b18d",
                  "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                  "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                  "files": {
                    "hello_world.rb": {
                      "filename": "hello_world.rb",
                      "type": "application/x-ruby",
                      "language": "Ruby",
                      "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                      "size": 167
                    }
                  },
                  "public": true,
                  "created_at": "2010-04-14T02:15:15Z",
                  "updated_at": "2011-06-20T11:34:15Z",
                  "description": "Hello World Examples",
                  "comments": 1,
                  "user": null,
                  "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/gists/{gist_id}/forks",
        "title": "Fork a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                "id": "aa5a315d61ae9438b18d",
                "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                "files": {
                  "hello_world.rb": {
                    "filename": "hello_world.rb",
                    "type": "application/x-ruby",
                    "language": "Ruby",
                    "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                    "size": 167
                  }
                },
                "public": true,
                "created_at": "2010-04-14T02:15:15Z",
                "updated_at": "2011-06-20T11:34:15Z",
                "description": "Hello World Examples",
                "comments": 0,
                "user": null,
                "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "truncated": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note</strong>: This was previously <code>/gists/:gist_id/fork</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/star",
        "title": "Check if a gist is starred",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if gist is starred"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if gist is starred</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if gist is not starred</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/gists/{gist_id}/star",
        "title": "Star a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/gists/{gist_id}/star",
        "title": "Unstar a gist",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/{sha}",
        "title": "Get a gist revision",
        "category": "gists",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID",
                "sha": "SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                "id": "aa5a315d61ae9438b18d",
                "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                "created_at": "2010-04-14T02:15:15Z",
                "updated_at": "2011-06-20T11:34:15Z",
                "description": "Hello World Examples",
                "comments": 0,
                "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/gists",
        "title": "List gists for a user",
        "category": "gists",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/gists/aa5a315d61ae9438b18d",
                  "forks_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/forks",
                  "commits_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/commits",
                  "id": "aa5a315d61ae9438b18d",
                  "node_id": "MDQ6R2lzdGFhNWEzMTVkNjFhZTk0MzhiMThk",
                  "git_pull_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "git_push_url": "https://gist.github.com/aa5a315d61ae9438b18d.git",
                  "html_url": "https://gist.github.com/aa5a315d61ae9438b18d",
                  "files": {
                    "hello_world.rb": {
                      "filename": "hello_world.rb",
                      "type": "application/x-ruby",
                      "language": "Ruby",
                      "raw_url": "https://gist.githubusercontent.com/octocat/6cad326836d38bd3a7ae/raw/db9c55113504e46fa076e7df3a04ce592e2e86d8/hello_world.rb",
                      "size": 167
                    }
                  },
                  "public": true,
                  "created_at": "2010-04-14T02:15:15Z",
                  "updated_at": "2011-06-20T11:34:15Z",
                  "description": "Hello World Examples",
                  "comments": 0,
                  "user": null,
                  "comments_url": "https://api.github.com/gists/aa5a315d61ae9438b18d/comments/",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "truncated": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists public gists for the specified user:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "gists"
      }
    ],
    "comments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/comments",
        "title": "List gist comments",
        "category": "gists",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDExOkdpc3RDb21tZW50MQ==",
                  "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                  "body": "Just commenting for the sake of commenting",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-18T23:23:56Z",
                  "updated_at": "2011-04-18T23:23:56Z",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/gists/{gist_id}/comments",
        "title": "Create a gist comment",
        "category": "gists",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The comment text.</p>",
            "type": "string",
            "maxLength": 65535,
            "examples": [
              "Body of the attachment"
            ],
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The comment text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDExOkdpc3RDb21tZW50MQ==",
                "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                "body": "Just commenting for the sake of commenting",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-18T23:23:56Z",
                "updated_at": "2011-04-18T23:23:56Z",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gists/{gist_id}/comments/{comment_id}",
        "title": "Get a gist comment",
        "category": "gists",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDExOkdpc3RDb21tZW50MQ==",
                "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                "body": "Just commenting for the sake of commenting",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-18T23:23:56Z",
                "updated_at": "2011-04-18T23:23:56Z",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden Gist</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/gists/{gist_id}/comments/{comment_id}",
        "title": "Update a gist comment",
        "category": "gists",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The comment text.</p>",
            "type": "string",
            "maxLength": 65535,
            "examples": [
              "Body of the attachment"
            ],
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The comment text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDExOkdpc3RDb21tZW50MQ==",
                "url": "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1",
                "body": "Just commenting for the sake of commenting",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-18T23:23:56Z",
                "updated_at": "2011-04-18T23:23:56Z",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/gists/{gist_id}/comments/{comment_id}",
        "title": "Delete a gist comment",
        "category": "gists",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "gist_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>gist_id parameter</p>"
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gist_id": "GIST_ID",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ]
  },
  "git": {
    "blobs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/git/blobs",
        "title": "Create a blob",
        "category": "git",
        "subcategory": "blobs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The new blob's content.</p>",
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new blob's content.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The encoding used for <code>content</code>. Currently, <code>\"utf-8\"</code> and <code>\"base64\"</code> are supported.</p>",
            "default": "utf-8",
            "name": "encoding",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "Content of the blob",
                "encoding": "utf-8"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
                "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/blobs/{file_sha}",
        "title": "Get a blob",
        "category": "git",
        "subcategory": "blobs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "file_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "file_sha": "FILE_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content": "Q29udGVudCBvZiB0aGUgYmxvYg==",
                "encoding": "base64",
                "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
                "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
                "size": 19,
                "node_id": "Q29udGVudCBvZiB0aGUgYmxvYg=="
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The <code>content</code> in the response will always be Base64 encoded.</p>\n<p><em>Note</em>: This API supports blobs up to 100 megabytes in size.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "commits": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/git/commits",
        "title": "Create a commit",
        "category": "git",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The commit message</p>",
            "name": "message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The commit message",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The SHA of the tree object this commit points to</p>",
            "name": "tree",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the tree object this commit points to",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.</p>",
            "items": {
              "type": "string"
            },
            "name": "parents",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>Information about the author of the commit. By default, the <code>author</code> will be the authenticated user and the current date. See the <code>author</code> and <code>committer</code> object below for details.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The name of the author (or committer) of the commit</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The email of the author (or committer) of the commit</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "<p>Indicates when this commit was authored (or committed). This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                "name": "date",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                "childParamsGroups": []
              }
            },
            "required": [
              "name",
              "email"
            ],
            "name": "author",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.",
            "childParamsGroups": [
              {
                "parentName": "author",
                "parentType": "object",
                "id": "author-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The name of the author (or committer) of the commit</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The email of the author (or committer) of the commit</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "<p>Indicates when this commit was authored (or committed). This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                    "name": "date",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "object",
            "description": "<p>Information about the person who is making the commit. By default, <code>committer</code> will use the information set in <code>author</code>. See the <code>author</code> and <code>committer</code> object below for details.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p>The name of the author (or committer) of the commit</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p>The email of the author (or committer) of the commit</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "<p>Indicates when this commit was authored (or committed). This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                "name": "date",
                "in": "body",
                "rawType": "string",
                "rawDescription": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                "childParamsGroups": []
              }
            },
            "name": "committer",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.",
            "childParamsGroups": [
              {
                "parentName": "committer",
                "parentType": "object",
                "id": "committer-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The name of the author (or committer) of the commit</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The email of the author (or committer) of the commit</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "<p>Indicates when this commit was authored (or committed). This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                    "name": "date",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "string",
            "description": "<p>The <a href=\"https://en.wikipedia.org/wiki/Pretty_Good_Privacy\">PGP signature</a> of the commit. GitHub adds the signature to the <code>gpgsig</code> header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a <code>signature</code> parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to <a href=\"https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work\">use the command line</a> to create signed commits.</p>",
            "name": "signature",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "message": "my commit message",
                "author": {
                  "name": "Mona Octocat",
                  "email": "octocat@github.com",
                  "date": "2008-07-09T16:13:30+12:00"
                },
                "parents": [
                  "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
                ],
                "tree": "827efc6d56897b048c772eb4087f854f46256132",
                "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
                "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                "author": {
                  "date": "2014-11-07T22:01:45Z",
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "committer": {
                  "date": "2014-11-07T22:01:45Z",
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "message": "my commit message",
                "tree": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132",
                  "sha": "827efc6d56897b048c772eb4087f854f46256132"
                },
                "parents": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0",
                    "sha": "7d1b31e74ee336d15cbd21741bc88a537ed063a0",
                    "html_url": "https://github.com/octocat/Hello-World/commit/7d1b31e74ee336d15cbd21741bc88a537ed063a0"
                  }
                ],
                "verification": {
                  "verified": false,
                  "reason": "unsigned",
                  "signature": null,
                  "payload": null
                },
                "html_url": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates a new Git <a href=\"https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects\">commit object</a>.</p>\n<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in the table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/commits/{commit_sha}",
        "title": "Get a commit",
        "category": "git",
        "subcategory": "commits",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "commit_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>commit_sha parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "commit_sha": "COMMIT_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
                "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                "html_url": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
                "author": {
                  "date": "2014-11-07T22:01:45Z",
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "committer": {
                  "date": "2014-11-07T22:01:45Z",
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "message": "added readme, because im a good github citizen",
                "tree": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
                  "sha": "691272480426f78a0138979dd3ce63b77f706feb"
                },
                "parents": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                    "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5",
                    "html_url": "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
                  }
                ],
                "verification": {
                  "verified": false,
                  "reason": "unsigned",
                  "signature": null,
                  "payload": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a Git <a href=\"https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects\">commit object</a>.</p>\n<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in the table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "refs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/matching-refs/{ref}",
        "title": "List matching references",
        "category": "git",
        "subcategory": "refs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "ref": "refs/heads/feature-a",
                  "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWE=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-a",
                  "object": {
                    "type": "commit",
                    "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
                  }
                },
                {
                  "ref": "refs/heads/feature-b",
                  "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlLWI=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/feature-b",
                  "object": {
                    "type": "commit",
                    "sha": "612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/612077ae6dffb4d2fbd8ce0cccaa58893b07b5ac"
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns an array of references from your Git database that match the supplied name. The <code>:ref</code> in the URL must be formatted as <code>heads/&#x3C;branch name></code> for branches and <code>tags/&#x3C;tag name></code> for tags. If the <code>:ref</code> doesn't exist in the repository, but existing refs start with <code>:ref</code>, they will be returned as an array.</p>\n<p>When you use this endpoint without providing a <code>:ref</code>, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just <code>heads</code> and <code>tags</code>.</p>\n<p><strong>Note:</strong> You need to explicitly <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request\">request a pull request</a> to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests\">Checking mergeability of pull requests</a>\".</p>\n<p>If you request matching references for a branch named <code>feature</code> but the branch <code>feature</code> doesn't exist, the response can still include other matching head refs that start with the word <code>feature</code>, such as <code>featureA</code> and <code>featureB</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/ref/{ref}",
        "title": "Get a reference",
        "category": "git",
        "subcategory": "refs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "ref": "refs/heads/featureA",
                "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
                "object": {
                  "type": "commit",
                  "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns a single reference from your Git database. The <code>:ref</code> in the URL must be formatted as <code>heads/&#x3C;branch name></code> for branches and <code>tags/&#x3C;tag name></code> for tags. If the <code>:ref</code> doesn't match an existing ref, a <code>404</code> is returned.</p>\n<p><strong>Note:</strong> You need to explicitly <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request\">request a pull request</a> to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests\">Checking mergeability of pull requests</a>\".</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/git/refs",
        "title": "Create a reference",
        "category": "git",
        "subcategory": "refs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the fully qualified reference (ie: <code>refs/heads/master</code>). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.</p>",
            "name": "ref",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The SHA1 value for this reference.</p>",
            "name": "sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA1 value for this reference.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"refs/heads/newbranch\""
            ],
            "name": "key",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "ref": "refs/heads/featureA",
                "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "ref": "refs/heads/featureA",
                "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
                "object": {
                  "type": "commit",
                  "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/git/refs/{ref}",
        "title": "Update a reference",
        "category": "git",
        "subcategory": "refs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The SHA1 value to set this reference to</p>",
            "name": "sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA1 value to set this reference to",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to <code>false</code> will make sure you're not overwriting work.</p>",
            "default": false,
            "name": "force",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                "force": true
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "ref": "refs/heads/featureA",
                "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
                "object": {
                  "type": "commit",
                  "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/git/refs/{ref}",
        "title": "Delete a reference",
        "category": "git",
        "subcategory": "refs",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>ref parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "tags": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/git/tags",
        "title": "Create a tag object",
        "category": "git",
        "subcategory": "tags",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The tag's name. This is typically a version (e.g., \"v0.0.1\").</p>",
            "name": "tag",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The tag message.</p>",
            "name": "message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The tag message.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The SHA of the git object this is tagging.</p>",
            "name": "object",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the git object this is tagging.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The type of the object we're tagging. Normally this is a <code>commit</code> but it can also be a <code>tree</code> or a <code>blob</code>.</p>",
            "enum": [
              "commit",
              "tree",
              "blob"
            ],
            "name": "type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>An object with information about the individual creating the tag.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The name of the author of the tag</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author of the tag",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The email of the author of the tag</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author of the tag",
                "childParamsGroups": []
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "<p>When this object was tagged. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                "name": "date",
                "in": "body",
                "rawType": "string",
                "rawDescription": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                "childParamsGroups": []
              }
            },
            "required": [
              "name",
              "email"
            ],
            "name": "tagger",
            "in": "body",
            "rawType": "object",
            "rawDescription": "An object with information about the individual creating the tag.",
            "childParamsGroups": [
              {
                "parentName": "tagger",
                "parentType": "object",
                "id": "tagger-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The name of the author of the tag</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author of the tag",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The email of the author of the tag</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author of the tag",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "format": "date-time",
                    "description": "<p>When this object was tagged. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
                    "name": "date",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "tag": "v0.0.1",
                "message": "initial version",
                "object": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                "type": "commit",
                "tagger": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com",
                  "date": "2011-06-17T14:53:35-07:00"
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
                "tag": "v0.0.1",
                "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "message": "initial version",
                "tagger": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com",
                  "date": "2014-11-07T22:01:45Z"
                },
                "object": {
                  "type": "commit",
                  "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
                },
                "verification": {
                  "verified": false,
                  "reason": "unsigned",
                  "signature": null,
                  "payload": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-reference\">create</a> the <code>refs/tags/[tag]</code> reference. If you want to create a lightweight tag, you only have to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-reference\">create</a> the tag reference - this call would be unnecessary.</p>\n<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/tags/{tag_sha}",
        "title": "Get a tag",
        "category": "git",
        "subcategory": "tags",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "tag_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "tag_sha": "TAG_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
                "tag": "v0.0.1",
                "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
                "message": "initial version",
                "tagger": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com",
                  "date": "2014-11-07T22:01:45Z"
                },
                "object": {
                  "type": "commit",
                  "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
                },
                "verification": {
                  "verified": false,
                  "reason": "unsigned",
                  "signature": null,
                  "payload": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Signature verification object</strong></p>\n<p>The response will include a <code>verification</code> object that describes the result of verifying the commit's signature. The following fields are included in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>verified</code></td><td><code>boolean</code></td><td>Indicates whether GitHub considers the signature in this commit to be verified.</td></tr><tr><td><code>reason</code></td><td><code>string</code></td><td>The reason for verified value. Possible values and their meanings are enumerated in table below.</td></tr><tr><td><code>signature</code></td><td><code>string</code></td><td>The signature that was extracted from the commit.</td></tr><tr><td><code>payload</code></td><td><code>string</code></td><td>The value that was signed.</td></tr></tbody></table>\n<p>These are the possible values for <code>reason</code> in the <code>verification</code> object:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Value</th><th>Description</th></tr></thead><tbody><tr><td><code>expired_key</code></td><td>The key that made the signature is expired.</td></tr><tr><td><code>not_signing_key</code></td><td>The \"signing\" flag is not among the usage flags in the GPG key that made the signature.</td></tr><tr><td><code>gpgverify_error</code></td><td>There was an error communicating with the signature verification service.</td></tr><tr><td><code>gpgverify_unavailable</code></td><td>The signature verification service is currently unavailable.</td></tr><tr><td><code>unsigned</code></td><td>The object does not include a signature.</td></tr><tr><td><code>unknown_signature_type</code></td><td>A non-PGP signature was found in the commit.</td></tr><tr><td><code>no_user</code></td><td>No user was associated with the <code>committer</code> email address in the commit.</td></tr><tr><td><code>unverified_email</code></td><td>The <code>committer</code> email address in the commit was associated with a user, but the email address is not verified on her/his account.</td></tr><tr><td><code>bad_email</code></td><td>The <code>committer</code> email address in the commit is not included in the identities of the PGP key that made the signature.</td></tr><tr><td><code>unknown_key</code></td><td>The key that made the signature has not been registered with any user's account.</td></tr><tr><td><code>malformed_signature</code></td><td>There was an error parsing the signature.</td></tr><tr><td><code>invalid</code></td><td>The signature could not be cryptographically verified using the key whose key-id was found in the signature.</td></tr><tr><td><code>valid</code></td><td>None of the above errors applied, so the signature is considered to be verified.</td></tr></tbody></table>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "trees": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/git/trees",
        "title": "Create a tree",
        "category": "git",
        "subcategory": "trees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of objects",
            "description": "<p><strong>Required</strong>. Objects (of <code>path</code>, <code>mode</code>, <code>type</code>, and <code>sha</code>) specifying a tree structure.</p>",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "<p>The file referenced in the tree.</p>",
                  "name": "path",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The file referenced in the tree.",
                  "childParamsGroups": []
                },
                "mode": {
                  "type": "string",
                  "description": "<p>The file mode; one of <code>100644</code> for file (blob), <code>100755</code> for executable (blob), <code>040000</code> for subdirectory (tree), <code>160000</code> for submodule (commit), or <code>120000</code> for a blob that specifies the path of a symlink.</p>",
                  "enum": [
                    "100644",
                    "100755",
                    "040000",
                    "160000",
                    "120000"
                  ],
                  "name": "mode",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
                  "childParamsGroups": []
                },
                "type": {
                  "type": "string",
                  "description": "<p>Either <code>blob</code>, <code>tree</code>, or <code>commit</code>.</p>",
                  "enum": [
                    "blob",
                    "tree",
                    "commit"
                  ],
                  "name": "type",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "Either `blob`, `tree`, or `commit`.",
                  "childParamsGroups": []
                },
                "sha": {
                  "type": "string or null",
                  "description": "<p>The SHA1 checksum ID of the object in the tree. Also called <code>tree.sha</code>. If the value is <code>null</code> then the file will be deleted.  </p>\n<p><strong>Note:</strong> Use either <code>tree.sha</code> or <code>content</code> to specify the contents of the entry. Using both <code>tree.sha</code> and <code>content</code> will return an error.</p>",
                  "name": "sha",
                  "in": "body",
                  "rawType": [
                    "string",
                    "null"
                  ],
                  "rawDescription": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                  "childParamsGroups": []
                },
                "content": {
                  "type": "string",
                  "description": "<p>The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or <code>tree.sha</code>.  </p>\n<p><strong>Note:</strong> Use either <code>tree.sha</code> or <code>content</code> to specify the contents of the entry. Using both <code>tree.sha</code> and <code>content</code> will return an error.</p>",
                  "name": "content",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                  "childParamsGroups": []
                }
              }
            },
            "name": "tree",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.",
            "childParamsGroups": [
              {
                "parentName": "tree",
                "parentType": "items",
                "id": "tree-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The file referenced in the tree.</p>",
                    "name": "path",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The file referenced in the tree.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The file mode; one of <code>100644</code> for file (blob), <code>100755</code> for executable (blob), <code>040000</code> for subdirectory (tree), <code>160000</code> for submodule (commit), or <code>120000</code> for a blob that specifies the path of a symlink.</p>",
                    "enum": [
                      "100644",
                      "100755",
                      "040000",
                      "160000",
                      "120000"
                    ],
                    "name": "mode",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>Either <code>blob</code>, <code>tree</code>, or <code>commit</code>.</p>",
                    "enum": [
                      "blob",
                      "tree",
                      "commit"
                    ],
                    "name": "type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Either `blob`, `tree`, or `commit`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string or null",
                    "description": "<p>The SHA1 checksum ID of the object in the tree. Also called <code>tree.sha</code>. If the value is <code>null</code> then the file will be deleted.  </p>\n<p><strong>Note:</strong> Use either <code>tree.sha</code> or <code>content</code> to specify the contents of the entry. Using both <code>tree.sha</code> and <code>content</code> will return an error.</p>",
                    "name": "sha",
                    "in": "body",
                    "rawType": [
                      "string",
                      "null"
                    ],
                    "rawDescription": "The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or <code>tree.sha</code>.  </p>\n<p><strong>Note:</strong> Use either <code>tree.sha</code> or <code>content</code> to specify the contents of the entry. Using both <code>tree.sha</code> and <code>content</code> will return an error.</p>",
                    "name": "content",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.  \n  \n**Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "string",
            "description": "<p>The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by <code>base_tree</code> and entries defined in the <code>tree</code> parameter. Entries defined in the <code>tree</code> parameter will overwrite items from <code>base_tree</code> with the same <code>path</code>. If you're creating new changes on a branch, then normally you'd set <code>base_tree</code> to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the <code>tree</code> parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the <code>tree</code> parameter will be listed as deleted by the new commit.</p>",
            "name": "base_tree",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.\nIf not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.\n",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "base_tree": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                "tree": [
                  {
                    "path": "file.rb",
                    "mode": "100644",
                    "type": "blob",
                    "sha": "44b4fc6d56897b048c772eb4087f854f46256132"
                  }
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "sha": "cd8274d15fa3ae2ab983129fb037999f264ba9a7",
                "url": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7",
                "tree": [
                  {
                    "path": "file.rb",
                    "mode": "100644",
                    "type": "blob",
                    "size": 132,
                    "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
                  }
                ],
                "truncated": true
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.</p>\n<p>If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#create-a-commit\">Create a commit</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#update-a-reference\">Update a reference</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/git/trees/{tree_sha}",
        "title": "Get a tree",
        "category": "git",
        "subcategory": "trees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "tree_sha",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": ""
          },
          {
            "name": "recursive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in <code>:tree_sha</code>. For example, setting <code>recursive</code> to any of the following will enable returning objects or subtrees: <code>0</code>, <code>1</code>, <code>\"true\"</code>, and <code>\"false\"</code>. Omit this parameter to prevent recursively returning objects or subtrees.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default-response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "tree_sha": "TREE_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "sha": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                "url": "https://api.github.com/repos/octocat/Hello-World/trees/9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
                "tree": [
                  {
                    "path": "file.rb",
                    "mode": "100644",
                    "type": "blob",
                    "size": 30,
                    "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132"
                  },
                  {
                    "path": "subdir",
                    "mode": "040000",
                    "type": "tree",
                    "sha": "f484d249c660418515fb01c2b9662073663c242e",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/f484d249c660418515fb01c2b9662073663c242e"
                  },
                  {
                    "path": "exec_file",
                    "mode": "100755",
                    "type": "blob",
                    "size": 75,
                    "sha": "45b983be36b73c0788dc9cbcb76cbb80fc7bb057",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/45b983be36b73c0788dc9cbcb76cbb80fc7bb057"
                  }
                ],
                "truncated": false
              }
            }
          },
          {
            "key": "response-recursively-retrieving-a-tree",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "tree_sha": "TREE_SHA"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response recursively retrieving a tree",
              "example": {
                "sha": "fc6274d15fa3ae2ab983129fb037999f264ba9a7",
                "url": "https://api.github.com/repos/octocat/Hello-World/trees/fc6274d15fa3ae2ab983129fb037999f264ba9a7",
                "tree": [
                  {
                    "path": "subdir/file.txt",
                    "mode": "100644",
                    "type": "blob",
                    "size": 132,
                    "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
                  }
                ],
                "truncated": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns a single tree using the SHA1 value for that tree.</p>\n<p>If <code>truncated</code> is <code>true</code> in the response then the number of items in the <code>tree</code> array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ]
  },
  "gitignore": {
    "gitignore": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gitignore/templates",
        "title": "Get all gitignore templates",
        "category": "gitignore",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                "Actionscript",
                "Android",
                "AppceleratorTitanium",
                "Autotools",
                "Bancha",
                "C",
                "C++"
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all templates available to pass as an option when <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-for-the-authenticated-user\">creating a repository</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "gitignore"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/gitignore/templates/{name}",
        "title": "Get a gitignore template",
        "category": "gitignore",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "name": "NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "name": "C",
                "source": "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The API also allows fetching the source of a single template.\nUse the raw <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> to get the raw contents.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "gitignore"
      }
    ]
  },
  "issues": {
    "issues": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/issues",
        "title": "List issues assigned to the authenticated user",
        "category": "issues",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            },
            "descriptionHTML": "<p>Indicates which sorts of issues to return. Can be one of:<br>\n* <code>assigned</code>: Issues assigned to you<br>\n* <code>created</code>: Issues created by you<br>\n* <code>mentioned</code>: Issues mentioning you<br>\n* <code>subscribed</code>: Issues you're subscribed to updates for<br>\n* <code>all</code> or <code>repos</code>: All issues the authenticated user can see, regardless of participation or creation</p>"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the issues to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A list of comma separated label names. Example: <code>bug,ui,@high</code></p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>comments</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "collab",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": ""
          },
          {
            "name": "orgs",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": ""
          },
          {
            "name": "owned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pulls",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDU6SXNzdWUx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                  "number": 1347,
                  "state": "open",
                  "title": "Found a bug",
                  "body": "I'm having a problem with this.",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "locked": true,
                  "active_lock_reason": "too heated",
                  "comments": 0,
                  "pull_request": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                    "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                    "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                    "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                  },
                  "closed_at": null,
                  "created_at": "2011-04-22T13:33:48Z",
                  "updated_at": "2011-04-22T13:33:48Z",
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  },
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List issues assigned to the authenticated user across all visible repositories including owned repositories, member\nrepositories, and organization repositories. You can use the <code>filter</code> query parameter to fetch issues that are not\nnecessarily assigned to you.</p>\n<p><strong>Note</strong>: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe <code>pull_request</code> key. Be aware that the <code>id</code> of a pull request returned from \"Issues\" endpoints will be an <em>issue id</em>. To find out the pull\nrequest id, use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a>\" endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>If an issue event is created via a GitHub App, the response will include the <code>performed_via_github_app</code> object with\tinformation about the GitHub App. For more information, see the <a href=\"https://developer.github.com/changes/2016-09-14-Integrations-Early-Access\">related blog\tpost</a>.\nTo receive the <code>performed_via_github_app</code> object in the response, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.machine-man-preview</code></pre>",
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/issues",
        "title": "List organization issues assigned to the authenticated user",
        "category": "issues",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            },
            "descriptionHTML": "<p>Indicates which sorts of issues to return. Can be one of:<br>\n* <code>assigned</code>: Issues assigned to you<br>\n* <code>created</code>: Issues created by you<br>\n* <code>mentioned</code>: Issues mentioning you<br>\n* <code>subscribed</code>: Issues you're subscribed to updates for<br>\n* <code>all</code> or <code>repos</code>: All issues the authenticated user can see, regardless of participation or creation</p>"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the issues to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A list of comma separated label names. Example: <code>bug,ui,@high</code></p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>comments</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDU6SXNzdWUx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                  "number": 1347,
                  "state": "open",
                  "title": "Found a bug",
                  "body": "I'm having a problem with this.",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "locked": true,
                  "active_lock_reason": "too heated",
                  "comments": 0,
                  "pull_request": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                    "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                    "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                    "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                  },
                  "closed_at": null,
                  "created_at": "2011-04-22T13:33:48Z",
                  "updated_at": "2011-04-22T13:33:48Z",
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  },
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List issues in an organization assigned to the authenticated user.</p>\n<p><strong>Note</strong>: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe <code>pull_request</code> key. Be aware that the <code>id</code> of a pull request returned from \"Issues\" endpoints will be an <em>issue id</em>. To find out the pull\nrequest id, use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a>\" endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>If an issue event is created via a GitHub App, the response will include the <code>performed_via_github_app</code> object with\tinformation about the GitHub App. For more information, see the <a href=\"https://developer.github.com/changes/2016-09-14-Integrations-Early-Access\">related blog\tpost</a>.\nTo receive the <code>performed_via_github_app</code> object in the response, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.machine-man-preview</code></pre>",
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues",
        "title": "List repository issues",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "milestone",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>If an <code>integer</code> is passed, it should refer to a milestone by its <code>number</code> field. If the string <code>*</code> is passed, issues with any milestone are accepted. If the string <code>none</code> is passed, issues without milestones are returned.</p>"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the issues to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "assignee",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Can be the name of a user. Pass in <code>none</code> for issues with no assigned user, and <code>*</code> for issues assigned to any user.</p>"
          },
          {
            "name": "creator",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The user that created the issue.</p>"
          },
          {
            "name": "mentioned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A user that's mentioned in the issue.</p>"
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A list of comma separated label names. Example: <code>bug,ui,@high</code></p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>comments</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDU6SXNzdWUx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                  "number": 1347,
                  "state": "open",
                  "title": "Found a bug",
                  "body": "I'm having a problem with this.",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "locked": true,
                  "active_lock_reason": "too heated",
                  "comments": 0,
                  "pull_request": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                    "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                    "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                    "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                  },
                  "closed_at": null,
                  "created_at": "2011-04-22T13:33:48Z",
                  "updated_at": "2011-04-22T13:33:48Z",
                  "closed_by": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List issues in a repository.</p>\n<p><strong>Note</strong>: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe <code>pull_request</code> key. Be aware that the <code>id</code> of a pull request returned from \"Issues\" endpoints will be an <em>issue id</em>. To find out the pull\nrequest id, use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a>\" endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>If an issue event is created via a GitHub App, the response will include the <code>performed_via_github_app</code> object with\tinformation about the GitHub App. For more information, see the <a href=\"https://developer.github.com/changes/2016-09-14-Integrations-Early-Access\">related blog\tpost</a>.\nTo receive the <code>performed_via_github_app</code> object in the response, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.machine-man-preview</code></pre>",
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues",
        "title": "Create an issue",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": "<p><strong>Required</strong>. The title of the issue.</p>",
            "name": "title",
            "in": "body",
            "type": "string or integer or ",
            "rawDescription": "The title of the issue.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The contents of the issue.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the issue.",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p>Login for the user that this issue should be assigned to. <em>NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. <strong>This field is deprecated.</strong></em></p>",
            "name": "assignee",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer",
                "description": "The `number` of the milestone to associate this issue with. _NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise._"
              }
            ],
            "type": "string or integer or null or string or integer",
            "name": "milestone",
            "in": "body",
            "rawType": [
              "null",
              "string",
              "integer"
            ],
            "description": "<p>The <code>number</code> of the milestone to associate this issue with. <em>NOTE: Only users with push access can set the milestone for new issues. The milestone is silently dropped otherwise.</em></p>",
            "childParamsGroups": []
          },
          {
            "type": "array of strings or array of objects",
            "description": "<p>Labels to associate with this issue. <em>NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise.</em></p>",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "color": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                }
              ]
            },
            "name": "labels",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>Logins for Users to assign to this issue. <em>NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.</em></p>",
            "items": {
              "type": "string"
            },
            "name": "assignees",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "assignees": [
                  "octocat"
                ],
                "milestone": 1,
                "labels": [
                  "bug"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDU6SXNzdWUx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                "number": 1347,
                "state": "open",
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "locked": true,
                "active_lock_reason": "too heated",
                "comments": 0,
                "pull_request": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                },
                "closed_at": null,
                "created_at": "2011-04-22T13:33:48Z",
                "updated_at": "2011-04-22T13:33:48Z",
                "closed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Any user with pull access to a repository can create an issue. If <a href=\"https://docs.github.com/articles/disabling-issues/\">issues are disabled in the repository</a>, the API returns a <code>410 Gone</code> status.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}",
        "title": "Get an issue",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDU6SXNzdWUx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                "number": 1347,
                "state": "open",
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "locked": true,
                "active_lock_reason": "too heated",
                "comments": 0,
                "pull_request": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                },
                "closed_at": null,
                "created_at": "2011-04-22T13:33:48Z",
                "updated_at": "2011-04-22T13:33:48Z",
                "closed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "<p>The API returns a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-redirects-redirects\"><code>301 Moved Permanently</code> status</a> if the issue was\n<a href=\"https://docs.github.com/articles/transferring-an-issue-to-another-repository/\">transferred</a> to another repository. If\nthe issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API\nreturns a <code>404 Not Found</code> status. If the issue was deleted from a repository where the authenticated user has read\naccess, the API returns a <code>410 Gone</code> status. To receive webhook events for transferred and deleted issues, subscribe\nto the <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#issues\"><code>issues</code></a> webhook.</p>\n<p><strong>Note</strong>: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe <code>pull_request</code> key. Be aware that the <code>id</code> of a pull request returned from \"Issues\" endpoints will be an <em>issue id</em>. To find out the pull\nrequest id, use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a>\" endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}",
        "title": "Update an issue",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "description": "<p>The title of the issue.</p>",
            "type": "string or integer or null or string or integer",
            "name": "title",
            "in": "body",
            "rawType": [
              "null",
              "string",
              "integer"
            ],
            "rawDescription": "The title of the issue.",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p>The contents of the issue.</p>",
            "name": "body",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "The contents of the issue.",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p>Login for the user that this issue should be assigned to. <strong>This field is deprecated.</strong></p>",
            "name": "assignee",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Login for the user that this issue should be assigned to. **This field is deprecated.**",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>State of the issue. Either <code>open</code> or <code>closed</code>.</p>",
            "enum": [
              "open",
              "closed"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "State of the issue. Either `open` or `closed`.",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer",
                "description": "The `number` of the milestone to associate this issue with or `null` to remove current. _NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise._"
              }
            ],
            "type": "string or integer or null or string or integer",
            "name": "milestone",
            "in": "body",
            "rawType": [
              "null",
              "string",
              "integer"
            ],
            "description": "<p>The <code>number</code> of the milestone to associate this issue with or <code>null</code> to remove current. <em>NOTE: Only users with push access can set the milestone for issues. The milestone is silently dropped otherwise.</em></p>",
            "childParamsGroups": []
          },
          {
            "type": "array of strings or array of objects",
            "description": "<p>Labels to associate with this issue. Pass one or more Labels to <em>replace</em> the set of Labels on this Issue. Send an empty array (<code>[]</code>) to clear all Labels from the Issue. <em>NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise.</em></p>",
            "items": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string"
                    },
                    "description": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "color": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                }
              ]
            },
            "name": "labels",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>Logins for Users to assign to this issue. Pass one or more user logins to <em>replace</em> the set of assignees on this Issue. Send an empty array (<code>[]</code>) to clear all assignees from the Issue. <em>NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise.</em></p>",
            "items": {
              "type": "string"
            },
            "name": "assignees",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "assignees": [
                  "octocat"
                ],
                "milestone": 1,
                "state": "open",
                "labels": [
                  "bug"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDU6SXNzdWUx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                "number": 1347,
                "state": "open",
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "locked": true,
                "active_lock_reason": "too heated",
                "comments": 0,
                "pull_request": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                },
                "closed_at": null,
                "created_at": "2011-04-22T13:33:48Z",
                "updated_at": "2011-04-22T13:33:48Z",
                "closed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Issue owners and users with push access can edit an issue.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "title": "Lock an issue",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:<br>\n* <code>off-topic</code><br>\n* <code>too heated</code><br>\n* <code>resolved</code><br>\n* <code>spam</code></p>",
            "enum": [
              "off-topic",
              "too heated",
              "resolved",
              "spam"
            ],
            "name": "lock_reason",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:  \n\\* `off-topic`  \n\\* `too heated`  \n\\* `resolved`  \n\\* `spam`",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access can lock an issue or pull request's conversation.</p>\n<p>Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/lock",
        "title": "Unlock an issue",
        "category": "issues",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access can unlock an issue's conversation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "issues"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/issues",
        "title": "List user account issues assigned to the authenticated user",
        "category": "issues",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "assigned",
                "created",
                "mentioned",
                "subscribed",
                "repos",
                "all"
              ],
              "default": "assigned"
            },
            "descriptionHTML": "<p>Indicates which sorts of issues to return. Can be one of:<br>\n* <code>assigned</code>: Issues assigned to you<br>\n* <code>created</code>: Issues created by you<br>\n* <code>mentioned</code>: Issues mentioning you<br>\n* <code>subscribed</code>: Issues you're subscribed to updates for<br>\n* <code>all</code> or <code>repos</code>: All issues the authenticated user can see, regardless of participation or creation</p>"
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the issues to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "labels",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A list of comma separated label names. Example: <code>bug,ui,@high</code></p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "comments"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>comments</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDU6SXNzdWUx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                  "number": 1347,
                  "state": "open",
                  "title": "Found a bug",
                  "body": "I'm having a problem with this.",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "locked": true,
                  "active_lock_reason": "too heated",
                  "comments": 0,
                  "pull_request": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                    "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                    "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                    "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                  },
                  "closed_at": null,
                  "created_at": "2011-04-22T13:33:48Z",
                  "updated_at": "2011-04-22T13:33:48Z",
                  "repository": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "template_repository": null,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  },
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List issues across owned and member repositories assigned to the authenticated user.</p>\n<p><strong>Note</strong>: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this\nreason, \"Issues\" endpoints may return both issues and pull requests in the response. You can identify pull requests by\nthe <code>pull_request</code> key. Be aware that the <code>id</code> of a pull request returned from \"Issues\" endpoints will be an <em>issue id</em>. To find out the pull\nrequest id, use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#list-pull-requests\">List pull requests</a>\" endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>If an issue event is created via a GitHub App, the response will include the <code>performed_via_github_app</code> object with\tinformation about the GitHub App. For more information, see the <a href=\"https://developer.github.com/changes/2016-09-14-Integrations-Early-Access\">related blog\tpost</a>.\nTo receive the <code>performed_via_github_app</code> object in the response, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.machine-man-preview</code></pre>",
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "issues"
      }
    ],
    "assignees": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/assignees",
        "title": "List assignees",
        "category": "issues",
        "subcategory": "assignees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the <a href=\"https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/\">available assignees</a> for issues in a repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/assignees/{assignee}",
        "title": "Check if a user can be assigned",
        "category": "issues",
        "subcategory": "assignees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "assignee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "assignee": "ASSIGNEE"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned."
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Checks if a user has permission to be assigned to an issue in this repository.</p>\n<p>If the <code>assignee</code> can be assigned to issues in the repository, a <code>204</code> header with no content is returned.</p>\n<p>Otherwise a <code>404</code> status code is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>If the <code>assignee</code> can be assigned to issues in the repository, a <code>204</code> header with no content is returned.</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Otherwise a <code>404</code> status code is returned.</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "title": "Add assignees to an issue",
        "category": "issues",
        "subcategory": "assignees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p>Usernames of people to assign this issue to. <em>NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise.</em></p>",
            "items": {
              "type": "string"
            },
            "name": "assignees",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "assignees": [
                  "hubot",
                  "other_user"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDU6SXNzdWUx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                "number": 1347,
                "state": "open",
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "locked": true,
                "active_lock_reason": "too heated",
                "comments": 0,
                "pull_request": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                },
                "closed_at": null,
                "created_at": "2011-04-22T13:33:48Z",
                "updated_at": "2011-04-22T13:33:48Z",
                "closed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/assignees",
        "title": "Remove assignees from an issue",
        "category": "issues",
        "subcategory": "assignees",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p>Usernames of assignees to remove from an issue. <em>NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise.</em></p>",
            "items": {
              "type": "string"
            },
            "name": "assignees",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "assignees": [
                  "hubot",
                  "other_user"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDU6SXNzdWUx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                "number": 1347,
                "state": "open",
                "title": "Found a bug",
                "body": "I'm having a problem with this.",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "locked": true,
                "active_lock_reason": "too heated",
                "comments": 0,
                "pull_request": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                },
                "closed_at": null,
                "created_at": "2011-04-22T13:33:48Z",
                "updated_at": "2011-04-22T13:33:48Z",
                "closed_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes one or more assignees from an issue.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "comments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/comments",
        "title": "List issue comments for a repository",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>One of <code>created</code> (when the repository was starred) or <code>updated</code> (when it was last pushed to).</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Either <code>asc</code> or <code>desc</code>. Ignored without the <code>sort</code> parameter.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
                  "body": "Me too",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>By default, Issue Comments are ordered by ascending ID.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "title": "Get an issue comment",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
                "body": "Me too",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>If an issue event is created via a GitHub App, the response will include the <code>performed_via_github_app</code> object with\tinformation about the GitHub App. For more information, see the <a href=\"https://developer.github.com/changes/2016-09-14-Integrations-Early-Access\">related blog\tpost</a>.\nTo receive the <code>performed_via_github_app</code> object in the response, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.machine-man-preview</code></pre>",
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "title": "Update an issue comment",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The contents of the comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Me too"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
                "body": "Me too",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}",
        "title": "Delete an issue comment",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "title": "List issue comments",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
                  "body": "Me too",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Issue Comments are ordered by ascending ID.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/comments",
        "title": "Create an issue comment",
        "category": "issues",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The contents of the comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Me too"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDEyOklzc3VlQ29tbWVudDE=",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/comments/1",
                "html_url": "https://github.com/octocat/Hello-World/issues/1347#issuecomment-1",
                "body": "Me too",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint triggers <a href=\"https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "events": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/events",
        "title": "List issue events for a repository",
        "category": "issues",
        "subcategory": "events",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDEwOklzc3VlRXZlbnQx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
                  "actor": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "event": "closed",
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "created_at": "2011-04-14T16:00:49Z",
                  "issue": {
                    "id": 1,
                    "node_id": "MDU6SXNzdWUx",
                    "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                    "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                    "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                    "number": 1347,
                    "state": "open",
                    "title": "Found a bug",
                    "body": "I'm having a problem with this.",
                    "user": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "labels": [
                      {
                        "id": 208045946,
                        "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                        "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                        "name": "bug",
                        "description": "Something isn't working",
                        "color": "f29513",
                        "default": true
                      }
                    ],
                    "assignee": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "assignees": [
                      {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      }
                    ],
                    "milestone": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                      "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                      "id": 1002604,
                      "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                      "number": 1,
                      "state": "open",
                      "title": "v1.0",
                      "description": "Tracking milestone for version 1.0",
                      "creator": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "open_issues": 4,
                      "closed_issues": 8,
                      "created_at": "2011-04-10T20:09:31Z",
                      "updated_at": "2014-03-03T18:58:10Z",
                      "closed_at": "2013-02-12T13:22:01Z",
                      "due_on": "2012-10-09T23:39:01Z"
                    },
                    "locked": true,
                    "active_lock_reason": "too heated",
                    "comments": 0,
                    "pull_request": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                      "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                      "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                      "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                    },
                    "closed_at": null,
                    "created_at": "2011-04-22T13:33:48Z",
                    "updated_at": "2011-04-22T13:33:48Z",
                    "author_association": "COLLABORATOR"
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the <a href=\"https://developer.github.com/changes/2018-09-05-project-card-events\">blog post</a>.</p>\n<p>To receive the <code>project_card</code> attribute, project boards must be <a href=\"https://docs.github.com/articles/disabling-project-boards-in-a-repository\">enabled</a> for a repository, and you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.starfox-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/events/{event_id}",
        "title": "Get an issue event",
        "category": "issues",
        "subcategory": "events",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "event_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "event_id": "EVENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDEwOklzc3VlRXZlbnQx",
                "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
                "actor": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "event": "closed",
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "created_at": "2011-04-14T16:00:49Z",
                "issue": {
                  "id": 1,
                  "node_id": "MDU6SXNzdWUx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "repository_url": "https://api.github.com/repos/octocat/Hello-World",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/events",
                  "html_url": "https://github.com/octocat/Hello-World/issues/1347",
                  "number": 1347,
                  "state": "open",
                  "title": "Found a bug",
                  "body": "I'm having a problem with this.",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "locked": true,
                  "performed_via_github_app": {
                    "id": 1,
                    "slug": "octoapp",
                    "node_id": "MDExOkludGVncmF0aW9uMQ==",
                    "owner": {
                      "login": "github",
                      "id": 1,
                      "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                      "url": "https://api.github.com/orgs/github",
                      "repos_url": "https://api.github.com/orgs/github/repos",
                      "events_url": "https://api.github.com/orgs/github/events",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": true
                    },
                    "name": "Octocat App",
                    "description": "",
                    "external_url": "https://example.com",
                    "html_url": "https://github.com/apps/octoapp",
                    "created_at": "2017-07-08T16:18:44-04:00",
                    "updated_at": "2017-07-08T16:18:44-04:00",
                    "permissions": {
                      "metadata": "read",
                      "contents": "read",
                      "issues": "write",
                      "single_file": "write"
                    },
                    "events": [
                      "push",
                      "pull_request"
                    ]
                  },
                  "comments": 0,
                  "pull_request": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                    "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                    "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                    "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch"
                  },
                  "closed_at": null,
                  "created_at": "2011-04-22T13:33:48Z",
                  "updated_at": "2011-04-22T13:33:48Z",
                  "author_association": "COLLABORATOR"
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the <a href=\"https://developer.github.com/changes/2018-09-05-project-card-events\">blog post</a>.</p>\n<p>To receive the <code>project_card</code> attribute, project boards must be <a href=\"https://docs.github.com/articles/disabling-project-boards-in-a-repository\">enabled</a> for a repository, and you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.starfox-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/events",
        "title": "List issue events",
        "category": "issues",
        "subcategory": "events",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDEwOklzc3VlRXZlbnQx",
                  "url": "https://api.github.com/repos/octocat/Hello-World/issues/events/1",
                  "actor": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "event": "closed",
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "commit_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "created_at": "2011-04-14T16:00:49Z",
                  "performed_via_github_app": null,
                  "label": {
                    "name": "label",
                    "color": "red"
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the <a href=\"https://developer.github.com/changes/2018-09-05-project-card-events\">blog post</a>.</p>\n<p>To receive the <code>project_card</code> attribute, project boards must be <a href=\"https://docs.github.com/articles/disabling-project-boards-in-a-repository\">enabled</a> for a repository, and you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.starfox-preview+json</code></pre>"
        ]
      }
    ],
    "labels": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "title": "List labels for an issue",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                },
                {
                  "id": 208045947,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
                  "name": "enhancement",
                  "description": "New feature or request",
                  "color": "a2eeef",
                  "default": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "title": "Add labels to an issue",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "minItems": 1,
            "description": "<p>The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a <code>string</code> or an <code>array</code> of labels directly, but GitHub recommends passing an object with the <code>labels</code> key. You can also replace all of the labels for an issue. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#set-labels-for-an-issue\">Set labels for an issue</a>.\"</p>",
            "items": {
              "type": "string"
            },
            "name": "labels",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see \"[Set labels for an issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#set-labels-for-an-issue).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "labels": [
                  "bug",
                  "enhancement"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                },
                {
                  "id": 208045947,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
                  "name": "enhancement",
                  "description": "New feature or request",
                  "color": "a2eeef",
                  "default": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "title": "Set labels for an issue",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "minItems": 1,
            "description": "<p>The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a <code>string</code> or an <code>array</code> of labels directly, but GitHub recommends passing an object with the <code>labels</code> key. You can also add labels to the existing labels for an issue. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#add-labels-to-an-issue\">Add labels to an issue</a>.\"</p>",
            "items": {
              "type": "string"
            },
            "name": "labels",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see \"[Add labels to an issue](https://docs.github.com/enterprise-server@3.1/rest/reference/issues#add-labels-to-an-issue).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "labels": [
                  "bug",
                  "enhancement"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                },
                {
                  "id": 208045947,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
                  "name": "enhancement",
                  "description": "New feature or request",
                  "color": "a2eeef",
                  "default": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes any previous labels and sets the new labels for an issue.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/labels",
        "title": "Remove all labels from an issue",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
        "title": "Remove a label from an issue",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER",
                "name": "NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a <code>404 Not Found</code> status if the label does not exist.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/labels",
        "title": "List labels for a repository",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                },
                {
                  "id": 208045947,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
                  "name": "enhancement",
                  "description": "New feature or request",
                  "color": "a2eeef",
                  "default": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/labels",
        "title": "Create a label",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing <code>:strawberry:</code> will render the emoji <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f353.png\" alt=\":strawberry:\" title=\":strawberry:\">. For a full list of available emoji and codes, see \"<a href=\"https://github.com/ikatyang/emoji-cheat-sheet\">Emoji cheat sheet</a>.\"</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The <a href=\"http://www.color-hex.com/\">hexadecimal color code</a> for the label, without the leading <code>#</code>.</p>",
            "name": "color",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the label. Must be 100 characters or fewer.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the label. Must be 100 characters or fewer.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/labels/{name}",
        "title": "Get a label",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "name": "NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                "name": "bug",
                "description": "Something isn't working",
                "color": "f29513",
                "default": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/labels/{name}",
        "title": "Update a label",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing <code>:strawberry:</code> will render the emoji <img src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f353.png\" alt=\":strawberry:\" title=\":strawberry:\">. For a full list of available emoji and codes, see \"<a href=\"https://github.com/ikatyang/emoji-cheat-sheet\">Emoji cheat sheet</a>.\"</p>",
            "name": "new_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png \":strawberry:\"). For a full list of available emoji and codes, see \"[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet).\"",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The <a href=\"http://www.color-hex.com/\">hexadecimal color code</a> for the label, without the leading <code>#</code>.</p>",
            "name": "color",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the label. Must be 100 characters or fewer.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the label. Must be 100 characters or fewer.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "new_name": "bug :bug:",
                "description": "Small bug fix required",
                "color": "b01f26"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "name": "NAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 208045946,
                "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug%20:bug:",
                "name": "bug :bug:",
                "description": "Small bug fix required",
                "color": "b01f26",
                "default": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/labels/{name}",
        "title": "Delete a label",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "name": "NAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        "title": "List labels for issues in a milestone",
        "category": "issues",
        "subcategory": "labels",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>milestone_number parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "milestone_number": "MILESTONE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 208045946,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                  "name": "bug",
                  "description": "Something isn't working",
                  "color": "f29513",
                  "default": true
                },
                {
                  "id": 208045947,
                  "node_id": "MDU6TGFiZWwyMDgwNDU5NDc=",
                  "url": "https://api.github.com/repos/octocat/Hello-World/labels/enhancement",
                  "name": "enhancement",
                  "description": "New feature or request",
                  "color": "a2eeef",
                  "default": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "milestones": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/milestones",
        "title": "List milestones",
        "category": "issues",
        "subcategory": "milestones",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>The state of the milestone. Either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "due_on",
                "completeness"
              ],
              "default": "due_on"
            },
            "descriptionHTML": "<p>What to sort results by. Either <code>due_on</code> or <code>completeness</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "asc"
            },
            "descriptionHTML": "<p>The direction of the sort. Either <code>asc</code> or <code>desc</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/milestones",
        "title": "Create a milestone",
        "category": "issues",
        "subcategory": "milestones",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The title of the milestone.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The title of the milestone.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The state of the milestone. Either <code>open</code> or <code>closed</code>.</p>",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open",
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of the milestone. Either `open` or `closed`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A description of the milestone.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A description of the milestone.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>The milestone due date. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "due_on",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "v1.0",
                "state": "open",
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "title": "Get a milestone",
        "category": "issues",
        "subcategory": "milestones",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>milestone_number parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "milestone_number": "MILESTONE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "title": "Update a milestone",
        "category": "issues",
        "subcategory": "milestones",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>milestone_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The title of the milestone.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The title of the milestone.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The state of the milestone. Either <code>open</code> or <code>closed</code>.</p>",
            "enum": [
              "open",
              "closed"
            ],
            "default": "open",
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state of the milestone. Either `open` or `closed`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A description of the milestone.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A description of the milestone.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "<p>The milestone due date. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>",
            "name": "due_on",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "v1.0",
                "state": "open",
                "description": "Tracking milestone for version 1.0",
                "due_on": "2012-10-09T23:39:01Z"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "milestone_number": "MILESTONE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                "id": 1002604,
                "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                "number": 1,
                "state": "open",
                "title": "v1.0",
                "description": "Tracking milestone for version 1.0",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "open_issues": 4,
                "closed_issues": 8,
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "closed_at": "2013-02-12T13:22:01Z",
                "due_on": "2012-10-09T23:39:01Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/milestones/{milestone_number}",
        "title": "Delete a milestone",
        "category": "issues",
        "subcategory": "milestones",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "milestone_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>milestone_number parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "milestone_number": "MILESTONE_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "timeline": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/timeline",
        "title": "List timeline events for an issue",
        "category": "issues",
        "subcategory": "timeline",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>The API to get issue timeline events is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-23-timeline-preview-api/\">blog post</a> for full details. To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mockingbird-preview</code></pre>",
          "<p>Project card details are now shown in REST API v3 responses for project-related issue and timeline events. This feature is now available for developers to preview. For details, see the <a href=\"https://developer.github.com/changes/2018-09-05-project-card-events\">blog post</a>.</p>\n<p>To receive the <code>project_card</code> attribute, project boards must be <a href=\"https://docs.github.com/articles/disabling-project-boards-in-a-repository\">enabled</a> for a repository, and you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.starfox-preview+json</code></pre>"
        ]
      }
    ]
  },
  "licenses": {
    "licenses": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/licenses",
        "title": "Get all commonly used licenses",
        "category": "licenses",
        "parameters": [
          {
            "name": "featured",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "mit",
                  "name": "MIT License",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "lgpl-3.0",
                  "name": "GNU Lesser General Public License v3.0",
                  "spdx_id": "LGPL-3.0",
                  "url": "https://api.github.com/licenses/lgpl-3.0",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "mpl-2.0",
                  "name": "Mozilla Public License 2.0",
                  "spdx_id": "MPL-2.0",
                  "url": "https://api.github.com/licenses/mpl-2.0",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "agpl-3.0",
                  "name": "GNU Affero General Public License v3.0",
                  "spdx_id": "AGPL-3.0",
                  "url": "https://api.github.com/licenses/agpl-3.0",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "unlicense",
                  "name": "The Unlicense",
                  "spdx_id": "Unlicense",
                  "url": "https://api.github.com/licenses/unlicense",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "apache-2.0",
                  "name": "Apache License 2.0",
                  "spdx_id": "Apache-2.0",
                  "url": "https://api.github.com/licenses/apache-2.0",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                {
                  "key": "gpl-3.0",
                  "name": "GNU General Public License v3.0",
                  "spdx_id": "GPL-3.0",
                  "url": "https://api.github.com/licenses/gpl-3.0",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "licenses"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/licenses/{license}",
        "title": "Get a license",
        "category": "licenses",
        "parameters": [
          {
            "name": "license",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "license": "LICENSE"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key": "mit",
                "name": "MIT License",
                "spdx_id": "MIT",
                "url": "https://api.github.com/licenses/mit",
                "node_id": "MDc6TGljZW5zZW1pdA==",
                "html_url": "http://choosealicense.com/licenses/mit/",
                "description": "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty.",
                "implementation": "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders.",
                "permissions": [
                  "commercial-use",
                  "modifications",
                  "distribution",
                  "sublicense",
                  "private-use"
                ],
                "conditions": [
                  "include-copyright"
                ],
                "limitations": [
                  "no-liability"
                ],
                "body": "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
                "featured": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "licenses"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/license",
        "title": "Get the license for a repository",
        "category": "licenses",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "name": "LICENSE",
                "path": "LICENSE",
                "sha": "401c59dcc4570b954dd6d345e76199e1f4e76266",
                "size": 1077,
                "url": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master",
                "html_url": "https://github.com/benbalter/gman/blob/master/LICENSE",
                "git_url": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
                "download_url": "https://raw.githubusercontent.com/benbalter/gman/master/LICENSE?lab=true",
                "type": "file",
                "content": "VGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTMgQmVu\nIEJhbHRlcgoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBv\nZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0\naGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmls\nZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUg\nd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRh\ndGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwg\ncHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwg\nY29waWVzIG9mCnRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25z\nIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywK\nc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJv\ndmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGlj\nZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50\naWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJ\nUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBL\nSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJ\nTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLCBG\nSVRORVNTCkZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklO\nR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUgpDT1BZ\nUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdF\nUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIKSU4gQU4gQUNUSU9OIE9G\nIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBP\nVVQgT0YgT1IgSU4KQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBU\nSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4K\n",
                "encoding": "base64",
                "_links": {
                  "self": "https://api.github.com/repos/benbalter/gman/contents/LICENSE?ref=master",
                  "git": "https://api.github.com/repos/benbalter/gman/git/blobs/401c59dcc4570b954dd6d345e76199e1f4e76266",
                  "html": "https://github.com/benbalter/gman/blob/master/LICENSE"
                },
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This method returns the contents of the repository's license file, if one is detected.</p>\n<p>Similar to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#get-repository-content\">Get repository content</a>, this method also supports <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">custom media types</a> for retrieving the raw license content or rendered license HTML.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "licenses"
      }
    ]
  },
  "markdown": {
    "markdown": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/markdown",
        "title": "Render a Markdown document",
        "category": "markdown",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The Markdown text to render in HTML.</p>",
            "type": "string",
            "name": "text",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The Markdown text to render in HTML.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The rendering mode. Can be either <code>markdown</code> or <code>gfm</code>.</p>",
            "enum": [
              "markdown",
              "gfm"
            ],
            "default": "markdown",
            "type": "string",
            "examples": [
              "markdown"
            ],
            "name": "mode",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The rendering mode. Can be either `markdown` or `gfm`.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The repository context to use when creating references in <code>gfm</code> mode.  For example, setting <code>context</code> to <code>octo-org/octo-repo</code> will change the text <code>#42</code> into an HTML link to issue 42 in the <code>octo-org/octo-repo</code> repository.</p>",
            "type": "string",
            "name": "context",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "200",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "markdown"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/markdown/raw",
        "title": "Render a Markdown document in raw mode",
        "category": "markdown",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [],
        "previews": [],
        "descriptionHTML": "<p>You must send Markdown as plain text (using a <code>Content-Type</code> header of <code>text/plain</code> or <code>text/x-markdown</code>) to this endpoint, rather than using JSON format. In raw mode, <a href=\"https://github.github.com/gfm/\">GitHub Flavored Markdown</a> is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "markdown"
      }
    ]
  },
  "meta": {
    "meta": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/",
        "title": "GitHub API Root",
        "category": "meta",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Get Hypermedia links to resources accessible in GitHub's REST API</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "meta"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/meta",
        "title": "Get GitHub Enterprise Server meta information",
        "category": "meta",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "verifiable_password_authentication": true,
                "packages": [
                  "192.30.252.0/22"
                ],
                "dependabot": [
                  "54.158.161.132"
                ],
                "installed_version": "3.1.0"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "meta"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/octocat",
        "title": "Get Octocat",
        "category": "meta",
        "parameters": [
          {
            "name": "s",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": false,
            "descriptionHTML": "<p>The words to show in Octocat's speech bubble</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Get the octocat as ASCII art</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "meta"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/zen",
        "title": "Get the Zen of GitHub",
        "category": "meta",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Get a random sentence from the Zen of GitHub</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "meta"
      }
    ]
  },
  "metrics": {
    "statistics": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stats/code_frequency",
        "title": "Get the weekly commit activity",
        "category": "metrics",
        "subcategory": "statistics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Returns a weekly aggregate of the number of additions and deletions pushed to a repository.",
              "example": [
                [
                  1302998400,
                  1124,
                  -435
                ]
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns a weekly aggregate of the number of additions and deletions pushed to a repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Returns a weekly aggregate of the number of additions and deletions pushed to a repository.</p>"
          },
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>A header with no content is returned.</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stats/commit_activity",
        "title": "Get the last year of commit activity",
        "category": "metrics",
        "subcategory": "statistics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "days": [
                    0,
                    3,
                    26,
                    20,
                    39,
                    1,
                    0
                  ],
                  "total": 89,
                  "week": 1336280400
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the last year of commit activity grouped by week. The <code>days</code> array is a group of commits per day, starting on <code>Sunday</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>A header with no content is returned.</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stats/contributors",
        "title": "Get all contributor commit activity",
        "category": "metrics",
        "subcategory": "statistics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "*   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).\n*   `a` - Number of additions\n*   `d` - Number of deletions\n*   `c` - Number of commits",
              "example": [
                {
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "total": 135,
                  "weeks": [
                    {
                      "w": 1367712000,
                      "a": 6898,
                      "d": 77,
                      "c": 10
                    }
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the <code>total</code> number of commits authored by the contributor. In addition, the response includes a Weekly Hash (<code>weeks</code> array) with the following information:</p>\n<ul>\n<li><code>w</code> - Start of the week, given as a <a href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a>.</li>\n<li><code>a</code> - Number of additions</li>\n<li><code>d</code> - Number of deletions</li>\n<li><code>c</code> - Number of commits</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<ul>\n<li><code>w</code> - Start of the week, given as a <a href=\"http://en.wikipedia.org/wiki/Unix_time\">Unix timestamp</a>.</li>\n<li><code>a</code> - Number of additions</li>\n<li><code>d</code> - Number of deletions</li>\n<li><code>c</code> - Number of commits</li>\n</ul>"
          },
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>A header with no content is returned.</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stats/participation",
        "title": "Get the weekly commit count",
        "category": "metrics",
        "subcategory": "statistics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "The array order is oldest week (index 0) to most recent week.",
              "example": {
                "all": [
                  11,
                  21,
                  15,
                  2,
                  8,
                  1,
                  8,
                  23,
                  17,
                  21,
                  11,
                  10,
                  33,
                  91,
                  38,
                  34,
                  22,
                  23,
                  32,
                  3,
                  43,
                  87,
                  71,
                  18,
                  13,
                  5,
                  13,
                  16,
                  66,
                  27,
                  12,
                  45,
                  110,
                  117,
                  13,
                  8,
                  18,
                  9,
                  19,
                  26,
                  39,
                  12,
                  20,
                  31,
                  46,
                  91,
                  45,
                  10,
                  24,
                  9,
                  29,
                  7
                ],
                "owner": [
                  3,
                  2,
                  3,
                  0,
                  2,
                  0,
                  5,
                  14,
                  7,
                  9,
                  1,
                  5,
                  0,
                  48,
                  19,
                  2,
                  0,
                  1,
                  10,
                  2,
                  23,
                  40,
                  35,
                  8,
                  8,
                  2,
                  10,
                  6,
                  30,
                  0,
                  2,
                  9,
                  53,
                  104,
                  3,
                  3,
                  10,
                  4,
                  7,
                  11,
                  21,
                  4,
                  4,
                  22,
                  26,
                  63,
                  11,
                  2,
                  14,
                  1,
                  10,
                  3
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the total commit counts for the <code>owner</code> and total commit counts in <code>all</code>. <code>all</code> is everyone combined, including the <code>owner</code> in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract <code>owner</code> from <code>all</code>.</p>\n<p>The array order is oldest week (index 0) to most recent week.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>The array order is oldest week (index 0) to most recent week.</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/stats/punch_card",
        "title": "Get the hourly commit count for each day",
        "category": "metrics",
        "subcategory": "statistics",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.",
              "example": [
                [
                  0,
                  0,
                  5
                ],
                [
                  0,
                  1,
                  43
                ],
                [
                  0,
                  2,
                  21
                ]
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Each array contains the day number, hour number, and number of commits:</p>\n<ul>\n<li><code>0-6</code>: Sunday - Saturday</li>\n<li><code>0-23</code>: Hour of day</li>\n<li>Number of commits</li>\n</ul>\n<p>For example, <code>[2, 14, 25]</code> indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>For example, <code>[2, 14, 25]</code> indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>A header with no content is returned.</p>"
          }
        ]
      }
    ]
  },
  "oauth-authorizations": {
    "oauth-authorizations": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/applications/grants",
        "title": "List your grants",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "url": "https://api.github.com/applications/grants/1",
                  "app": {
                    "url": "http://my-github-app.com",
                    "name": "my github app",
                    "client_id": "abcde12345fghij67890"
                  },
                  "created_at": "2011-09-06T17:26:27Z",
                  "updated_at": "2011-09-06T20:39:23Z",
                  "scopes": [
                    "public_repo"
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p>You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations#list-your-authorizations\">list your authorizations</a> API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on <a href=\"https://github.com/settings/applications#authorized\">the application authorizations settings screen within GitHub</a>. The <code>scopes</code> returned are the union of scopes authorized for the application. For example, if an application has one token with <code>repo</code> scope and another token with <code>user</code> scope, the grant will return <code>[\"repo\", \"user\"]</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/applications/grants/{grant_id}",
        "title": "Get a single grant",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "grant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>grant_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "grant_id": "GRANT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/applications/grants/1",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "created_at": "2011-09-06T17:26:27Z",
                "updated_at": "2011-09-06T20:39:23Z",
                "scopes": [
                  "public_repo"
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/applications/grants/{grant_id}",
        "title": "Delete a grant",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "grant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>grant_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "grant_id": "GRANT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p>Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on <a href=\"https://github.com/settings/applications#authorized\">the application authorizations settings screen within GitHub</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/authorizations",
        "title": "List your authorizations",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 2,
                  "url": "https://enterprise.octocat.com/api/v3/authorizations/2",
                  "app": {
                    "name": "My personal access token",
                    "url": "https://docs.github.com/enterprise/rest/reference/enterprise-admin#list-personal-access-tokens",
                    "client_id": "00000000000000000000"
                  },
                  "token": "ghp_16C7e42F292c6912E7710c838347Ae178B4a",
                  "hashed_token": "23cffb2fab1b0a62747863eba88cb9327e561f2f7a0c8661c0d9b83146cb8d45",
                  "token_last_eight": "Ae178B4a",
                  "note": "My personal access token",
                  "note_url": null,
                  "created_at": "2019-04-24T21:49:02Z",
                  "updated_at": "2019-04-24T21:49:02Z",
                  "scopes": [
                    "admin:business",
                    "admin:gpg_key",
                    "admin:org",
                    "admin:org_hook",
                    "admin:pre_receive_hook",
                    "admin:public_key",
                    "admin:repo_hook",
                    "delete_repo",
                    "gist",
                    "notifications",
                    "repo",
                    "user",
                    "write:discussion"
                  ],
                  "fingerprint": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/authorizations",
        "title": "Create a new authorization",
        "category": "oauth-authorizations",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p>A list of scopes that this authorization is in.</p>",
            "type": "array of strings or null",
            "items": {
              "type": "string"
            },
            "examples": [
              "public_repo",
              "user"
            ],
            "name": "scopes",
            "in": "body",
            "rawType": [
              "array",
              "null"
            ],
            "rawDescription": "A list of scopes that this authorization is in.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A note to remind you what the OAuth token is for.</p>",
            "type": "string",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A note to remind you what the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A URL to remind you what app the OAuth token is for.</p>",
            "type": "string",
            "name": "note_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL to remind you what app the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The OAuth app client key for which to create the token.</p>",
            "maxLength": 20,
            "type": "string",
            "name": "client_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth app client key for which to create the token.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The OAuth app client secret for which to create the token.</p>",
            "maxLength": 40,
            "type": "string",
            "name": "client_secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth app client secret for which to create the token.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A unique string to distinguish an authorization from others created for the same client ID and user.</p>",
            "type": "string",
            "name": "fingerprint",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p><strong>Warning:</strong> Apps must use the <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a> to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the <a href=\"https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api\">blog post</a>.</p>\n<p>Creates OAuth tokens using <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#basic-authentication\">Basic Authentication</a>. If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication\">Working with two-factor authentication</a>.\"</p>\n<p>To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use <code>fingerprint</code> to differentiate between them.</p>\n<p>You can also create tokens on GitHub Enterprise Server from the <a href=\"https://github.com/settings/tokens\">personal access tokens settings</a> page. Read more about these tokens in <a href=\"https://docs.github.com/articles/creating-an-access-token-for-command-line-use\">the GitHub Help documentation</a>.</p>\n<p>Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in <a href=\"https://docs.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on\">the GitHub Help documentation</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/authorizations/clients/{client_id}",
        "title": "Get-or-create an authorization for a specific app",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The OAuth app client secret for which to create the token.</p>",
            "maxLength": 40,
            "type": "string",
            "name": "client_secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth app client secret for which to create the token.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A list of scopes that this authorization is in.</p>",
            "type": "array of strings or null",
            "items": {
              "type": "string"
            },
            "examples": [
              "public_repo",
              "user"
            ],
            "name": "scopes",
            "in": "body",
            "rawType": [
              "array",
              "null"
            ],
            "rawDescription": "A list of scopes that this authorization is in.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A note to remind you what the OAuth token is for.</p>",
            "type": "string",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A note to remind you what the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A URL to remind you what app the OAuth token is for.</p>",
            "type": "string",
            "name": "note_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL to remind you what app the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A unique string to distinguish an authorization from others created for the same client ID and user.</p>",
            "type": "string",
            "name": "fingerprint",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "response-if-returning-an-existing-token",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if returning an existing token",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": ""
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "**Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p><strong>Warning:</strong> Apps must use the <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a> to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the <a href=\"https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api\">blog post</a>.</p>\n<p>Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.</p>\n<p>If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication\">Working with two-factor authentication</a>.\"</p>\n<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if returning an existing token</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p><strong>Deprecation Notice:</strong> GitHub will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/authorizations/clients/{client_id}/{fingerprint}",
        "title": "Get-or-create an authorization for a specific app and fingerprint",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "examples": {
              "default": {
                "value": "Iv1.8a61f9b3a7aba766"
              }
            },
            "descriptionHTML": "<p>The client ID of your GitHub app.</p>"
          },
          {
            "name": "fingerprint",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The OAuth app client secret for which to create the token.</p>",
            "maxLength": 40,
            "type": "string",
            "name": "client_secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The OAuth app client secret for which to create the token.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A list of scopes that this authorization is in.</p>",
            "type": "array of strings or null",
            "items": {
              "type": "string"
            },
            "examples": [
              "public_repo",
              "user"
            ],
            "name": "scopes",
            "in": "body",
            "rawType": [
              "array",
              "null"
            ],
            "rawDescription": "A list of scopes that this authorization is in.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A note to remind you what the OAuth token is for.</p>",
            "type": "string",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A note to remind you what the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A URL to remind you what app the OAuth token is for.</p>",
            "type": "string",
            "name": "note_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL to remind you what app the OAuth token is for.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "response-if-returning-an-existing-token",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "fingerprint": "FINGERPRINT"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if returning an existing token",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "client_id": "Iv1.8a61f9b3a7aba766",
                "fingerprint": "FINGERPRINT"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response if returning a new token",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p><strong>Warning:</strong> Apps must use the <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a> to obtain OAuth tokens that work with GitHub Enterprise Server SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub Enterprise Server SAML organizations. For more information, see the <a href=\"https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api\">blog post</a>.</p>\n<p>This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. <code>fingerprint</code> is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.</p>\n<p>If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication\">Working with two-factor authentication</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if returning an existing token</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Response if returning a new token</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/authorizations/{authorization_id}",
        "title": "Get a single authorization",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "authorization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>authorization_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "authorization_id": "AUTHORIZATION_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/authorizations/{authorization_id}",
        "title": "Update an existing authorization",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "authorization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>authorization_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>A list of scopes that this authorization is in.</p>",
            "type": "array of strings or null",
            "items": {
              "type": "string"
            },
            "examples": [
              "public_repo",
              "user"
            ],
            "name": "scopes",
            "in": "body",
            "rawType": [
              "array",
              "null"
            ],
            "rawDescription": "A list of scopes that this authorization is in.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A list of scopes to add to this authorization.</p>",
            "type": "array of strings",
            "items": {
              "type": "string"
            },
            "name": "add_scopes",
            "in": "body",
            "rawType": "array",
            "rawDescription": "A list of scopes to add to this authorization.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A list of scopes to remove from this authorization.</p>",
            "type": "array of strings",
            "items": {
              "type": "string"
            },
            "name": "remove_scopes",
            "in": "body",
            "rawType": "array",
            "rawDescription": "A list of scopes to remove from this authorization.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A note to remind you what the OAuth token is for.</p>",
            "type": "string",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A note to remind you what the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A URL to remind you what app the OAuth token is for.</p>",
            "type": "string",
            "name": "note_url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL to remind you what app the OAuth token is for.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A unique string to distinguish an authorization from others created for the same client ID and user.</p>",
            "type": "string",
            "name": "fingerprint",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A unique string to distinguish an authorization from others created for the same client ID and user.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "authorization_id": "AUTHORIZATION_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/authorizations/1",
                "scopes": [
                  "public_repo"
                ],
                "token": "ghu_16C7e42F292c6912E7710c838347Ae178B4a",
                "token_last_eight": "Ae178B4a",
                "hashed_token": "25f94a2a5c7fbaf499c665bc73d67c1c87e496da8985131633ee0a95819db2e8",
                "app": {
                  "url": "http://my-github-app.com",
                  "name": "my github app",
                  "client_id": "abcde12345fghij67890"
                },
                "note": "optional note",
                "note_url": "http://optional/note/url",
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "fingerprint": "jklmnop12345678"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations/\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/developers/apps/authorizing-oauth-apps#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>\n<p>If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/other-authentication-methods#working-with-two-factor-authentication\">Working with two-factor authentication</a>.\"</p>\n<p>You can only send one of these scope keys at a time.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/authorizations/{authorization_id}",
        "title": "Delete an authorization",
        "category": "oauth-authorizations",
        "parameters": [
          {
            "name": "authorization_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>authorization_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "authorization_id": "AUTHORIZATION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> GitHub Enterprise Server will discontinue the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a>, which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow\">web application flow</a>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/oauth-authorizations\">OAuth Authorizations API</a> will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the <a href=\"https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/\">blog post</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "oauth-authorizations"
      }
    ]
  },
  "orgs": {
    "orgs": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/organizations",
        "title": "List organizations",
        "category": "orgs",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>An organization ID. Only return organizations with an ID greater than this ID.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all organizations, in the order that they were created on GitHub Enterprise Server.</p>\n<p><strong>Note:</strong> Pagination is powered exclusively by the <code>since</code> parameter. Use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header\">Link header</a> to get the URL for the next page of organizations.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "orgs"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}",
        "title": "Get an organization",
        "category": "orgs",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "issues_url": "https://api.github.com/orgs/github/issues",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization",
                "name": "github",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "twitter_username": "github",
                "is_verified": true,
                "has_organization_projects": true,
                "has_repository_projects": true,
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "html_url": "https://github.com/octocat",
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2014-03-03T18:58:10Z",
                "type": "Organization",
                "total_private_repos": 100,
                "owned_private_repos": 100,
                "private_gists": 81,
                "disk_usage": 10000,
                "collaborators": 8,
                "billing_email": "mona@github.com",
                "plan": {
                  "name": "Medium",
                  "space": 400,
                  "private_repos": 20,
                  "filled_seats": 4,
                  "seats": 5
                },
                "default_repository_permission": "read",
                "members_can_create_repositories": true,
                "two_factor_requirement_enabled": true,
                "members_allowed_repository_creation_type": "all",
                "members_can_create_public_repositories": false,
                "members_can_create_private_repositories": false,
                "members_can_create_internal_repositories": false,
                "members_can_create_pages": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>To see many of the organization response values, you need to be an authenticated organization owner with the <code>admin:org</code> scope. When the value of <code>two_factor_requirement_enabled</code> is <code>true</code>, the organization requires all members, billing managers, and outside collaborators to enable <a href=\"https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/\">two-factor authentication</a>.</p>\n<p>GitHub Apps with the <code>Organization plan</code> permission can use this endpoint to retrieve information about an organization's GitHub Enterprise Server plan. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/authenticating-with-github-apps/\">Authenticating with GitHub Apps</a>\" for details. For an example response, see 'Response with GitHub Enterprise Server plan information' below.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>New repository creation permissions are available to preview. You can now use <code>members_can_create_public_repositories</code>, <code>members_can_create_private_repositories</code>, and <code>members_can_create_internal_repositories</code>. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.</p>\n<p>To access these new parameters during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.surtur-preview+json</code></pre>"
        ],
        "subcategory": "orgs"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}",
        "title": "Update an organization",
        "category": "orgs",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Billing email address. This address is not publicized.</p>",
            "name": "billing_email",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Billing email address. This address is not publicized.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The company name.</p>",
            "name": "company",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The company name.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The publicly visible email address.</p>",
            "name": "email",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The publicly visible email address.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The Twitter username of the company.</p>",
            "name": "twitter_username",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The Twitter username of the company.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The location.</p>",
            "name": "location",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The location.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The shorthand name of the company.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The shorthand name of the company.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the company.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the company.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether an organization can use organization projects.</p>",
            "name": "has_organization_projects",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether an organization can use organization projects.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether repositories that belong to the organization can use repository projects.</p>",
            "name": "has_repository_projects",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether repositories that belong to the organization can use repository projects.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Default permission level members have for organization repositories:<br>\n* <code>read</code> - can pull, but not push to or administer this repository.<br>\n* <code>write</code> - can pull and push, but not administer this repository.<br>\n* <code>admin</code> - can pull, push, and administer this repository.<br>\n* <code>none</code> - no permissions granted by default.</p>",
            "enum": [
              "read",
              "write",
              "admin",
              "none"
            ],
            "default": "read",
            "name": "default_repository_permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Default permission level members have for organization repositories:  \n\\* `read` - can pull, but not push to or administer this repository.  \n\\* `write` - can pull and push, but not administer this repository.  \n\\* `admin` - can pull, push, and administer this repository.  \n\\* `none` - no permissions granted by default.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles the ability of non-admin organization members to create repositories. Can be one of:<br>\n* <code>true</code> - all organization members can create repositories.<br>\n* <code>false</code> - only organization owners can create repositories.<br>\nDefault: <code>true</code><br>\n<strong>Note:</strong> A parameter can override this parameter. See <code>members_allowed_repository_creation_type</code> in this table for details. <strong>Note:</strong> A parameter can override this parameter. See <code>members_allowed_repository_creation_type</code> in this table for details.</p>",
            "default": true,
            "name": "members_can_create_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles the ability of non-admin organization members to create repositories. Can be one of:  \n\\* `true` - all organization members can create repositories.  \n\\* `false` - only organization owners can create repositories.  \nDefault: `true`  \n**Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:<br>\n* <code>true</code> - all organization members can create internal repositories.<br>\n* <code>false</code> - only organization owners can create internal repositories.<br>\nDefault: <code>true</code>. For more information, see \"<a href=\"https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization\">Restricting repository creation in your organization</a>\" in the GitHub Help documentation.</p>",
            "name": "members_can_create_internal_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:  \n\\* `true` - all organization members can create internal repositories.  \n\\* `false` - only organization owners can create internal repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:<br>\n* <code>true</code> - all organization members can create private repositories.<br>\n* <code>false</code> - only organization owners can create private repositories.<br>\nDefault: <code>true</code>. For more information, see \"<a href=\"https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization\">Restricting repository creation in your organization</a>\" in the GitHub Help documentation.</p>",
            "name": "members_can_create_private_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:  \n\\* `true` - all organization members can create private repositories.  \n\\* `false` - only organization owners can create private repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:<br>\n* <code>true</code> - all organization members can create public repositories.<br>\n* <code>false</code> - only organization owners can create public repositories.<br>\nDefault: <code>true</code>. For more information, see \"<a href=\"https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization\">Restricting repository creation in your organization</a>\" in the GitHub Help documentation.</p>",
            "name": "members_can_create_public_repositories",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:  \n\\* `true` - all organization members can create public repositories.  \n\\* `false` - only organization owners can create public repositories.  \nDefault: `true`. For more information, see \"[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Specifies which types of repositories non-admin organization members can create. Can be one of:<br>\n* <code>all</code> - all organization members can create public and private repositories.<br>\n* <code>private</code> - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.<br>\n* <code>none</code> - only admin members can create repositories.<br>\n<strong>Note:</strong> This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in <code>members_can_create_repositories</code>. See the parameter deprecation notice in the operation description for details.</p>",
            "enum": [
              "all",
              "private",
              "none"
            ],
            "name": "members_allowed_repository_creation_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Specifies which types of repositories non-admin organization members can create. Can be one of:  \n\\* `all` - all organization members can create public and private repositories.  \n\\* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.  \n\\* `none` - only admin members can create repositories.  \n**Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Toggles whether organization members can create GitHub Pages sites. Can be one of:<br>\n* <code>true</code> - all organization members can create GitHub Pages sites.<br>\n* <code>false</code> - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.</p>",
            "default": true,
            "name": "members_can_create_pages",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Toggles whether organization members can create GitHub Pages sites. Can be one of:  \n\\* `true` - all organization members can create GitHub Pages sites.  \n\\* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"http://github.blog\""
            ],
            "name": "blog",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "billing_email": "mona@github.com",
                "company": "GitHub",
                "email": "mona@github.com",
                "twitter_username": "github",
                "location": "San Francisco",
                "name": "github",
                "description": "GitHub, the company.",
                "default_repository_permission": "read",
                "members_can_create_repositories": true,
                "members_allowed_repository_creation_type": "all"
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "login": "github",
                "id": 1,
                "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                "url": "https://api.github.com/orgs/github",
                "repos_url": "https://api.github.com/orgs/github/repos",
                "events_url": "https://api.github.com/orgs/github/events",
                "hooks_url": "https://api.github.com/orgs/github/hooks",
                "issues_url": "https://api.github.com/orgs/github/issues",
                "members_url": "https://api.github.com/orgs/github/members{/member}",
                "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "description": "A great organization",
                "name": "github",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "twitter_username": "github",
                "is_verified": true,
                "has_organization_projects": true,
                "has_repository_projects": true,
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "html_url": "https://github.com/octocat",
                "created_at": "2008-01-14T04:33:35Z",
                "type": "Organization",
                "total_private_repos": 100,
                "owned_private_repos": 100,
                "private_gists": 81,
                "disk_usage": 10000,
                "collaborators": 8,
                "billing_email": "mona@github.com",
                "plan": {
                  "name": "Medium",
                  "space": 400,
                  "private_repos": 20
                },
                "default_repository_permission": "read",
                "members_can_create_repositories": true,
                "two_factor_requirement_enabled": true,
                "members_allowed_repository_creation_type": "all",
                "members_can_create_public_repositories": false,
                "members_can_create_private_repositories": false,
                "members_can_create_internal_repositories": false,
                "members_can_create_pages": true,
                "members_can_create_public_pages": true,
                "members_can_create_private_pages": true,
                "updated_at": "2014-03-03T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Parameter Deprecation Notice:</strong> GitHub Enterprise Server will replace and discontinue <code>members_allowed_repository_creation_type</code> in favor of more granular permissions. The new input parameters are <code>members_can_create_public_repositories</code>, <code>members_can_create_private_repositories</code> for all organizations and <code>members_can_create_internal_repositories</code> for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes\">blog post</a>.</p>\n<p>Enables an authenticated organization owner with the <code>admin:org</code> scope to update the organization's profile and member privileges.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>New repository creation permissions are available to preview. You can now use <code>members_can_create_public_repositories</code>, <code>members_can_create_private_repositories</code>, and <code>members_can_create_internal_repositories</code>. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. These parameters provide more granular permissions to configure the type of repositories organization members can create.</p>\n<p>To access these new parameters during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.surtur-preview+json</code></pre>"
        ],
        "subcategory": "orgs"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/installations",
        "title": "List app installations for an organization",
        "category": "orgs",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "installations": [
                  {
                    "id": 25381,
                    "account": {
                      "login": "octo-org",
                      "id": 6811672,
                      "node_id": "MDEyOk9yZ2FuaXphdGlvbjY4MTE2NzI=",
                      "avatar_url": "https://avatars3.githubusercontent.com/u/6811672?v=4",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octo-org",
                      "html_url": "https://github.com/octo-org",
                      "followers_url": "https://api.github.com/users/octo-org/followers",
                      "following_url": "https://api.github.com/users/octo-org/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octo-org/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octo-org/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octo-org/subscriptions",
                      "organizations_url": "https://api.github.com/users/octo-org/orgs",
                      "repos_url": "https://api.github.com/users/octo-org/repos",
                      "events_url": "https://api.github.com/users/octo-org/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octo-org/received_events",
                      "type": "Organization",
                      "site_admin": false
                    },
                    "repository_selection": "selected",
                    "access_tokens_url": "https://api.github.com/app/installations/25381/access_tokens",
                    "repositories_url": "https://api.github.com/installation/repositories",
                    "html_url": "https://github.com/organizations/octo-org/settings/installations/25381",
                    "app_id": 2218,
                    "target_id": 6811672,
                    "target_type": "Organization",
                    "permissions": {
                      "deployments": "write",
                      "metadata": "read",
                      "pull_requests": "read",
                      "statuses": "read"
                    },
                    "events": [
                      "deployment",
                      "deployment_status"
                    ],
                    "created_at": "2017-05-16T08:47:09.000-07:00",
                    "updated_at": "2017-06-06T11:23:23.000-07:00",
                    "single_file_name": "config.yml",
                    "has_multiple_single_files": true,
                    "single_file_paths": [
                      "config.yml",
                      ".github/issue_TEMPLATE.md"
                    ],
                    "app_slug": "github-actions",
                    "suspended_at": null,
                    "suspended_by": null
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with <code>admin:read</code> scope to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "orgs"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/orgs",
        "title": "List organizations for the authenticated user",
        "category": "orgs",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List organizations for the authenticated user.</p>\n<p><strong>OAuth scope requirements</strong></p>\n<p>This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with <code>read:org</code> scope, you can publicize your organization membership with <code>user</code> scope, etc.). Therefore, this API requires at least <code>user</code> or <code>read:org</code> scope. OAuth requests with insufficient scope receive a <code>403 Forbidden</code> response.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "orgs"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/orgs",
        "title": "List organizations for a user",
        "category": "orgs",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List <a href=\"https://docs.github.com/articles/publicizing-or-concealing-organization-membership\">public organization memberships</a> for the specified user.</p>\n<p>This method only lists <em>public</em> memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#list-organizations-for-the-authenticated-user\">List organizations for the authenticated user</a> API instead.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "orgs"
      }
    ],
    "members": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/members",
        "title": "List organization members",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "2fa_disabled",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filter members returned in the list. Can be one of:<br>\n* <code>2fa_disabled</code> - Members without <a href=\"https://github.com/blog/1614-two-factor-authentication\">two-factor authentication</a> enabled. Available for organization owners.<br>\n* <code>all</code> - All members the authenticated user can see.</p>"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "admin",
                "member"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filter members returned by their role. Can be one of:<br>\n* <code>all</code> - All members of the organization, regardless of role.<br>\n* <code>admin</code> - Organization owners.<br>\n* <code>member</code> - Non-owner organization members.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "302",
            "description": "<p>Response if requester is not an organization member</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/members/{username}",
        "title": "Check organization membership for a user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if requester is an organization member and user is a member"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Check if a user is, publicly or privately, a member of the organization.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if requester is an organization member and user is a member</p>"
          },
          {
            "httpStatusCode": "302",
            "description": "<p>Response if requester is not an organization member</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if requester is an organization member and user is not a member</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/members/{username}",
        "title": "Remove an organization member",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/memberships/{username}",
        "title": "Get organization membership for a user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user has an active admin membership with organization",
              "example": {
                "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
                "state": "active",
                "role": "admin",
                "organization_url": "https://api.github.com/orgs/octocat",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>In order to get a user's membership with an organization, the authenticated user must be an organization member. The <code>state</code> parameter in the response can be used to identify the user's membership status.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/memberships/{username}",
        "title": "Set organization membership for a user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The role to give the user in the organization. Can be one of:<br>\n* <code>admin</code> - The user will become an owner of the organization.<br>\n* <code>member</code> - The user will become a non-owner member of the organization.</p>",
            "enum": [
              "admin",
              "member"
            ],
            "default": "member",
            "name": "role",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The role to give the user in the organization. Can be one of:  \n\\* `admin` - The user will become an owner of the organization.  \n\\* `member` - The user will become a non-owner member of the organization.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user has an active admin membership with organization",
              "example": {
                "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
                "state": "active",
                "role": "admin",
                "organization_url": "https://api.github.com/orgs/octocat",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Only authenticated organization owners can add a member to the organization or update the member's role.</p>\n<ul>\n<li>If the authenticated user is <em>adding</em> a member to the organization, the invited user will receive an email inviting them to the organization. The user's <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#get-organization-membership-for-a-user\">membership status</a> will be <code>pending</code> until they accept the invitation.</li>\n<li>Authenticated users can <em>update</em> a user's membership by passing the <code>role</code> parameter. If the authenticated user changes a member's role to <code>admin</code>, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to <code>member</code>, no email will be sent.</li>\n</ul>\n<p><strong>Rate limits</strong></p>\n<p>To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/memberships/{username}",
        "title": "Remove organization membership for a user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>In order to remove a user's membership with an organization, the authenticated user must be an organization owner.</p>\n<p>If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/public_members",
        "title": "List public organization members",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Members of an organization can choose to have their membership publicized or not.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/public_members/{username}",
        "title": "Check public organization membership for a user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if user is a public member"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if user is a public member</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if user is not a public member</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/public_members/{username}",
        "title": "Set public organization membership for the authenticated user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The user can publicize their own membership. (A user cannot publicize the membership for another user.)</p>\n<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/public_members/{username}",
        "title": "Remove public organization membership for the authenticated user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/memberships/orgs",
        "title": "List organization memberships for the authenticated user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "pending"
              ]
            },
            "descriptionHTML": "<p>Indicates the state of the memberships to return. Can be either <code>active</code> or <code>pending</code>. If not specified, the API returns both active and pending memberships.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
                  "state": "active",
                  "role": "admin",
                  "organization_url": "https://api.github.com/orgs/octocat",
                  "organization": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "hooks_url": "https://api.github.com/orgs/github/hooks",
                    "issues_url": "https://api.github.com/orgs/github/issues",
                    "members_url": "https://api.github.com/orgs/github/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization"
                  },
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                },
                {
                  "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
                  "state": "pending",
                  "role": "admin",
                  "organization_url": "https://api.github.com/orgs/invitocat",
                  "organization": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "hooks_url": "https://api.github.com/orgs/github/hooks",
                    "issues_url": "https://api.github.com/orgs/github/issues",
                    "members_url": "https://api.github.com/orgs/github/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization"
                  },
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/memberships/orgs/{org}",
        "title": "Get an organization membership for the authenticated user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/orgs/invitocat/memberships/defunkt",
                "state": "pending",
                "role": "admin",
                "organization_url": "https://api.github.com/orgs/invitocat",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/user/memberships/orgs/{org}",
        "title": "Update an organization membership for the authenticated user",
        "category": "orgs",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The state that the membership should be in. Only <code>\"active\"</code> will be accepted.</p>",
            "enum": [
              "active"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The state that the membership should be in. Only `\"active\"` will be accepted.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "state": "active"
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/orgs/octocat/memberships/defunkt",
                "state": "active",
                "role": "admin",
                "organization_url": "https://api.github.com/orgs/octocat",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization"
                },
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "outside-collaborators": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/outside_collaborators",
        "title": "List outside collaborators for an organization",
        "category": "orgs",
        "subcategory": "outside-collaborators",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "2fa_disabled",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filter the list of outside collaborators. Can be one of:<br>\n* <code>2fa_disabled</code>: Outside collaborators without <a href=\"https://github.com/blog/1614-two-factor-authentication\">two-factor authentication</a> enabled.<br>\n* <code>all</code>: All outside collaborators.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all users who are outside collaborators of an organization.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/outside_collaborators/{username}",
        "title": "Convert an organization member to outside collaborator",
        "category": "orgs",
        "subcategory": "outside-collaborators",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "202",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "202",
              "description": "User is getting converted asynchronously"
            }
          },
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "User was converted"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/articles/converting-an-organization-member-to-an-outside-collaborator/\">Converting an organization member to an outside collaborator</a>\".</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>User is getting converted asynchronously</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>User was converted</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if user is the last owner of the organization or not a member of the organization.</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/outside_collaborators/{username}",
        "title": "Remove outside collaborator from an organization",
        "category": "orgs",
        "subcategory": "outside-collaborators",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removing a user from this list will remove them from all the organization's repositories.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Unprocessable Entity if user is a member of the organization</p>"
          }
        ]
      }
    ],
    "webhooks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/hooks",
        "title": "List organization webhooks",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "url": "https://api.github.com/orgs/octocat/hooks/1",
                  "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
                  "name": "web",
                  "events": [
                    "push",
                    "pull_request"
                  ],
                  "active": true,
                  "config": {
                    "url": "http://example.com",
                    "content_type": "json"
                  },
                  "updated_at": "2011-09-06T20:39:23Z",
                  "created_at": "2011-09-06T17:26:27Z",
                  "type": "Organization"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/hooks",
        "title": "Create an organization webhook",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. Must be passed as \"web\".</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Must be passed as \"web\".",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p><strong>Required</strong>. Key/value pairs to provide settings for this webhook. <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#create-hook-config-params\">These are defined below</a>.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                "format": "uri",
                "examples": [
                  "https://example.com/webhook"
                ],
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "examples": [
                  "\"json\""
                ],
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                "examples": [
                  "\"********\""
                ],
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "examples": [
                      "\"0\""
                    ]
                  },
                  {
                    "type": "number"
                  }
                ],
                "name": "insecure_ssl",
                "in": "body",
                "type": "string or number or ",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "childParamsGroups": []
              },
              "username": {
                "type": "string",
                "examples": [
                  "\"kdaigle\""
                ],
                "name": "username",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              },
              "password": {
                "type": "string",
                "examples": [
                  "\"password\""
                ],
                "name": "password",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              }
            },
            "required": [
              "url"
            ],
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#create-hook-config-params).",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                    "format": "uri",
                    "examples": [
                      "https://example.com/webhook"
                    ],
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "examples": [
                      "\"json\""
                    ],
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                    "examples": [
                      "\"********\""
                    ],
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                    "childParamsGroups": []
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                        "examples": [
                          "\"0\""
                        ]
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "name": "insecure_ssl",
                    "in": "body",
                    "type": "string or number or ",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"kdaigle\""
                    ],
                    "name": "username",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"password\""
                    ],
                    "name": "password",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>Determines what <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> the hook is triggered for.</p>",
            "default": [
              "push"
            ],
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "url": "http://example.com/webhook",
                  "content_type": "json"
                }
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/orgs/octocat/hooks/1",
                "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
                "name": "web",
                "events": [
                  "push",
                  "pull_request"
                ],
                "active": true,
                "config": {
                  "url": "http://example.com",
                  "content_type": "json"
                },
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "type": "Organization"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Here's how you can create a hook that posts payloads in JSON format:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/hooks/{hook_id}",
        "title": "Get an organization webhook",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/orgs/octocat/hooks/1",
                "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
                "name": "web",
                "events": [
                  "push",
                  "pull_request"
                ],
                "active": true,
                "config": {
                  "url": "http://example.com",
                  "content_type": "json"
                },
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "type": "Organization"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns a webhook configured in an organization. To get only the webhook <code>config</code> properties, see \"<a href=\"/rest/reference/orgs#get-a-webhook-configuration-for-an-organization\">Get a webhook configuration for an organization</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/hooks/{hook_id}",
        "title": "Update an organization webhook",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "object",
            "description": "<p>Key/value pairs to provide settings for this webhook. <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#update-hook-config-params\">These are defined below</a>.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                "format": "uri",
                "examples": [
                  "https://example.com/webhook"
                ],
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "examples": [
                  "\"json\""
                ],
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                "examples": [
                  "\"********\""
                ],
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "examples": [
                      "\"0\""
                    ]
                  },
                  {
                    "type": "number"
                  }
                ],
                "name": "insecure_ssl",
                "in": "body",
                "type": "string or number or ",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "childParamsGroups": []
              }
            },
            "required": [
              "url"
            ],
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/orgs#update-hook-config-params).",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                    "format": "uri",
                    "examples": [
                      "https://example.com/webhook"
                    ],
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "examples": [
                      "\"json\""
                    ],
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                    "examples": [
                      "\"********\""
                    ],
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                    "childParamsGroups": []
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                        "examples": [
                          "\"0\""
                        ]
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "name": "insecure_ssl",
                    "in": "body",
                    "type": "string or number or ",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>Determines what <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> the hook is triggered for.</p>",
            "default": [
              "push"
            ],
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"web\""
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "active": true,
                "events": [
                  "pull_request"
                ]
              },
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "url": "https://api.github.com/orgs/octocat/hooks/1",
                "ping_url": "https://api.github.com/orgs/octocat/hooks/1/pings",
                "name": "web",
                "events": [
                  "pull_request"
                ],
                "active": true,
                "config": {
                  "url": "http://example.com",
                  "content_type": "json"
                },
                "updated_at": "2011-09-06T20:39:23Z",
                "created_at": "2011-09-06T17:26:27Z",
                "type": "Organization"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates a webhook configured in an organization. When you update a webhook, the <code>secret</code> will be overwritten. If you previously had a <code>secret</code> set, you must provide the same <code>secret</code> or set a new <code>secret</code> or the secret will be removed. If you are only updating individual webhook <code>config</code> properties, use \"<a href=\"/rest/reference/orgs#update-a-webhook-configuration-for-an-organization\">Update a webhook configuration for an organization</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/hooks/{hook_id}",
        "title": "Delete an organization webhook",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/hooks/{hook_id}/config",
        "title": "Get a webhook configuration for an organization",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the webhook configuration for an organization. To get more information about the webhook, including the <code>active</code> state and <code>events</code>, use \"<a href=\"/rest/reference/orgs#get-an-organization-webhook\">Get an organization webhook </a>.\"</p>\n<p>Access tokens must have the <code>admin:org_hook</code> scope, and GitHub Apps must have the <code>organization_hooks:read</code> permission.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/hooks/{hook_id}/config",
        "title": "Update a webhook configuration for an organization",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The URL to which the payloads will be delivered.</p>",
            "format": "uri",
            "examples": [
              "https://example.com/webhook"
            ],
            "name": "url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The URL to which the payloads will be delivered.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
            "examples": [
              "\"json\""
            ],
            "name": "content_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
            "examples": [
              "\"********\""
            ],
            "name": "secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "string",
                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                "examples": [
                  "\"0\""
                ]
              },
              {
                "type": "number"
              }
            ],
            "name": "insecure_ssl",
            "in": "body",
            "type": "string or number or ",
            "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the webhook configuration for an organization. To update more information about the webhook, including the <code>active</code> state and <code>events</code>, use \"<a href=\"/rest/reference/orgs#update-an-organization-webhook\">Update an organization webhook </a>.\"</p>\n<p>Access tokens must have the <code>admin:org_hook</code> scope, and GitHub Apps must have the <code>organization_hooks:write</code> permission.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/hooks/{hook_id}/pings",
        "title": "Ping an organization webhook",
        "category": "orgs",
        "subcategory": "webhooks",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This will trigger a <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event\">ping event</a> to be sent to the hook.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ]
  },
  "pages": {
    "pages": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pages",
        "title": "Get a GitHub Enterprise Server Pages site",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/github/developer.github.com/pages",
                "status": "built",
                "cname": "developer.github.com",
                "custom_404": false,
                "html_url": "https://developer.github.com",
                "source": {
                  "branch": "master",
                  "path": "/"
                },
                "public": true,
                "https_certificate": {
                  "state": "approved",
                  "description": "Certificate is approved",
                  "domains": [
                    "developer.github.com"
                  ],
                  "expires_at": "2021-05-22"
                },
                "https_enforced": true
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pages",
        "title": "Create a GitHub Enterprise Server Pages site",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "object",
            "description": "<p><strong>Required</strong>. The source branch and directory used to publish your Pages site.</p>",
            "properties": {
              "branch": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The repository branch used to publish your site's source files.</p>",
                "name": "branch",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The repository branch used to publish your site's source files.",
                "childParamsGroups": []
              },
              "path": {
                "type": "string",
                "description": "<p>The repository directory that includes the source files for the Pages site. Allowed paths are <code>/</code> or <code>/docs</code>. Default: <code>/</code></p>",
                "enum": [
                  "/",
                  "/docs"
                ],
                "default": "/",
                "name": "path",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`",
                "childParamsGroups": []
              }
            },
            "required": [
              "branch"
            ],
            "name": "source",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The source branch and directory used to publish your Pages site.",
            "childParamsGroups": [
              {
                "parentName": "source",
                "parentType": "object",
                "id": "source-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The repository branch used to publish your site's source files.</p>",
                    "name": "branch",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The repository branch used to publish your site's source files.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The repository directory that includes the source files for the Pages site. Allowed paths are <code>/</code> or <code>/docs</code>. Default: <code>/</code></p>",
                    "enum": [
                      "/",
                      "/docs"
                    ],
                    "default": "/",
                    "name": "path",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "source": {
                  "branch": "main",
                  "path": "/docs"
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/github/developer.github.com/pages",
                "status": "built",
                "cname": "developer.github.com",
                "custom_404": false,
                "html_url": "https://developer.github.com",
                "source": {
                  "branch": "master",
                  "path": "/"
                },
                "public": true,
                "https_certificate": {
                  "state": "approved",
                  "description": "Certificate is approved",
                  "domains": [
                    "developer.github.com"
                  ],
                  "expires_at": "2021-05-22"
                },
                "https_enforced": true
              }
            }
          }
        ],
        "descriptionHTML": "<p>Configures a GitHub Enterprise Server Pages site. For more information, see \"<a href=\"/github/working-with-github-pages/about-github-pages\">About GitHub Pages</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/\">blog post</a> preview for more details. To access the new endpoints during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.switcheroo-preview+json</code></pre>"
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/pages",
        "title": "Update information about a GitHub Enterprise Server Pages site",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string or null",
            "description": "<p>Specify a custom domain for the repository. Sending a <code>null</code> value will remove the custom domain. For more about custom domains, see \"<a href=\"https://docs.github.com/articles/using-a-custom-domain-with-github-pages/\">Using a custom domain with GitHub Pages</a>.\"</p>",
            "name": "cname",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see \"[Using a custom domain with GitHub Pages](https://docs.github.com/articles/using-a-custom-domain-with-github-pages/).\"",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Specify whether HTTPS should be enforced for the repository.</p>",
            "name": "https_enforced",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Specify whether HTTPS should be enforced for the repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Configures access controls for the GitHub Pages site. If public is set to <code>true</code>, the site is accessible to anyone on the internet. If set to <code>false</code>, the site will only be accessible to users who have at least <code>read</code> access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to <code>internal</code> visibility. This feature is only available to repositories in an organization on an Enterprise plan.</p>",
            "name": "public",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan.",
            "childParamsGroups": []
          },
          {
            "anyOf": [
              {
                "type": "string",
                "description": "Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory `/docs`. Possible values are `\"gh-pages\"`, `\"master\"`, and `\"master /docs\"`.",
                "enum": [
                  "gh-pages",
                  "master",
                  "master /docs"
                ]
              },
              {
                "type": "object",
                "description": "Update the source for the repository. Must include the branch name and path.",
                "properties": {
                  "branch": {
                    "type": "string",
                    "description": "The repository branch used to publish your site's source files."
                  },
                  "path": {
                    "type": "string",
                    "description": "The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`.",
                    "enum": [
                      "/",
                      "/docs"
                    ]
                  }
                },
                "required": [
                  "branch",
                  "path"
                ]
              }
            ],
            "name": "source",
            "in": "body",
            "type": "",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "cname": "octocatblog.com",
                "source": {
                  "branch": "main",
                  "path": "/"
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates information for a GitHub Enterprise Server Pages site. For more information, see \"<a href=\"/github/working-with-github-pages/about-github-pages\">About GitHub Pages</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pages",
        "title": "Delete a GitHub Enterprise Server Pages site",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Enabling and disabling Pages in the Pages API is currently available for developers to preview. See the <a href=\"https://developer.github.com/changes/2019-03-14-enabling-disabling-pages/\">blog post</a> preview for more details. To access the new endpoints during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.switcheroo-preview+json</code></pre>"
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pages/builds",
        "title": "List GitHub Enterprise Server Pages builds",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601",
                  "status": "built",
                  "error": {
                    "message": null
                  },
                  "pusher": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
                  "duration": 2104,
                  "created_at": "2014-02-10T19:00:49Z",
                  "updated_at": "2014-02-10T19:00:51Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pages/builds",
        "title": "Request a GitHub Enterprise Server Pages build",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/latest",
                "status": "queued"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.</p>\n<p>Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pages/builds/latest",
        "title": "Get latest Pages build",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601",
                "status": "built",
                "error": {
                  "message": null
                },
                "pusher": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
                "duration": 2104,
                "created_at": "2014-02-10T19:00:49Z",
                "updated_at": "2014-02-10T19:00:51Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "pages"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pages/builds/{build_id}",
        "title": "Get GitHub Enterprise Server Pages build",
        "category": "pages",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "build_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "build_id": "BUILD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/github/developer.github.com/pages/builds/5472601",
                "status": "built",
                "error": {
                  "message": null
                },
                "pusher": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "commit": "351391cdcb88ffae71ec3028c91f375a8036a26b",
                "duration": 2104,
                "created_at": "2014-02-10T19:00:49Z",
                "updated_at": "2014-02-10T19:00:51Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "pages"
      }
    ]
  },
  "projects": {
    "projects": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/projects",
        "title": "List organization projects",
        "category": "projects",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the projects to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "owner_url": "https://api.github.com/orgs/octocat",
                  "url": "https://api.github.com/projects/1002605",
                  "html_url": "https://github.com/orgs/api-playground/projects/1",
                  "columns_url": "https://api.github.com/projects/1002605/columns",
                  "id": 1002605,
                  "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                  "name": "Organization Roadmap",
                  "body": "High-level roadmap for the upcoming year.",
                  "number": 1,
                  "state": "open",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-11T20:09:31Z",
                  "updated_at": "2014-03-04T18:58:10Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists the projects in an organization. Returns a <code>404 Not Found</code> status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/projects",
        "title": "Create an organization project",
        "category": "projects",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the project.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the project.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the project.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the project.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Organization Roadmap",
                "body": "High-level roadmap for the upcoming year."
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/orgs/octocat",
                "url": "https://api.github.com/projects/1002605",
                "html_url": "https://github.com/orgs/api-playground/projects/1",
                "columns_url": "https://api.github.com/projects/1002605/columns",
                "id": 1002605,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                "name": "Organization Roadmap",
                "body": "High-level roadmap for the upcoming year.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-11T20:09:31Z",
                "updated_at": "2014-03-04T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates an organization project board. Returns a <code>404 Not Found</code> status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/{project_id}",
        "title": "Get a project",
        "category": "projects",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/repos/api-playground/projects-test",
                "url": "https://api.github.com/projects/1002604",
                "html_url": "https://github.com/api-playground/projects-test/projects/1",
                "columns_url": "https://api.github.com/projects/1002604/columns",
                "id": 1002604,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Gets a project by its <code>id</code>. Returns a <code>404 Not Found</code> status if projects are disabled. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/projects/{project_id}",
        "title": "Update a project",
        "category": "projects",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>Name of the project</p>",
            "type": "string",
            "examples": [
              "Week One Sprint"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the project",
            "childParamsGroups": []
          },
          {
            "description": "<p>Body of the project</p>",
            "type": "string or null",
            "examples": [
              "This project represents the sprint of the first week in January"
            ],
            "name": "body",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Body of the project",
            "childParamsGroups": []
          },
          {
            "description": "<p>State of the project; either 'open' or 'closed'</p>",
            "type": "string",
            "examples": [
              "open"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "State of the project; either 'open' or 'closed'",
            "childParamsGroups": []
          },
          {
            "description": "<p>The baseline permission that all organization members have on this project</p>",
            "type": "string",
            "enum": [
              "read",
              "write",
              "admin",
              "none"
            ],
            "name": "organization_permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The baseline permission that all organization members have on this project",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether or not this project can be seen by everyone.</p>",
            "type": "boolean",
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether or not this project can be seen by everyone.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/repos/api-playground/projects-test",
                "url": "https://api.github.com/projects/1002604",
                "html_url": "https://github.com/api-playground/projects-test/projects/1",
                "columns_url": "https://api.github.com/projects/1002604/columns",
                "id": 1002604,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Updates a project board's information. Returns a <code>404 Not Found</code> status if projects are disabled. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if the authenticated user does not have access to the project</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/projects/{project_id}",
        "title": "Delete a project",
        "category": "projects",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Delete Success"
            }
          }
        ],
        "descriptionHTML": "<p>Deletes a project board. Returns a <code>404 Not Found</code> status if projects are disabled.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Delete Success</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/projects",
        "title": "List repository projects",
        "category": "projects",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the projects to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "owner_url": "https://api.github.com/repos/api-playground/projects-test",
                  "url": "https://api.github.com/projects/1002604",
                  "html_url": "https://github.com/api-playground/projects-test/projects/1",
                  "columns_url": "https://api.github.com/projects/1002604/columns",
                  "id": 1002604,
                  "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
                  "name": "Projects Documentation",
                  "body": "Developer documentation project for the developer site.",
                  "number": 1,
                  "state": "open",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists the projects in a repository. Returns a <code>404 Not Found</code> status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/projects",
        "title": "Create a repository project",
        "category": "projects",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the project.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the project.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the project.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the project.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site."
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/repos/api-playground/projects-test",
                "url": "https://api.github.com/projects/1002604",
                "html_url": "https://github.com/api-playground/projects-test/projects/1",
                "columns_url": "https://api.github.com/projects/1002604/columns",
                "id": 1002604,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDQ=",
                "name": "Projects Documentation",
                "body": "Developer documentation project for the developer site.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a repository project board. Returns a <code>404 Not Found</code> status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a <code>401 Unauthorized</code> or <code>410 Gone</code> status is returned.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/user/projects",
        "title": "Create a user project",
        "category": "projects",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the project</p>",
            "type": "string",
            "examples": [
              "Week One Sprint"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the project",
            "childParamsGroups": []
          },
          {
            "description": "<p>Body of the project</p>",
            "type": "string or null",
            "examples": [
              "This project represents the sprint of the first week in January"
            ],
            "name": "body",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "Body of the project",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/users/octocat",
                "url": "https://api.github.com/projects/1002603",
                "html_url": "https://github.com/users/octocat/projects/1",
                "columns_url": "https://api.github.com/projects/1002603/columns",
                "id": 1002603,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
                "name": "My Projects",
                "body": "A board to manage my personal projects.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-10T20:09:31Z",
                "updated_at": "2014-03-03T18:58:10Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/projects",
        "title": "List user projects",
        "category": "projects",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Indicates the state of the projects to return. Can be either <code>open</code>, <code>closed</code>, or <code>all</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "owner_url": "https://api.github.com/users/octocat",
                  "url": "https://api.github.com/projects/1002603",
                  "html_url": "https://github.com/users/octocat/projects/1",
                  "columns_url": "https://api.github.com/projects/1002603/columns",
                  "id": 1002603,
                  "node_id": "MDc6UHJvamVjdDEwMDI2MDM=",
                  "name": "My Projects",
                  "body": "A board to manage my personal projects.",
                  "number": 1,
                  "state": "open",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "projects"
      }
    ],
    "cards": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/columns/cards/{card_id}",
        "title": "Get a project card",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>card_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "card_id": "CARD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/cards/1478",
                "id": 1478,
                "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
                "note": "Add payload for delete Project column",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2016-09-05T14:21:06Z",
                "updated_at": "2016-09-05T14:20:22Z",
                "archived": false,
                "column_url": "https://api.github.com/projects/columns/367",
                "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
                "project_url": "https://api.github.com/projects/120"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/projects/columns/cards/{card_id}",
        "title": "Update an existing project card",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>card_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>The project card's note</p>",
            "type": "string or null",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "The project card's note",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether or not the card is archived</p>",
            "type": "boolean",
            "examples": [
              false
            ],
            "name": "archived",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether or not the card is archived",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "card_id": "CARD_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/cards/1478",
                "id": 1478,
                "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
                "note": "Add payload for delete Project column",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2016-09-05T14:21:06Z",
                "updated_at": "2016-09-05T14:20:22Z",
                "archived": false,
                "column_url": "https://api.github.com/projects/columns/367",
                "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
                "project_url": "https://api.github.com/projects/120"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/projects/columns/cards/{card_id}",
        "title": "Delete a project card",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>card_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "card_id": "CARD_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/projects/columns/cards/{card_id}/moves",
        "title": "Move a project card",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "card_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>card_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The position of the card in a column. Can be one of: <code>top</code>, <code>bottom</code>, or <code>after:&#x3C;card_id></code> to place after the specified card.</p>",
            "type": "string",
            "pattern": "^(?:top|bottom|after:\\d+)$",
            "examples": [
              "bottom"
            ],
            "name": "position",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The unique identifier of the column the card should be moved to</p>",
            "type": "integer",
            "examples": [
              42
            ],
            "name": "column_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The unique identifier of the column the card should be moved to",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "201",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "card_id": "CARD_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service Unavailable</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/columns/{column_id}/cards",
        "title": "List project cards",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          },
          {
            "name": "archived_state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "archived",
                "not_archived"
              ],
              "default": "not_archived"
            },
            "descriptionHTML": "<p>Filters the project cards that are returned by the card's state. Can be one of <code>all</code>,<code>archived</code>, or <code>not_archived</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/projects/columns/cards/1478",
                  "id": 1478,
                  "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
                  "note": "Add payload for delete Project column",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2016-09-05T14:21:06Z",
                  "updated_at": "2016-09-05T14:20:22Z",
                  "archived": false,
                  "column_url": "https://api.github.com/projects/columns/367",
                  "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
                  "project_url": "https://api.github.com/projects/120"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/projects/columns/{column_id}/cards",
        "title": "Create a project card",
        "category": "projects",
        "subcategory": "cards",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The project card's note</p>",
            "type": "string or null",
            "examples": [
              "Update all gems"
            ],
            "name": "note",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "The project card's note",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. The unique identifier of the content associated with the card</p>",
            "type": "integer",
            "examples": [
              42
            ],
            "name": "content_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The unique identifier of the content associated with the card",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. The piece of content associated with the card</p>",
            "type": "string",
            "examples": [
              "PullRequest"
            ],
            "name": "content_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The piece of content associated with the card",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/cards/1478",
                "id": 1478,
                "node_id": "MDExOlByb2plY3RDYXJkMTQ3OA==",
                "note": "Add payload for delete Project column",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2016-09-05T14:21:06Z",
                "updated_at": "2016-09-05T14:20:22Z",
                "archived": false,
                "column_url": "https://api.github.com/projects/columns/367",
                "content_url": "https://api.github.com/repos/api-playground/projects-test/issues/3",
                "project_url": "https://api.github.com/projects/120"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service Unavailable</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      }
    ],
    "collaborators": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/{project_id}/collaborators",
        "title": "List project collaborators",
        "category": "projects",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "affiliation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outside",
                "direct",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filters the collaborators by their affiliation. Can be one of:<br>\n* <code>outside</code>: Outside collaborators of a project that are not a member of the project's organization.<br>\n* <code>direct</code>: Collaborators with permissions to a project, regardless of organization membership status.<br>\n* <code>all</code>: All collaborators the authenticated user can see.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project <code>admin</code> to list collaborators.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/projects/{project_id}/collaborators/{username}",
        "title": "Add project collaborator",
        "category": "projects",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p>The permission to grant the collaborator.</p>",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "default": "write",
            "type": "string",
            "examples": [
              "write"
            ],
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant the collaborator.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project <code>admin</code> to add a collaborator.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/projects/{project_id}/collaborators/{username}",
        "title": "Remove user as a collaborator",
        "category": "projects",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>Removes a collaborator from an organization project. You must be an organization owner or a project <code>admin</code> to remove a collaborator.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/{project_id}/collaborators/{username}/permission",
        "title": "Get project permission for a user",
        "category": "projects",
        "subcategory": "collaborators",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "permission": "admin",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Returns the collaborator's permission level for an organization project. Possible values for the <code>permission</code> key: <code>admin</code>, <code>write</code>, <code>read</code>, <code>none</code>. You must be an organization owner or a project <code>admin</code> to review a user's permission level.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      }
    ],
    "columns": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/columns/{column_id}",
        "title": "Get a project column",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/367",
                "project_url": "https://api.github.com/projects/120",
                "cards_url": "https://api.github.com/projects/columns/367/cards",
                "id": 367,
                "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
                "name": "To Do",
                "created_at": "2016-09-05T14:18:44Z",
                "updated_at": "2016-09-05T14:22:28Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/projects/columns/{column_id}",
        "title": "Update an existing project column",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the project column</p>",
            "type": "string",
            "examples": [
              "Remaining tasks"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the project column",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/367",
                "project_url": "https://api.github.com/projects/120",
                "cards_url": "https://api.github.com/projects/columns/367/cards",
                "id": 367,
                "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
                "name": "To Do",
                "created_at": "2016-09-05T14:18:44Z",
                "updated_at": "2016-09-05T14:22:28Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/projects/columns/{column_id}",
        "title": "Delete a project column",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/projects/columns/{column_id}/moves",
        "title": "Move a project column",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "column_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>column_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The position of the column in a project. Can be one of: <code>first</code>, <code>last</code>, or <code>after:&#x3C;column_id></code> to place after the specified column.</p>",
            "type": "string",
            "pattern": "^(?:first|last|after:\\d+)$",
            "examples": [
              "last"
            ],
            "name": "position",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "201",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "column_id": "COLUMN_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/projects/{project_id}/columns",
        "title": "List project columns",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/projects/columns/367",
                  "project_url": "https://api.github.com/projects/120",
                  "cards_url": "https://api.github.com/projects/columns/367/cards",
                  "id": 367,
                  "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
                  "name": "To Do",
                  "created_at": "2016-09-05T14:18:44Z",
                  "updated_at": "2016-09-05T14:22:28Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/projects/{project_id}/columns",
        "title": "Create a project column",
        "category": "projects",
        "subcategory": "columns",
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Name of the project column</p>",
            "type": "string",
            "examples": [
              "Remaining tasks"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Name of the project column",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/projects/columns/367",
                "project_url": "https://api.github.com/projects/120",
                "cards_url": "https://api.github.com/projects/columns/367/cards",
                "id": 367,
                "node_id": "MDEzOlByb2plY3RDb2x1bW4zNjc=",
                "name": "To Do",
                "created_at": "2016-09-05T14:18:44Z",
                "updated_at": "2016-09-05T14:22:28Z"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ]
      }
    ]
  },
  "pulls": {
    "pulls": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls",
        "title": "List pull requests",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "closed",
                "all"
              ],
              "default": "open"
            },
            "descriptionHTML": "<p>Either <code>open</code>, <code>closed</code>, or <code>all</code> to filter by state.</p>"
          },
          {
            "name": "head",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Filter pulls by head user or head organization and branch name in the format of <code>user:ref-name</code> or <code>organization:ref-name</code>. For example: <code>github:new-script-format</code> or <code>octocat:test-branch</code>.</p>"
          },
          {
            "name": "base",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Filter pulls by base branch name. Example: <code>gh-pages</code>.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "popularity",
                "long-running"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>What to sort results by. Can be either <code>created</code>, <code>updated</code>, <code>popularity</code> (comment count) or <code>long-running</code> (age, filtering by pulls updated in the last month).</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>The direction of the sort. Can be either <code>asc</code> or <code>desc</code>. Default: <code>desc</code> when sort is <code>created</code> or sort is not specified, otherwise <code>asc</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                  "id": 1,
                  "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                  "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                  "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                  "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                  "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                  "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "number": 1347,
                  "state": "open",
                  "locked": true,
                  "title": "Amazing new feature",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Please pull these awesome changes in!",
                  "labels": [
                    {
                      "id": 208045946,
                      "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                      "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                      "name": "bug",
                      "description": "Something isn't working",
                      "color": "f29513",
                      "default": true
                    }
                  ],
                  "milestone": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                    "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                    "id": 1002604,
                    "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                    "number": 1,
                    "state": "open",
                    "title": "v1.0",
                    "description": "Tracking milestone for version 1.0",
                    "creator": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "open_issues": 4,
                    "closed_issues": 8,
                    "created_at": "2011-04-10T20:09:31Z",
                    "updated_at": "2014-03-03T18:58:10Z",
                    "closed_at": "2013-02-12T13:22:01Z",
                    "due_on": "2012-10-09T23:39:01Z"
                  },
                  "active_lock_reason": "too heated",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:01:12Z",
                  "closed_at": "2011-01-26T19:01:12Z",
                  "merged_at": "2011-01-26T19:01:12Z",
                  "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                  "assignee": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assignees": [
                    {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    {
                      "login": "hubot",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/hubot",
                      "html_url": "https://github.com/hubot",
                      "followers_url": "https://api.github.com/users/hubot/followers",
                      "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                      "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                      "organizations_url": "https://api.github.com/users/hubot/orgs",
                      "repos_url": "https://api.github.com/users/hubot/repos",
                      "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/hubot/received_events",
                      "type": "User",
                      "site_admin": true
                    }
                  ],
                  "requested_reviewers": [
                    {
                      "login": "other_user",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/other_user",
                      "html_url": "https://github.com/other_user",
                      "followers_url": "https://api.github.com/users/other_user/followers",
                      "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                      "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                      "organizations_url": "https://api.github.com/users/other_user/orgs",
                      "repos_url": "https://api.github.com/users/other_user/repos",
                      "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/other_user/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  ],
                  "requested_teams": [
                    {
                      "id": 1,
                      "node_id": "MDQ6VGVhbTE=",
                      "url": "https://api.github.com/teams/1",
                      "html_url": "https://github.com/orgs/github/teams/justice-league",
                      "name": "Justice League",
                      "slug": "justice-league",
                      "description": "A great team.",
                      "privacy": "closed",
                      "permission": "admin",
                      "members_url": "https://api.github.com/teams/1/members{/member}",
                      "repositories_url": "https://api.github.com/teams/1/repos",
                      "parent": null
                    }
                  ],
                  "head": {
                    "label": "octocat:new-topic",
                    "ref": "new-topic",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "user": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "repo": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "language": null,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues_count": 0,
                      "is_template": true,
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "allow_rebase_merge": true,
                      "template_repository": null,
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "allow_squash_merge": true,
                      "delete_branch_on_merge": true,
                      "allow_merge_commit": true,
                      "subscribers_count": 42,
                      "network_count": 0,
                      "license": {
                        "key": "mit",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT",
                        "node_id": "MDc6TGljZW5zZW1pdA==",
                        "html_url": "https://github.com/licenses/mit"
                      },
                      "forks": 1,
                      "open_issues": 1,
                      "watchers": 1
                    }
                  },
                  "base": {
                    "label": "octocat:master",
                    "ref": "master",
                    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "user": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "repo": {
                      "id": 1296269,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                      "name": "Hello-World",
                      "full_name": "octocat/Hello-World",
                      "owner": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Hello-World",
                      "description": "This your first repo!",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Hello-World",
                      "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                      "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                      "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                      "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                      "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                      "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                      "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                      "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                      "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                      "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                      "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                      "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                      "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                      "git_url": "git:github.com/octocat/Hello-World.git",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                      "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                      "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                      "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                      "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                      "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                      "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                      "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                      "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                      "ssh_url": "git@github.com:octocat/Hello-World.git",
                      "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                      "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                      "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                      "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                      "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                      "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                      "clone_url": "https://github.com/octocat/Hello-World.git",
                      "mirror_url": "git:git.example.com/octocat/Hello-World",
                      "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                      "svn_url": "https://svn.github.com/octocat/Hello-World",
                      "homepage": "https://github.com",
                      "language": null,
                      "forks_count": 9,
                      "stargazers_count": 80,
                      "watchers_count": 80,
                      "size": 108,
                      "default_branch": "master",
                      "open_issues_count": 0,
                      "is_template": true,
                      "topics": [
                        "octocat",
                        "atom",
                        "electron",
                        "api"
                      ],
                      "has_issues": true,
                      "has_projects": true,
                      "has_wiki": true,
                      "has_pages": false,
                      "has_downloads": true,
                      "archived": false,
                      "disabled": false,
                      "visibility": "public",
                      "pushed_at": "2011-01-26T19:06:43Z",
                      "created_at": "2011-01-26T19:01:12Z",
                      "updated_at": "2011-01-26T19:14:43Z",
                      "permissions": {
                        "admin": false,
                        "push": false,
                        "pull": true
                      },
                      "allow_rebase_merge": true,
                      "template_repository": null,
                      "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                      "allow_squash_merge": true,
                      "delete_branch_on_merge": true,
                      "allow_merge_commit": true,
                      "subscribers_count": 42,
                      "network_count": 0,
                      "license": {
                        "key": "mit",
                        "name": "MIT License",
                        "url": "https://api.github.com/licenses/mit",
                        "spdx_id": "MIT",
                        "node_id": "MDc6TGljZW5zZW1pdA==",
                        "html_url": "https://github.com/licenses/mit"
                      },
                      "forks": 1,
                      "open_issues": 1,
                      "watchers": 1
                    }
                  },
                  "_links": {
                    "self": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                    },
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/1347"
                    },
                    "issue": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                    },
                    "comments": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                    },
                    "review_comments": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                    },
                    "review_comment": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                    },
                    "commits": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                    },
                    "statuses": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  },
                  "author_association": "OWNER",
                  "auto_merge": null,
                  "draft": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls",
        "title": "Create a pull request",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The title of the new pull request.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The title of the new pull request.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace <code>head</code> with a user like this: <code>username:branch</code>.</p>",
            "name": "head",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.</p>",
            "name": "base",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The contents of the pull request.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the pull request.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Indicates whether <a href=\"https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/\">maintainers can modify</a> the pull request.</p>",
            "name": "maintainer_can_modify",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Indicates whether the pull request is a draft. See \"<a href=\"https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests\">Draft Pull Requests</a>\" in the GitHub Help documentation to learn more.</p>",
            "name": "draft",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Indicates whether the pull request is a draft. See \"[Draft Pull Requests](https://docs.github.com/en/articles/about-pull-requests#draft-pull-requests)\" in the GitHub Help documentation to learn more.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "examples": [
              1
            ],
            "name": "issue",
            "in": "body",
            "rawType": "integer",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Amazing new feature",
                "body": "Please pull these awesome changes in!",
                "head": "octocat:new-feature",
                "base": "master"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "id": 1,
                "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "number": 1347,
                "state": "open",
                "locked": true,
                "title": "Amazing new feature",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Please pull these awesome changes in!",
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "active_lock_reason": "too heated",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:01:12Z",
                "closed_at": "2011-01-26T19:01:12Z",
                "merged_at": "2011-01-26T19:01:12Z",
                "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  {
                    "login": "hubot",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/hubot",
                    "html_url": "https://github.com/hubot",
                    "followers_url": "https://api.github.com/users/hubot/followers",
                    "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                    "organizations_url": "https://api.github.com/users/hubot/orgs",
                    "repos_url": "https://api.github.com/users/hubot/repos",
                    "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/hubot/received_events",
                    "type": "User",
                    "site_admin": true
                  }
                ],
                "requested_reviewers": [
                  {
                    "login": "other_user",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/other_user",
                    "html_url": "https://github.com/other_user",
                    "followers_url": "https://api.github.com/users/other_user/followers",
                    "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                    "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                    "organizations_url": "https://api.github.com/users/other_user/orgs",
                    "repos_url": "https://api.github.com/users/other_user/repos",
                    "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/other_user/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "requested_teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos"
                  }
                ],
                "head": {
                  "label": "octocat:new-topic",
                  "ref": "new-topic",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "allow_forking": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "base": {
                  "label": "octocat:master",
                  "ref": "master",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1347"
                  },
                  "issue": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                  },
                  "comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                  },
                  "review_comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                  },
                  "review_comment": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                  },
                  "commits": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                  },
                  "statuses": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                },
                "author_association": "OWNER",
                "auto_merge": null,
                "draft": false,
                "merged": false,
                "mergeable": true,
                "rebaseable": true,
                "mergeable_state": "clean",
                "merged_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "comments": 10,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 3,
                "additions": 100,
                "deletions": 3,
                "changed_files": 5
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.</p>\n<p>You can create a new pull request.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}",
        "title": "Get a pull request",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Pass the appropriate [media type](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "id": 1,
                "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "number": 1347,
                "state": "open",
                "locked": true,
                "title": "Amazing new feature",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Please pull these awesome changes in!",
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "active_lock_reason": "too heated",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:01:12Z",
                "closed_at": "2011-01-26T19:01:12Z",
                "merged_at": "2011-01-26T19:01:12Z",
                "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  {
                    "login": "hubot",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/hubot",
                    "html_url": "https://github.com/hubot",
                    "followers_url": "https://api.github.com/users/hubot/followers",
                    "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                    "organizations_url": "https://api.github.com/users/hubot/orgs",
                    "repos_url": "https://api.github.com/users/hubot/repos",
                    "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/hubot/received_events",
                    "type": "User",
                    "site_admin": true
                  }
                ],
                "requested_reviewers": [
                  {
                    "login": "other_user",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/other_user",
                    "html_url": "https://github.com/other_user",
                    "followers_url": "https://api.github.com/users/other_user/followers",
                    "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                    "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                    "organizations_url": "https://api.github.com/users/other_user/orgs",
                    "repos_url": "https://api.github.com/users/other_user/repos",
                    "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/other_user/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "requested_teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos"
                  }
                ],
                "head": {
                  "label": "octocat:new-topic",
                  "ref": "new-topic",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "allow_forking": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "base": {
                  "label": "octocat:master",
                  "ref": "master",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1347"
                  },
                  "issue": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                  },
                  "comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                  },
                  "review_comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                  },
                  "review_comment": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                  },
                  "commits": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                  },
                  "statuses": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                },
                "author_association": "OWNER",
                "auto_merge": null,
                "draft": false,
                "merged": false,
                "mergeable": true,
                "rebaseable": true,
                "mergeable_state": "clean",
                "merged_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "comments": 10,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 3,
                "additions": 100,
                "deletions": 3,
                "changed_files": 5
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Lists details of a pull request by providing its number.</p>\n<p>When you get, <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls/#create-a-pull-request\">create</a>, or <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#update-a-pull-request\">edit</a> a pull request, GitHub Enterprise Server creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the <code>mergeable</code> key. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests\">Checking mergeability of pull requests</a>\".</p>\n<p>The value of the <code>mergeable</code> attribute can be <code>true</code>, <code>false</code>, or <code>null</code>. If the value is <code>null</code>, then GitHub Enterprise Server has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-<code>null</code> value for the <code>mergeable</code> attribute in the response. If <code>mergeable</code> is <code>true</code>, then <code>merge_commit_sha</code> will be the SHA of the <em>test</em> merge commit.</p>\n<p>The value of the <code>merge_commit_sha</code> attribute changes depending on the state of the pull request. Before merging a pull request, the <code>merge_commit_sha</code> attribute holds the SHA of the <em>test</em> merge commit. After merging a pull request, the <code>merge_commit_sha</code> attribute changes depending on how you merged the pull request:</p>\n<ul>\n<li>If merged as a <a href=\"https://docs.github.com/articles/about-merge-methods-on-github/\">merge commit</a>, <code>merge_commit_sha</code> represents the SHA of the merge commit.</li>\n<li>If merged via a <a href=\"https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits\">squash</a>, <code>merge_commit_sha</code> represents the SHA of the squashed commit on the base branch.</li>\n<li>If <a href=\"https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits\">rebased</a>, <code>merge_commit_sha</code> represents the commit that the base branch was updated to.</li>\n</ul>\n<p>Pass the appropriate <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests\">media type</a> to fetch diff and patch formats.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Pass the appropriate <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/#commits-commit-comparison-and-pull-requests\">media type</a> to fetch diff and patch formats.</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}",
        "title": "Update a pull request",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The title of the pull request.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The title of the pull request.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The contents of the pull request.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The contents of the pull request.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>State of this Pull Request. Either <code>open</code> or <code>closed</code>.</p>",
            "enum": [
              "open",
              "closed"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "State of this Pull Request. Either `open` or `closed`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.</p>",
            "name": "base",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Indicates whether <a href=\"https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/\">maintainers can modify</a> the pull request.</p>",
            "name": "maintainer_can_modify",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "new title",
                "body": "updated body",
                "state": "open",
                "base": "master"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "id": 1,
                "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "number": 1347,
                "state": "open",
                "locked": true,
                "title": "Amazing new feature",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Please pull these awesome changes in!",
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "active_lock_reason": "too heated",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:01:12Z",
                "closed_at": "2011-01-26T19:01:12Z",
                "merged_at": "2011-01-26T19:01:12Z",
                "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  {
                    "login": "hubot",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/hubot",
                    "html_url": "https://github.com/hubot",
                    "followers_url": "https://api.github.com/users/hubot/followers",
                    "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                    "organizations_url": "https://api.github.com/users/hubot/orgs",
                    "repos_url": "https://api.github.com/users/hubot/repos",
                    "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/hubot/received_events",
                    "type": "User",
                    "site_admin": true
                  }
                ],
                "requested_reviewers": [
                  {
                    "login": "other_user",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/other_user",
                    "html_url": "https://github.com/other_user",
                    "followers_url": "https://api.github.com/users/other_user/followers",
                    "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                    "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                    "organizations_url": "https://api.github.com/users/other_user/orgs",
                    "repos_url": "https://api.github.com/users/other_user/repos",
                    "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/other_user/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "requested_teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos"
                  }
                ],
                "head": {
                  "label": "octocat:new-topic",
                  "ref": "new-topic",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "allow_forking": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "base": {
                  "label": "octocat:master",
                  "ref": "master",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "language": null,
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "allow_merge_commit": true,
                    "forks": 123,
                    "open_issues": 123,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA=="
                    },
                    "watchers": 123
                  }
                },
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1347"
                  },
                  "issue": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                  },
                  "comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                  },
                  "review_comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                  },
                  "review_comment": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                  },
                  "commits": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                  },
                  "statuses": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                },
                "author_association": "OWNER",
                "auto_merge": null,
                "draft": false,
                "merged": false,
                "mergeable": true,
                "rebaseable": true,
                "mergeable_state": "clean",
                "merged_by": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "comments": 10,
                "review_comments": 0,
                "maintainer_can_modify": true,
                "commits": 3,
                "additions": 100,
                "deletions": 3,
                "changed_files": 5
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/commits",
        "title": "List commits on a pull request",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "node_id": "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ==",
                  "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
                  "commit": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                    "author": {
                      "name": "Monalisa Octocat",
                      "email": "support@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "committer": {
                      "name": "Monalisa Octocat",
                      "email": "support@github.com",
                      "date": "2011-04-14T16:00:49Z"
                    },
                    "message": "Fix all the bugs",
                    "tree": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    },
                    "comment_count": 0,
                    "verification": {
                      "verified": false,
                      "reason": "unsigned",
                      "signature": null,
                      "payload": null
                    }
                  },
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "committer": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits\">List commits</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/files",
        "title": "List pull requests files",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
                  "filename": "file1.txt",
                  "status": "added",
                  "additions": 103,
                  "deletions": 21,
                  "changes": 124,
                  "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
                  "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "500",
            "description": "<p>Internal Error</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "title": "Check if a pull request has been merged",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response if pull request has been merged"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>Response if pull request has been merged</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if pull request has not been merged</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
        "title": "Merge a pull request",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Title for the automatic commit message.</p>",
            "name": "commit_title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Title for the automatic commit message.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Extra detail to append to automatic commit message.</p>",
            "name": "commit_message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Extra detail to append to automatic commit message.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>SHA that pull request head must match to allow merge.</p>",
            "name": "sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "SHA that pull request head must match to allow merge.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Merge method to use. Possible values are <code>merge</code>, <code>squash</code> or <code>rebase</code>. Default is <code>merge</code>.</p>",
            "enum": [
              "merge",
              "squash",
              "rebase"
            ],
            "name": "merge_method",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if merge was successful",
              "example": {
                "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "merged": true,
                "message": "Pull Request successfully merged"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint triggers <a href=\"https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if merge was successful</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "405",
            "description": "<p>Method Not Allowed if merge cannot be performed</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict if sha was provided and pull request head did not match</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "pulls"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
        "title": "Update a pull request branch",
        "category": "pulls",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a <code>422 Unprocessable Entity</code> status. You can use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits\">List commits</a>\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.</p>",
            "name": "expected_head_sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the \"[List commits](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-commits)\" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "expected_head_sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "message": "Updating pull request branch.",
                "url": "https://github.com/repos/octocat/Hello-World/pulls/53"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Updating the pull request branch with latest upstream changes is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.lydian-preview+json</code></pre>"
        ],
        "subcategory": "pulls"
      }
    ],
    "comments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments",
        "title": "List review comments in a repository",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "created_at"
              ]
            },
            "descriptionHTML": ""
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Can be either <code>asc</code> or <code>desc</code>. Ignored without <code>sort</code> parameter.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                  "pull_request_review_id": 42,
                  "id": 10,
                  "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                  "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                  "path": "file1.txt",
                  "position": 1,
                  "original_position": 4,
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                  "in_reply_to_id": 8,
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Great stuff!",
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                  "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                  "author_association": "NONE",
                  "_links": {
                    "self": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                    },
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                    },
                    "pull_request": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                    }
                  },
                  "start_line": 1,
                  "original_start_line": 1,
                  "start_side": "RIGHT",
                  "line": 2,
                  "original_line": 2,
                  "side": "RIGHT"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>",
          "<p>Multi-line comments in a pull request diff is currently available for developers to preview. During the preview period, these response fields may change without advance notice. See the <a href=\"https://developer.github.com/changes/2019-10-03-multi-line-comments\">blog post</a> for more information.</p>\n<p>To create multi-line comments or see multi-line comments with the new supported fields during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.comfort-fade-preview+json</code></pre>\n<p>To show multi-line comment-supported fields in the response, use the <code>comfort-fade</code> preview header and the <code>line</code> parameter.</p>\n<p>If you use the <code>comfort-fade</code> preview header, your response will show:</p>\n<ul>\n<li>For multi-line comments, values for <code>start_line</code>, <code>original_start_line</code>, <code>start_side</code>, <code>line</code>, <code>original_line</code>, and <code>side</code>.</li>\n<li>For single-line comments, values for <code>line</code>, <code>original_line</code>, and <code>side</code> and a <code>null</code> value for <code>start_line</code>, <code>original_start_line</code>, and <code>start_side</code>.</li>\n</ul>\n<p>If you don't use the <code>comfort-fade</code> preview header, multi-line and single-line comments will appear the same way in the response with a single <code>position</code> attribute. Your response will show:</p>\n<ul>\n<li>For multi-line comments, the last line of the comment range for the <code>position</code> attribute.</li>\n<li>For single-line comments, the diff-positioned way of referencing comments for the <code>position</code> attribute.</li>\n</ul>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "title": "Get a review comment for a pull request",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "pull_request_review_id": 42,
                "id": 10,
                "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                "path": "file1.txt",
                "position": 1,
                "original_position": 4,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                "in_reply_to_id": 8,
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Great stuff!",
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                "author_association": "NONE",
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                  }
                },
                "start_line": 1,
                "original_start_line": 1,
                "start_side": "RIGHT",
                "line": 2,
                "original_line": 2,
                "side": "RIGHT"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Provides details for a review comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>",
          "<p>Multi-line comments in a pull request diff is currently available for developers to preview. During the preview period, these response fields may change without advance notice. See the <a href=\"https://developer.github.com/changes/2019-10-03-multi-line-comments\">blog post</a> for more information.</p>\n<p>To create multi-line comments or see multi-line comments with the new supported fields during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.comfort-fade-preview+json</code></pre>\n<p>To show multi-line comment-supported fields in the response, use the <code>comfort-fade</code> preview header and the <code>line</code> parameter.</p>\n<p>If you use the <code>comfort-fade</code> preview header, your response will show:</p>\n<ul>\n<li>For multi-line comments, values for <code>start_line</code>, <code>original_start_line</code>, <code>start_side</code>, <code>line</code>, <code>original_line</code>, and <code>side</code>.</li>\n<li>For single-line comments, values for <code>line</code>, <code>original_line</code>, and <code>side</code> and a <code>null</code> value for <code>start_line</code>, <code>original_start_line</code>, and <code>start_side</code>.</li>\n</ul>\n<p>If you don't use the <code>comfort-fade</code> preview header, multi-line and single-line comments will appear the same way in the response with a single <code>position</code> attribute. Your response will show:</p>\n<ul>\n<li>For multi-line comments, the last line of the comment range for the <code>position</code> attribute.</li>\n<li>For single-line comments, the diff-positioned way of referencing comments for the <code>position</code> attribute.</li>\n</ul>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "title": "Update a review comment for a pull request",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The text of the reply to the review comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The text of the reply to the review comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "I like this too!"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "pull_request_review_id": 42,
                "id": 10,
                "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                "path": "file1.txt",
                "position": 1,
                "original_position": 4,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                "in_reply_to_id": 8,
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Great stuff!",
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                "author_association": "NONE",
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                  }
                },
                "start_line": 1,
                "original_start_line": 1,
                "start_side": "RIGHT",
                "line": 2,
                "original_line": 2,
                "side": "RIGHT"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Enables you to edit a review comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>Multi-line comments in a pull request diff is currently available for developers to preview. During the preview period, these response fields may change without advance notice. See the <a href=\"https://developer.github.com/changes/2019-10-03-multi-line-comments\">blog post</a> for more information.</p>\n<p>To create multi-line comments or see multi-line comments with the new supported fields during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.comfort-fade-preview+json</code></pre>\n<p>To show multi-line comment-supported fields in the response, use the <code>comfort-fade</code> preview header and the <code>line</code> parameter.</p>\n<p>If you use the <code>comfort-fade</code> preview header, your response will show:</p>\n<ul>\n<li>For multi-line comments, values for <code>start_line</code>, <code>original_start_line</code>, <code>start_side</code>, <code>line</code>, <code>original_line</code>, and <code>side</code>.</li>\n<li>For single-line comments, values for <code>line</code>, <code>original_line</code>, and <code>side</code> and a <code>null</code> value for <code>start_line</code>, <code>original_start_line</code>, and <code>start_side</code>.</li>\n</ul>\n<p>If you don't use the <code>comfort-fade</code> preview header, multi-line and single-line comments will appear the same way in the response with a single <code>position</code> attribute. Your response will show:</p>\n<ul>\n<li>For multi-line comments, the last line of the comment range for the <code>position</code> attribute.</li>\n<li>For single-line comments, the diff-positioned way of referencing comments for the <code>position</code> attribute.</li>\n</ul>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}",
        "title": "Delete a review comment for a pull request",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a review comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "title": "List review comments on a pull request",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>One of <code>created</code> (when the repository was starred) or <code>updated</code> (when it was last pushed to).</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Can be either <code>asc</code> or <code>desc</code>. Ignored without <code>sort</code> parameter.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                  "pull_request_review_id": 42,
                  "id": 10,
                  "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                  "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                  "path": "file1.txt",
                  "position": 1,
                  "original_position": 4,
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                  "in_reply_to_id": 8,
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Great stuff!",
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                  "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                  "author_association": "NONE",
                  "_links": {
                    "self": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                    },
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                    },
                    "pull_request": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                    }
                  },
                  "start_line": 1,
                  "original_start_line": 1,
                  "start_side": "RIGHT",
                  "line": 2,
                  "original_line": 2,
                  "side": "RIGHT"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists all review comments for a pull request. By default, review comments are in ascending order by ID.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>",
          "<p>Multi-line comments in a pull request diff is currently available for developers to preview. During the preview period, these response fields may change without advance notice. See the <a href=\"https://developer.github.com/changes/2019-10-03-multi-line-comments\">blog post</a> for more information.</p>\n<p>To create multi-line comments or see multi-line comments with the new supported fields during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.comfort-fade-preview+json</code></pre>\n<p>To show multi-line comment-supported fields in the response, use the <code>comfort-fade</code> preview header and the <code>line</code> parameter.</p>\n<p>If you use the <code>comfort-fade</code> preview header, your response will show:</p>\n<ul>\n<li>For multi-line comments, values for <code>start_line</code>, <code>original_start_line</code>, <code>start_side</code>, <code>line</code>, <code>original_line</code>, and <code>side</code>.</li>\n<li>For single-line comments, values for <code>line</code>, <code>original_line</code>, and <code>side</code> and a <code>null</code> value for <code>start_line</code>, <code>original_start_line</code>, and <code>start_side</code>.</li>\n</ul>\n<p>If you don't use the <code>comfort-fade</code> preview header, multi-line and single-line comments will appear the same way in the response with a single <code>position</code> attribute. Your response will show:</p>\n<ul>\n<li>For multi-line comments, the last line of the comment range for the <code>position</code> attribute.</li>\n<li>For single-line comments, the diff-positioned way of referencing comments for the <code>position</code> attribute.</li>\n</ul>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "title": "Create a review comment for a pull request",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The text of the review comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The text of the review comment.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the <code>position</code>.</p>",
            "name": "commit_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The relative path to the file that necessitates a comment.</p>",
            "name": "path",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The relative path to the file that necessitates a comment.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p><strong>Required without <code>comfort-fade</code> preview</strong>. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.</p>",
            "name": "position",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "**Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required with <code>comfort-fade</code> preview</strong>. In a split diff view, the side of the diff that the pull request's changes appear on. Can be <code>LEFT</code> or <code>RIGHT</code>. Use <code>LEFT</code> for deletions that appear in red. Use <code>RIGHT</code> for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"<a href=\"https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options\">Diff view options</a>\" in the GitHub Help documentation.</p>",
            "enum": [
              "LEFT",
              "RIGHT"
            ],
            "name": "side",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see \"[Diff view options](https://docs.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p><strong>Required with <code>comfort-fade</code> preview</strong>. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.</p>",
            "name": "line",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "**Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p><strong>Required when using multi-line comments</strong>. To create multi-line comments, you must use the <code>comfort-fade</code> preview header. The <code>start_line</code> is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"<a href=\"https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request\">Commenting on a pull request</a>\" in the GitHub Help documentation.</p>",
            "name": "start_line",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required when using multi-line comments</strong>. To create multi-line comments, you must use the <code>comfort-fade</code> preview header. The <code>start_side</code> is the starting side of the diff that the comment applies to. Can be <code>LEFT</code> or <code>RIGHT</code>. To learn more about multi-line comments, see \"<a href=\"https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request\">Commenting on a pull request</a>\" in the GitHub Help documentation. See <code>side</code> in this table for additional context.</p>",
            "enum": [
              "LEFT",
              "RIGHT",
              "side"
            ],
            "name": "start_side",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see \"[Commenting on a pull request](https://docs.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)\" in the GitHub Help documentation. See `side` in this table for additional context.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p>The ID of the review comment to reply to. To find the ID of a review comment with <a href=\"#list-review-comments-on-a-pull-request\">\"List review comments on a pull request\"</a>. When specified, all parameters other than <code>body</code> in the request body are ignored.</p>",
            "examples": [
              2
            ],
            "name": "in_reply_to",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The ID of the review comment to reply to. To find the ID of a review comment with [\"List review comments on a pull request\"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "example-for-a-multi-line-comment",
            "request": {
              "contentType": "application/json",
              "description": "Example for a multi-line comment",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Great stuff!",
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "path": "file1.txt",
                "start_line": 1,
                "start_side": "RIGHT",
                "line": 2,
                "side": "RIGHT"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "pull_request_review_id": 42,
                "id": 10,
                "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                "path": "file1.txt",
                "position": 1,
                "original_position": 4,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                "in_reply_to_id": 8,
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Great stuff!",
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                "author_association": "NONE",
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                  }
                },
                "start_line": 1,
                "original_start_line": 1,
                "start_side": "RIGHT",
                "line": 2,
                "original_line": 2,
                "side": "RIGHT"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#create-an-issue-comment\">Create an issue comment</a>.\" We recommend creating a review comment using <code>line</code>, <code>side</code>, and optionally <code>start_line</code> and <code>start_side</code> if your comment applies to more than one line in the pull request diff.</p>\n<p>You can still create a review comment using the <code>position</code> parameter. When you use <code>position</code>, the <code>line</code>, <code>side</code>, <code>start_line</code>, and <code>start_side</code> parameters are not required. For more information, see the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices\"><code>comfort-fade</code> preview notice</a>.</p>\n<p><strong>Note:</strong> The position value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>Multi-line comments in a pull request diff is currently available for developers to preview. During the preview period, these response fields may change without advance notice. See the <a href=\"https://developer.github.com/changes/2019-10-03-multi-line-comments\">blog post</a> for more information.</p>\n<p>To create multi-line comments or see multi-line comments with the new supported fields during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.comfort-fade-preview+json</code></pre>\n<p>To show multi-line comment-supported fields in the response, use the <code>comfort-fade</code> preview header and the <code>line</code> parameter.</p>\n<p>If you use the <code>comfort-fade</code> preview header, your response will show:</p>\n<ul>\n<li>For multi-line comments, values for <code>start_line</code>, <code>original_start_line</code>, <code>start_side</code>, <code>line</code>, <code>original_line</code>, and <code>side</code>.</li>\n<li>For single-line comments, values for <code>line</code>, <code>original_line</code>, and <code>side</code> and a <code>null</code> value for <code>start_line</code>, <code>original_start_line</code>, and <code>start_side</code>.</li>\n</ul>\n<p>If you don't use the <code>comfort-fade</code> preview header, multi-line and single-line comments will appear the same way in the response with a single <code>position</code> attribute. Your response will show:</p>\n<ul>\n<li>For multi-line comments, the last line of the comment range for the <code>position</code> attribute.</li>\n<li>For single-line comments, the diff-positioned way of referencing comments for the <code>position</code> attribute.</li>\n</ul>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
        "title": "Create a reply for a review comment",
        "category": "pulls",
        "subcategory": "comments",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The text of the review comment.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The text of the review comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Great stuff!"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                "pull_request_review_id": 42,
                "id": 10,
                "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                "path": "file1.txt",
                "position": 1,
                "original_position": 4,
                "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                "in_reply_to_id": 426899381,
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Great stuff!",
                "created_at": "2011-04-14T16:00:49Z",
                "updated_at": "2011-04-14T16:00:49Z",
                "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                "author_association": "NONE",
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                  }
                },
                "start_line": 1,
                "original_start_line": 1,
                "start_side": "RIGHT",
                "line": 2,
                "original_line": 2,
                "side": "RIGHT"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates a reply to a review comment for a pull request. For the <code>comment_id</code>, provide the ID of the review comment you are replying to. This must be the ID of a <em>top-level review comment</em>, not a reply to that comment. Replies to replies are not supported.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "review-requests": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "title": "List requested reviewers for a pull request",
        "category": "pulls",
        "subcategory": "review-requests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "users": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos",
                    "parent": null
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "title": "Request reviewers for a pull request",
        "category": "pulls",
        "subcategory": "review-requests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p>An array of user <code>login</code>s that will be requested.</p>",
            "items": {
              "type": "string"
            },
            "name": "reviewers",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of user `login`s that will be requested.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>An array of team <code>slug</code>s that will be requested.</p>",
            "items": {
              "type": "string"
            },
            "name": "team_reviewers",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of team `slug`s that will be requested.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "reviewers": [
                  "octocat",
                  "hubot",
                  "other_user"
                ],
                "team_reviewers": [
                  "justice-league"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347",
                "id": 1,
                "node_id": "MDExOlB1bGxSZXF1ZXN0MQ==",
                "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                "patch_url": "https://github.com/octocat/Hello-World/pull/1347.patch",
                "issue_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits",
                "review_comments_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments",
                "review_comment_url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e",
                "number": 1347,
                "state": "open",
                "locked": true,
                "title": "Amazing new feature",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Please pull these awesome changes in!",
                "labels": [
                  {
                    "id": 208045946,
                    "node_id": "MDU6TGFiZWwyMDgwNDU5NDY=",
                    "url": "https://api.github.com/repos/octocat/Hello-World/labels/bug",
                    "name": "bug",
                    "description": "Something isn't working",
                    "color": "f29513",
                    "default": true
                  }
                ],
                "milestone": {
                  "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                  "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                  "id": 1002604,
                  "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                  "number": 1,
                  "state": "open",
                  "title": "v1.0",
                  "description": "Tracking milestone for version 1.0",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "open_issues": 4,
                  "closed_issues": 8,
                  "created_at": "2011-04-10T20:09:31Z",
                  "updated_at": "2014-03-03T18:58:10Z",
                  "closed_at": "2013-02-12T13:22:01Z",
                  "due_on": "2012-10-09T23:39:01Z"
                },
                "active_lock_reason": "too heated",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:01:12Z",
                "closed_at": "2011-01-26T19:01:12Z",
                "merged_at": "2011-01-26T19:01:12Z",
                "merge_commit_sha": "e5bd3914e2e596debea16f433f57875b5b90bcd6",
                "assignee": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assignees": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  {
                    "login": "hubot",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/hubot",
                    "html_url": "https://github.com/hubot",
                    "followers_url": "https://api.github.com/users/hubot/followers",
                    "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                    "organizations_url": "https://api.github.com/users/hubot/orgs",
                    "repos_url": "https://api.github.com/users/hubot/repos",
                    "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/hubot/received_events",
                    "type": "User",
                    "site_admin": true
                  }
                ],
                "requested_reviewers": [
                  {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  {
                    "login": "hubot",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/hubot_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/hubot",
                    "html_url": "https://github.com/hubot",
                    "followers_url": "https://api.github.com/users/hubot/followers",
                    "following_url": "https://api.github.com/users/hubot/following{/other_user}",
                    "gists_url": "https://api.github.com/users/hubot/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/hubot/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/hubot/subscriptions",
                    "organizations_url": "https://api.github.com/users/hubot/orgs",
                    "repos_url": "https://api.github.com/users/hubot/repos",
                    "events_url": "https://api.github.com/users/hubot/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/hubot/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  {
                    "login": "other_user",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/other_user_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/other_user",
                    "html_url": "https://github.com/other_user",
                    "followers_url": "https://api.github.com/users/other_user/followers",
                    "following_url": "https://api.github.com/users/other_user/following{/other_user}",
                    "gists_url": "https://api.github.com/users/other_user/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/other_user/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/other_user/subscriptions",
                    "organizations_url": "https://api.github.com/users/other_user/orgs",
                    "repos_url": "https://api.github.com/users/other_user/repos",
                    "events_url": "https://api.github.com/users/other_user/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/other_user/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                ],
                "requested_teams": [
                  {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos",
                    "parent": null
                  }
                ],
                "head": {
                  "label": "octocat:new-topic",
                  "ref": "new-topic",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                },
                "base": {
                  "label": "octocat:master",
                  "ref": "master",
                  "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "repo": {
                    "id": 1296269,
                    "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                    "name": "Hello-World",
                    "full_name": "octocat/Hello-World",
                    "owner": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "private": false,
                    "html_url": "https://github.com/octocat/Hello-World",
                    "description": "This your first repo!",
                    "fork": false,
                    "url": "https://api.github.com/repos/octocat/Hello-World",
                    "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                    "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                    "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                    "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                    "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                    "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                    "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                    "git_url": "git:github.com/octocat/Hello-World.git",
                    "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                    "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                    "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                    "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                    "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                    "ssh_url": "git@github.com:octocat/Hello-World.git",
                    "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                    "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                    "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                    "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                    "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                    "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                    "clone_url": "https://github.com/octocat/Hello-World.git",
                    "mirror_url": "git:git.example.com/octocat/Hello-World",
                    "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                    "svn_url": "https://svn.github.com/octocat/Hello-World",
                    "homepage": "https://github.com",
                    "forks_count": 9,
                    "stargazers_count": 80,
                    "watchers_count": 80,
                    "size": 108,
                    "default_branch": "master",
                    "open_issues_count": 0,
                    "is_template": true,
                    "topics": [
                      "octocat",
                      "atom",
                      "electron",
                      "api"
                    ],
                    "has_issues": true,
                    "has_projects": true,
                    "has_wiki": true,
                    "has_pages": false,
                    "has_downloads": true,
                    "archived": false,
                    "disabled": false,
                    "visibility": "public",
                    "pushed_at": "2011-01-26T19:06:43Z",
                    "created_at": "2011-01-26T19:01:12Z",
                    "updated_at": "2011-01-26T19:14:43Z",
                    "permissions": {
                      "admin": false,
                      "push": false,
                      "pull": true
                    },
                    "allow_rebase_merge": true,
                    "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                    "allow_squash_merge": true,
                    "delete_branch_on_merge": true,
                    "allow_merge_commit": true,
                    "subscribers_count": 42,
                    "network_count": 0,
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    },
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1
                  }
                },
                "_links": {
                  "self": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                  },
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/1347"
                  },
                  "issue": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347"
                  },
                  "comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
                  },
                  "review_comments": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
                  },
                  "review_comment": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
                  },
                  "commits": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
                  },
                  "statuses": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
                  }
                },
                "author_association": "OWNER",
                "draft": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint triggers <a href=\"https://docs.github.com/enterprise-server@3.1/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Unprocessable Entity if user is not a collaborator</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
        "title": "Remove requested reviewers from a pull request",
        "category": "pulls",
        "subcategory": "review-requests",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. An array of user <code>login</code>s that will be removed.</p>",
            "items": {
              "type": "string"
            },
            "name": "reviewers",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of user `login`s that will be removed.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>An array of team <code>slug</code>s that will be removed.</p>",
            "items": {
              "type": "string"
            },
            "name": "team_reviewers",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of team `slug`s that will be removed.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "reviewers": [
                  "octocat",
                  "hubot",
                  "other_user"
                ],
                "team_reviewers": [
                  "justice-league"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ],
    "reviews": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "title": "List reviews for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "The list of reviews returns in chronological order.",
              "example": [
                {
                  "id": 80,
                  "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Here is the body for the review.",
                  "state": "APPROVED",
                  "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                  "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                  "_links": {
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                    },
                    "pull_request": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                    }
                  },
                  "submitted_at": "2019-11-17T17:43:43Z",
                  "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                  "author_association": "COLLABORATOR"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The list of reviews returns in chronological order.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>The list of reviews returns in chronological order.</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "title": "Create a review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the <code>position</code>. Defaults to the most recent commit in the pull request when you do not specify a value.</p>",
            "name": "commit_id",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong> when using <code>REQUEST_CHANGES</code> or <code>COMMENT</code> for the <code>event</code> parameter. The body text of the pull request review.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The review action you want to perform. The review actions include: <code>APPROVE</code>, <code>REQUEST_CHANGES</code>, or <code>COMMENT</code>. By leaving this blank, you set the review action state to <code>PENDING</code>, which means you will need to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#submit-a-review-for-a-pull-request\">submit the pull request review</a> when you are ready.</p>",
            "enum": [
              "APPROVE",
              "REQUEST_CHANGES",
              "COMMENT"
            ],
            "name": "event",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.",
            "childParamsGroups": []
          },
          {
            "type": "array of objects",
            "description": "<p>Use the following table to specify the location, destination, and contents of the draft review comment.</p>",
            "items": {
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "<p><strong>Required</strong>. The relative path to the file that necessitates a review comment.</p>",
                  "name": "path",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "The relative path to the file that necessitates a review comment.",
                  "childParamsGroups": []
                },
                "position": {
                  "type": "integer",
                  "description": "<p>The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.</p>",
                  "name": "position",
                  "in": "body",
                  "rawType": "integer",
                  "rawDescription": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
                  "childParamsGroups": []
                },
                "body": {
                  "type": "string",
                  "description": "<p><strong>Required</strong>. Text of the review comment.</p>",
                  "name": "body",
                  "in": "body",
                  "rawType": "string",
                  "rawDescription": "Text of the review comment.",
                  "childParamsGroups": []
                },
                "line": {
                  "type": "integer",
                  "examples": [
                    28
                  ],
                  "name": "line",
                  "in": "body",
                  "rawType": "integer",
                  "description": "",
                  "childParamsGroups": []
                },
                "side": {
                  "type": "string",
                  "examples": [
                    "RIGHT"
                  ],
                  "name": "side",
                  "in": "body",
                  "rawType": "string",
                  "description": "",
                  "childParamsGroups": []
                },
                "start_line": {
                  "type": "integer",
                  "examples": [
                    26
                  ],
                  "name": "start_line",
                  "in": "body",
                  "rawType": "integer",
                  "description": "",
                  "childParamsGroups": []
                },
                "start_side": {
                  "type": "string",
                  "examples": [
                    "LEFT"
                  ],
                  "name": "start_side",
                  "in": "body",
                  "rawType": "string",
                  "description": "",
                  "childParamsGroups": []
                }
              },
              "required": [
                "path",
                "body"
              ]
            },
            "name": "comments",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Use the following table to specify the location, destination, and contents of the draft review comment.",
            "childParamsGroups": [
              {
                "parentName": "comments",
                "parentType": "items",
                "id": "comments-items",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The relative path to the file that necessitates a review comment.</p>",
                    "name": "path",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The relative path to the file that necessitates a review comment.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "description": "<p>The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.</p>",
                    "name": "position",
                    "in": "body",
                    "rawType": "integer",
                    "rawDescription": "The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. Text of the review comment.</p>",
                    "name": "body",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "Text of the review comment.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "examples": [
                      28
                    ],
                    "name": "line",
                    "in": "body",
                    "rawType": "integer",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "RIGHT"
                    ],
                    "name": "side",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "integer",
                    "examples": [
                      26
                    ],
                    "name": "start_line",
                    "in": "body",
                    "rawType": "integer",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "LEFT"
                    ],
                    "name": "start_side",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "body": "This is close to perfect! Please address the suggested inline change.",
                "event": "REQUEST_CHANGES",
                "comments": [
                  {
                    "path": "file.md",
                    "position": 6,
                    "body": "Please add more information here, and fix this typo."
                  }
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "This is close to perfect! Please address the suggested inline change.",
                "state": "CHANGES_REQUESTED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>\n<p>Pull request reviews created in the <code>PENDING</code> state do not include the <code>submitted_at</code> property in the response.</p>\n<p><strong>Note:</strong> To comment on a specific line in a file, you need to first determine the <em>position</em> of that line in the diff. The GitHub REST API v3 offers the <code>application/vnd.github.v3.diff</code> <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types#commits-commit-comparison-and-pull-requests\">media type</a>. To see a pull request diff, add this media type to the <code>Accept</code> header of a call to the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#get-a-pull-request\">single pull request</a> endpoint.</p>\n<p>The <code>position</code> value equals the number of lines down from the first \"@@\" hunk header in the file you want to add a comment. The line just below the \"@@\" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "title": "Get a review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Here is the body for the review.",
                "state": "APPROVED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "title": "Update a review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The body text of the pull request review.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The body text of the pull request review.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "This is close to perfect! Please address the suggested inline change. And add more about this."
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "This is close to perfect! Please address the suggested inline change. And add more about this.",
                "state": "CHANGES_REQUESTED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Update the review summary comment with new text.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
        "title": "Delete a pending review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "This is close to perfect! Please address the suggested inline change.",
                "state": "CHANGES_REQUESTED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        "title": "List comments for a pull request review",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1",
                  "pull_request_review_id": 42,
                  "id": 10,
                  "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw",
                  "diff_hunk": "@@ -16,33 +16,40 @@ public class Connection : IConnection...",
                  "path": "file1.txt",
                  "position": 1,
                  "original_position": 4,
                  "commit_id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
                  "original_commit_id": "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840",
                  "in_reply_to_id": 8,
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Great stuff!",
                  "created_at": "2011-04-14T16:00:49Z",
                  "updated_at": "2011-04-14T16:00:49Z",
                  "html_url": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1",
                  "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1",
                  "author_association": "NONE",
                  "_links": {
                    "self": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
                    },
                    "html": {
                      "href": "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
                    },
                    "pull_request": {
                      "href": "https://api.github.com/repos/octocat/Hello-World/pulls/1"
                    }
                  }
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List comments for a specific pull request review.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
        "title": "Dismiss a review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The message for the pull request review dismissal</p>",
            "name": "message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The message for the pull request review dismissal",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"APPROVE\""
            ],
            "name": "event",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Here is the body for the review.",
                "state": "DISMISSED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> To dismiss a pull request review on a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#branches\">protected branch</a>, you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
        "title": "Submit a review for a pull request",
        "category": "pulls",
        "subcategory": "reviews",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "pull_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "review_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>review_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The body text of the pull request review</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The body text of the pull request review",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The review action you want to perform. The review actions include: <code>APPROVE</code>, <code>REQUEST_CHANGES</code>, or <code>COMMENT</code>. When you leave this blank, the API returns <em>HTTP 422 (Unrecognizable entity)</em> and sets the review action state to <code>PENDING</code>, which means you will need to re-submit the pull request review using a review action.</p>",
            "enum": [
              "APPROVE",
              "REQUEST_CHANGES",
              "COMMENT"
            ],
            "name": "event",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "pull_number": "PULL_NUMBER",
                "review_id": "REVIEW_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 80,
                "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA=",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Here is the body for the review.",
                "state": "APPROVED",
                "html_url": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80",
                "pull_request_url": "https://api.github.com/repos/octocat/Hello-World/pulls/12",
                "_links": {
                  "html": {
                    "href": "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
                  },
                  "pull_request": {
                    "href": "https://api.github.com/repos/octocat/Hello-World/pulls/12"
                  }
                },
                "submitted_at": "2019-11-17T17:43:43Z",
                "commit_id": "ecdd80bb57125d7ba9641ffaa4d7d2c19d3f3091",
                "author_association": "COLLABORATOR"
              }
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ]
  },
  "rate-limit": {
    "rate-limit": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/rate_limit",
        "title": "Get rate limit status for the authenticated user",
        "category": "rate-limit",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "resources": {
                  "core": {
                    "limit": 5000,
                    "remaining": 4999,
                    "reset": 1372700873,
                    "used": 1
                  },
                  "search": {
                    "limit": 30,
                    "remaining": 18,
                    "reset": 1372697452,
                    "used": 12
                  },
                  "graphql": {
                    "limit": 5000,
                    "remaining": 4993,
                    "reset": 1372700389,
                    "used": 7
                  },
                  "integration_manifest": {
                    "limit": 5000,
                    "remaining": 4999,
                    "reset": 1551806725,
                    "used": 1
                  },
                  "code_scanning_upload": {
                    "limit": 500,
                    "remaining": 499,
                    "reset": 1551806725,
                    "used": 1
                  }
                },
                "rate": {
                  "limit": 5000,
                  "remaining": 4999,
                  "reset": 1372700873,
                  "used": 1
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> Accessing this endpoint does not count against your REST API rate limit.</p>\n<p><strong>Note:</strong> The <code>rate</code> object is deprecated. If you're writing new API client code or updating existing code, you should use the <code>core</code> object instead of the <code>rate</code> object. The <code>core</code> object contains the same information that is present in the <code>rate</code> object.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "rate-limit"
      }
    ]
  },
  "reactions": {
    "reactions": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "title": "List reactions for a team discussion comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a team discussion comment.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments/\">team discussion comment</a>. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "title": "Create reaction for a team discussion comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the team discussion comment.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response when the reaction type has already been added to this team discussion comment",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments\">team discussion comment</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this team discussion comment.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Response when the reaction type has already been added to this team discussion comment</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
        "title": "Delete team discussion comment reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a team or organization with <code>team_id</code> and <code>org_id</code> using the route <code>DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id</code>.</p>\n<p>Delete a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments\">team discussion comment</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "title": "List reactions for a team discussion",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a team discussion.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a>. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "title": "Create reaction for a team discussion",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the team discussion.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this team discussion.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
        "title": "Delete team discussion reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a team or organization with <code>team_id</code> and <code>org_id</code> using the route <code>DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id</code>.</p>\n<p>Delete a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/reactions/{reaction_id}",
        "title": "Delete a reaction (Legacy)",
        "category": "reactions",
        "parameters": [
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this <a href=\"https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/\">blog post</a>.</p>\n<p>OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>, when deleting a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a> or <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments\">team discussion comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "title": "List reactions for a commit comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a commit comment.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments\">commit comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "title": "Create reaction for a commit comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the commit comment.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the commit comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Reaction exists",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Reaction created",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments\">commit comment</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this commit comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Reaction exists</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Reaction created</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
        "title": "Delete a commit comment reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a repository by <code>repository_id</code> using the route <code>DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id</code>.</p>\n<p>Delete a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#comments\">commit comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "title": "List reactions for an issue comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to an issue comment.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments\">issue comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "title": "Create reaction for an issue comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the issue comment.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Reaction exists",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Reaction created",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments\">issue comment</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this issue comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Reaction exists</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Reaction created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
        "title": "Delete an issue comment reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a repository by <code>repository_id</code> using the route <code>DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id</code>.</p>\n<p>Delete a reaction to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues#comments\">issue comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "title": "List reactions for an issue",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to an issue.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues\">issue</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "410",
            "description": "<p>Gone</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "title": "Create reaction for an issue",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the issue.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the issue.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues/\">issue</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this issue.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
        "title": "Delete an issue reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "issue_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>issue_number parameter</p>"
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "issue_number": "ISSUE_NUMBER",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a repository by <code>repository_id</code> using the route <code>DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id</code>.</p>\n<p>Delete a reaction to an <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/issues/\">issue</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "title": "List reactions for a pull request review comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a pull request review comment.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#review-comments\">pull request review comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "title": "Create reaction for a pull request review comment",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the pull request review comment.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the pull request review comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Reaction exists",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Reaction created",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#comments\">pull request review comment</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this pull request review comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Reaction exists</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Reaction created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
        "title": "Delete a pull request comment reaction",
        "category": "reactions",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>comment_id parameter</p>"
          },
          {
            "name": "reaction_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "comment_id": "COMMENT_ID",
                "reaction_id": "REACTION_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note:</strong> You can also specify a repository by <code>repository_id</code> using the route <code>DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.</code></p>\n<p>Delete a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/pulls#review-comments\">pull request review comment</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "title": "List reactions for a team discussion comment (Legacy)",
        "category": "reactions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a team discussion comment.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion-comment\"><code>List reactions for a team discussion comment</code></a> endpoint.</p>\n<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments\">team discussion comment</a>. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "title": "Create reaction for a team discussion comment (Legacy)",
        "category": "reactions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the team discussion comment.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion comment.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#create-reaction-for-a-team-discussion-comment\">Create reaction for a team discussion comment</a>\" endpoint.</p>\n<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussion-comments\">team discussion comment</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this team discussion comment.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/reactions",
        "title": "List reactions for a team discussion (Legacy)",
        "category": "reactions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "content",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "+1",
                "-1",
                "laugh",
                "confused",
                "heart",
                "hooray",
                "rocket",
                "eyes"
              ]
            },
            "descriptionHTML": "<p>Returns a single <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a>. Omit this parameter to list all reactions to a team discussion.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDg6UmVhY3Rpb24x",
                  "user": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "content": "heart",
                  "created_at": "2016-05-20T20:09:31Z"
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#list-reactions-for-a-team-discussion\"><code>List reactions for a team discussion</code></a> endpoint.</p>\n<p>List the reactions to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a>. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/reactions",
        "title": "Create reaction for a team discussion (Legacy)",
        "category": "reactions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types\">reaction type</a> to add to the team discussion.</p>",
            "enum": [
              "+1",
              "-1",
              "laugh",
              "confused",
              "heart",
              "hooray",
              "rocket",
              "eyes"
            ],
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [reaction type](https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#reaction-types) to add to the team discussion.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "content": "heart"
              },
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDg6UmVhY3Rpb24x",
                "user": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "content": "heart",
                "created_at": "2016-05-20T20:09:31Z"
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions#create-reaction-for-a-team-discussion\"><code>Create reaction for a team discussion</code></a> endpoint.</p>\n<p>Create a reaction to a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#discussions\">team discussion</a>. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>. A response with an HTTP <code>200</code> status means that you already added the reaction type to this team discussion.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ],
        "subcategory": "reactions"
      }
    ]
  },
  "releases": {
    "releases": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases",
        "title": "List releases",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                  "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                  "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                  "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                  "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                  "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                  "id": 1,
                  "node_id": "MDc6UmVsZWFzZTE=",
                  "tag_name": "v1.0.0",
                  "target_commitish": "master",
                  "name": "v1.0.0",
                  "body": "Description of the release",
                  "draft": false,
                  "prerelease": false,
                  "created_at": "2013-02-27T19:35:32Z",
                  "published_at": "2013-02-27T19:35:32Z",
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "assets": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                      "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                      "id": 1,
                      "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                      "name": "example.zip",
                      "label": "short description",
                      "state": "uploaded",
                      "content_type": "application/zip",
                      "size": 1024,
                      "download_count": 42,
                      "created_at": "2013-02-27T19:35:32Z",
                      "updated_at": "2013-02-27T19:35:32Z",
                      "uploader": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      }
                    }
                  ]
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-repository-tags\">Repository Tags API</a>.</p>\n<p>Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/releases",
        "title": "Create a release",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the tag.</p>",
            "name": "tag_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the tag.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually <code>master</code>).</p>",
            "name": "target_commitish",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The name of the release.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the release.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Text describing the contents of the tag.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Text describing the contents of the tag.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p><code>true</code> to create a draft (unpublished) release, <code>false</code> to create a published one.</p>",
            "default": false,
            "name": "draft",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "`true` to create a draft (unpublished) release, `false` to create a published one.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p><code>true</code> to identify the release as a prerelease. <code>false</code> to identify the release as a full release.</p>",
            "default": false,
            "name": "prerelease",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "`true` to identify the release as a prerelease. `false` to identify the release as a full release.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
                "id": 1,
                "node_id": "MDc6UmVsZWFzZTE=",
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false,
                "created_at": "2013-02-27T19:35:32Z",
                "published_at": "2013-02-27T19:35:32Z",
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assets": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                    "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                    "id": 1,
                    "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                    "name": "example.zip",
                    "label": "short description",
                    "state": "uploaded",
                    "content_type": "application/zip",
                    "size": 1024,
                    "download_count": 42,
                    "created_at": "2013-02-27T19:35:32Z",
                    "updated_at": "2013-02-27T19:35:32Z",
                    "uploader": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access to the repository can create a release.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases/latest",
        "title": "Get the latest release",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
                "id": 1,
                "node_id": "MDc6UmVsZWFzZTE=",
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false,
                "created_at": "2013-02-27T19:35:32Z",
                "published_at": "2013-02-27T19:35:32Z",
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assets": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                    "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                    "id": 1,
                    "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                    "name": "example.zip",
                    "label": "short description",
                    "state": "uploaded",
                    "content_type": "application/zip",
                    "size": 1024,
                    "download_count": 42,
                    "created_at": "2013-02-27T19:35:32Z",
                    "updated_at": "2013-02-27T19:35:32Z",
                    "uploader": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>View the latest published full release for the repository.</p>\n<p>The latest release is the most recent non-prerelease, non-draft release, sorted by the <code>created_at</code> attribute. The <code>created_at</code> attribute is the date of the commit used for the release, and not the date when the release was drafted or published.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases/tags/{tag}",
        "title": "Get a release by tag name",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "tag",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>tag parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "tag": "TAG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
                "id": 1,
                "node_id": "MDc6UmVsZWFzZTE=",
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false,
                "created_at": "2013-02-27T19:35:32Z",
                "published_at": "2013-02-27T19:35:32Z",
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assets": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                    "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                    "id": 1,
                    "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                    "name": "example.zip",
                    "label": "short description",
                    "state": "uploaded",
                    "content_type": "application/zip",
                    "size": 1024,
                    "download_count": 42,
                    "created_at": "2013-02-27T19:35:32Z",
                    "updated_at": "2013-02-27T19:35:32Z",
                    "uploader": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Get a published release with the specified tag.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases/{release_id}",
        "title": "Get a release",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "release_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>release_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "release_id": "RELEASE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "**Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia).",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
                "id": 1,
                "node_id": "MDc6UmVsZWFzZTE=",
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false,
                "created_at": "2013-02-27T19:35:32Z",
                "published_at": "2013-02-27T19:35:32Z",
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assets": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                    "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                    "id": 1,
                    "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                    "name": "example.zip",
                    "label": "short description",
                    "state": "uploaded",
                    "content_type": "application/zip",
                    "size": 1024,
                    "download_count": 42,
                    "created_at": "2013-02-27T19:35:32Z",
                    "updated_at": "2013-02-27T19:35:32Z",
                    "uploader": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> This returns an <code>upload_url</code> key corresponding to the endpoint for uploading release assets. This key is a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia\">hypermedia resource</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p><strong>Note:</strong> This returns an <code>upload_url</code> key corresponding to the endpoint for uploading release assets. This key is a <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia\">hypermedia resource</a>.</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/releases/{release_id}",
        "title": "Update a release",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "release_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>release_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The name of the tag.</p>",
            "name": "tag_name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the tag.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually <code>master</code>).</p>",
            "name": "target_commitish",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The name of the release.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the release.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Text describing the contents of the tag.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Text describing the contents of the tag.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p><code>true</code> makes the release a draft, and <code>false</code> publishes the release.</p>",
            "name": "draft",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "`true` makes the release a draft, and `false` publishes the release.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p><code>true</code> to identify the release as a prerelease, <code>false</code> to identify the release as a full release.</p>",
            "name": "prerelease",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "`true` to identify the release as a prerelease, `false` to identify the release as a full release.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "release_id": "RELEASE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/1",
                "html_url": "https://github.com/octocat/Hello-World/releases/v1.0.0",
                "assets_url": "https://api.github.com/repos/octocat/Hello-World/releases/1/assets",
                "upload_url": "https://uploads.github.com/repos/octocat/Hello-World/releases/1/assets{?name,label}",
                "tarball_url": "https://api.github.com/repos/octocat/Hello-World/tarball/v1.0.0",
                "zipball_url": "https://api.github.com/repos/octocat/Hello-World/zipball/v1.0.0",
                "discussion_url": "https://github.com/octocat/Hello-World/discussions/90",
                "id": 1,
                "node_id": "MDc6UmVsZWFzZTE=",
                "tag_name": "v1.0.0",
                "target_commitish": "master",
                "name": "v1.0.0",
                "body": "Description of the release",
                "draft": false,
                "prerelease": false,
                "created_at": "2013-02-27T19:35:32Z",
                "published_at": "2013-02-27T19:35:32Z",
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "assets": [
                  {
                    "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                    "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                    "id": 1,
                    "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                    "name": "example.zip",
                    "label": "short description",
                    "state": "uploaded",
                    "content_type": "application/zip",
                    "size": 1024,
                    "download_count": 42,
                    "created_at": "2013-02-27T19:35:32Z",
                    "updated_at": "2013-02-27T19:35:32Z",
                    "uploader": {
                      "login": "octocat",
                      "id": 1,
                      "node_id": "MDQ6VXNlcjE=",
                      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    }
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access to the repository can edit a release.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/releases/{release_id}",
        "title": "Delete a release",
        "category": "releases",
        "subcategory": "releases",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "release_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>release_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "release_id": "RELEASE_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access to the repository can delete a release.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "assets": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "title": "Get a release asset",
        "category": "releases",
        "subcategory": "assets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>asset_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "asset_id": "ASSET_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/enterprise-server@3.1/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "id": 1,
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "name": "example.zip",
                "label": "short description",
                "state": "uploaded",
                "content_type": "application/zip",
                "size": 1024,
                "download_count": 42,
                "created_at": "2013-02-27T19:35:32Z",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>To download the asset's binary content, set the <code>Accept</code> header of the request to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\"><code>application/octet-stream</code></a>. The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a <code>200</code> or <code>302</code> response.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>To download the asset's binary content, set the <code>Accept</code> header of the request to <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\"><code>application/octet-stream</code></a>. The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a <code>200</code> or <code>302</code> response.</p>"
          },
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "title": "Update a release asset",
        "category": "releases",
        "subcategory": "assets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>asset_id parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The file name of the asset.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The file name of the asset.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>An alternate short description of the asset. Used in place of the filename.</p>",
            "name": "label",
            "in": "body",
            "rawType": "string",
            "rawDescription": "An alternate short description of the asset. Used in place of the filename.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "examples": [
              "\"uploaded\""
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "description": "",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "foo-1.0.0-osx.zip",
                "label": "Mac binary"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "asset_id": "ASSET_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "id": 1,
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "name": "example.zip",
                "label": "short description",
                "state": "uploaded",
                "content_type": "application/zip",
                "size": 1024,
                "download_count": 42,
                "created_at": "2013-02-27T19:35:32Z",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Users with push access to the repository can edit a release asset.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/releases/assets/{asset_id}",
        "title": "Delete a release asset",
        "category": "releases",
        "subcategory": "assets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "asset_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>asset_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "asset_id": "ASSET_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/releases/{release_id}/assets",
        "title": "List release assets",
        "category": "releases",
        "subcategory": "assets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "release_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>release_id parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "release_id": "RELEASE_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                  "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                  "id": 1,
                  "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                  "name": "example.zip",
                  "label": "short description",
                  "state": "uploaded",
                  "content_type": "application/zip",
                  "size": 1024,
                  "download_count": 42,
                  "created_at": "2013-02-27T19:35:32Z",
                  "updated_at": "2013-02-27T19:35:32Z",
                  "uploader": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "https://uploads.github.com",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/releases/{release_id}/assets",
        "title": "Upload a release asset",
        "category": "releases",
        "subcategory": "assets",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "release_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>release_id parameter</p>"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "label",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "*/*",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "release_id": "RELEASE_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response for successful upload",
              "example": {
                "url": "https://api.github.com/repos/octocat/Hello-World/releases/assets/1",
                "browser_download_url": "https://github.com/octocat/Hello-World/releases/download/v1.0.0/example.zip",
                "id": 1,
                "node_id": "MDEyOlJlbGVhc2VBc3NldDE=",
                "name": "example.zip",
                "label": "short description",
                "state": "uploaded",
                "content_type": "application/zip",
                "size": 1024,
                "download_count": 42,
                "created_at": "2013-02-27T19:35:32Z",
                "updated_at": "2013-02-27T19:35:32Z",
                "uploader": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint makes use of <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#hypermedia\">a Hypermedia relation</a> to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the <code>upload_url</code> returned in\nthe response of the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-release\">Create a release endpoint</a> to upload a release asset.</p>\n<p>You need to use an HTTP client which supports <a href=\"http://en.wikipedia.org/wiki/Server_Name_Indication\">SNI</a> to make calls to this endpoint.</p>\n<p>Most libraries will set the required <code>Content-Length</code> header automatically. Use the required <code>Content-Type</code> header to provide the media type of the asset. For a list of media types, see <a href=\"https://www.iana.org/assignments/media-types/media-types.xhtml\">Media Types</a>. For example: </p>\n<p><code>application/zip</code></p>\n<p>GitHub Enterprise Server expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,\nyou'll still need to pass your authentication to be able to upload an asset.</p>\n<p>When an upstream failure occurs, you will receive a <code>502 Bad Gateway</code> status. This may leave an empty asset with a state of <code>starter</code>. It can be safely deleted.</p>\n<p><strong>Notes:</strong></p>\n<ul>\n<li>GitHub Enterprise Server renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#list-assets-for-a-release\">List assets for a release</a>\"\nendpoint lists the renamed filenames. For more information and help, contact <a href=\"https://support.github.com/contact?tags=dotcom-rest-api\">GitHub Enterprise Server Support</a>.</li>\n<li>If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Response for successful upload</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Response if you upload an asset with the same filename as another uploaded asset</p>"
          }
        ]
      }
    ]
  },
  "repos": {
    "repos": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/repos",
        "title": "List organization repositories",
        "category": "repos",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "public",
                "private",
                "forks",
                "sources",
                "member",
                "internal"
              ]
            },
            "descriptionHTML": "<p>Specifies the types of repositories you want returned. Can be one of <code>all</code>, <code>public</code>, <code>private</code>, <code>forks</code>, <code>sources</code>, <code>member</code>, <code>internal</code>. Note: For GitHub AE, can be one of <code>all</code>, <code>private</code>, <code>forks</code>, <code>sources</code>, <code>member</code>, <code>internal</code>. Default: <code>all</code>. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, <code>type</code> can also be <code>internal</code>. However, the <code>internal</code> value is not yet supported when a GitHub App calls this API with an installation access token.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "created"
            },
            "descriptionHTML": "<p>Can be one of <code>created</code>, <code>updated</code>, <code>pushed</code>, <code>full_name</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Can be one of <code>asc</code> or <code>desc</code>. Default: when using <code>full_name</code>: <code>asc</code>, otherwise <code>desc</code></p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists repositories for the specified organization.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>",
          "<p>The <code>is_template</code> and <code>template_repository</code> keys are currently available for developer to preview. See <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-using-a-template\">Create a repository using a template</a> to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.baptiste-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/repos",
        "title": "Create an organization repository",
        "category": "repos",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the repository.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the repository.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A URL with more information about the repository.</p>",
            "name": "homepage",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL with more information about the repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Whether the repository is private.</p>",
            "default": false,
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the repository is private.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Can be <code>public</code> or <code>private</code>. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, <code>visibility</code> can also be <code>internal</code>. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"<a href=\"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories\">Creating an internal repository</a>\" in the GitHub Help documentation.<br>\nThe <code>visibility</code> parameter overrides the <code>private</code> parameter when you use both parameters with the <code>nebula-preview</code> preview header.</p>",
            "enum": [
              "public",
              "private",
              "internal"
            ],
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see \"[Creating an internal repository](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)\" in the GitHub Help documentation.  \nThe `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable issues for this repository or <code>false</code> to disable them.</p>",
            "default": true,
            "name": "has_issues",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable issues for this repository or `false` to disable them.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable projects for this repository or <code>false</code> to disable them. <strong>Note:</strong> If you're creating a repository in an organization that has disabled repository projects, the default is <code>false</code>, and if you pass <code>true</code>, the API returns an error.</p>",
            "default": true,
            "name": "has_projects",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable the wiki for this repository or <code>false</code> to disable it.</p>",
            "default": true,
            "name": "has_wiki",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable the wiki for this repository or `false` to disable it.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to make this repo available as a template repository or <code>false</code> to prevent it.</p>",
            "default": false,
            "name": "is_template",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p>The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.</p>",
            "name": "team_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Pass <code>true</code> to create an initial commit with empty README.</p>",
            "default": false,
            "name": "auto_init",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Pass `true` to create an initial commit with empty README.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Desired language or platform <a href=\"https://github.com/github/gitignore\">.gitignore template</a> to apply. Use the name of the template without the extension. For example, \"Haskell\".</p>",
            "name": "gitignore_template",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, \"Haskell\".",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Choose an <a href=\"https://choosealicense.com/\">open source license template</a> that best suits your needs, and then use the <a href=\"https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type\">license keyword</a> as the <code>license_template</code> string. For example, \"mit\" or \"mpl-2.0\".</p>",
            "name": "license_template",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, \"mit\" or \"mpl-2.0\".",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow squash-merging pull requests, or <code>false</code> to prevent squash-merging.</p>",
            "default": true,
            "name": "allow_squash_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow merging pull requests with a merge commit, or <code>false</code> to prevent merging pull requests with merge commits.</p>",
            "default": true,
            "name": "allow_merge_commit",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow rebase-merging pull requests, or <code>false</code> to prevent rebase-merging.</p>",
            "default": true,
            "name": "allow_rebase_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow automatically deleting head branches when pull requests are merged, or <code>false</code> to prevent automatic deletion.</p>",
            "default": false,
            "name": "delete_branch_on_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Hello-World",
                "description": "This is your first repository",
                "homepage": "https://github.com",
                "private": false,
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks": 9,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues": 0,
                "open_issues_count": 0,
                "is_template": true,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a new repository in the specified organization. The authenticated user must be a member of the organization.</p>\n<p><strong>OAuth scope requirements</strong></p>\n<p>When using <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">OAuth</a>, authorizations must include:</p>\n<ul>\n<li><code>public_repo</code> scope or <code>repo</code> scope to create a public repository. Note: For GitHub AE, use <code>repo</code> scope to create an internal repository.</li>\n<li><code>repo</code> scope to create a private repository</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>",
          "<p>The <code>is_template</code> and <code>template_repository</code> keys are currently available for developer to preview. See <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-using-a-template\">Create a repository using a template</a> to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.baptiste-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}",
        "title": "Get a repository",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default-response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "forks": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "open_issues": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "pull": true,
                  "push": false,
                  "admin": false
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                "organization": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "parent": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                },
                "source": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              }
            }
          },
          {
            "key": "response-with-scarlet-witch-preview-media-type",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response with scarlet-witch-preview media type",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "forks": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "open_issues": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "pull": true,
                  "push": false,
                  "admin": false
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "spdx_id": "MIT",
                  "url": "https://api.github.com/licenses/mit",
                  "node_id": "MDc6TGljZW5zZW1pdA=="
                },
                "organization": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "parent": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                },
                "source": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                },
                "code_of_conduct": {
                  "key": "other",
                  "name": "Other",
                  "html_url": "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md",
                  "url": "https://api.github.com/repos/github/docs/community/code_of_conduct"
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>When you pass the <code>scarlet-witch-preview</code> media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.</p>\n<p>The <code>parent</code> and <code>source</code> objects are present when the repository is a fork. <code>parent</code> is the repository this repository was forked from, <code>source</code> is the ultimate source for the network.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "301",
            "description": "<p>Moved permanently</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>",
          "<p>The Codes of Conduct API is currently available for developers to preview.</p>\n<p>To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.scarlet-witch-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}",
        "title": "Update a repository",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The name of the repository.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the repository.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A URL with more information about the repository.</p>",
            "name": "homepage",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL with more information about the repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to make the repository private or <code>false</code> to make it public. Default: <code>false</code>.<br>\n<strong>Note</strong>: You will get a <code>422</code> error if the organization restricts <a href=\"https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories\">changing repository visibility</a> to organization owners and a non-owner tries to change the value of private. <strong>Note</strong>: You will get a <code>422</code> error if the organization restricts <a href=\"https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories\">changing repository visibility</a> to organization owners and a non-owner tries to change the value of private.</p>",
            "default": false,
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to make the repository private or `false` to make it public. Default: `false`.  \n**Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Can be <code>public</code> or <code>private</code>. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, <code>visibility</code> can also be <code>internal</code>. The <code>visibility</code> parameter overrides the <code>private</code> parameter when you use both along with the <code>nebula-preview</code> preview header.</p>",
            "enum": [
              "public",
              "private",
              "internal"
            ],
            "name": "visibility",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable issues for this repository or <code>false</code> to disable them.</p>",
            "default": true,
            "name": "has_issues",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable issues for this repository or `false` to disable them.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable projects for this repository or <code>false</code> to disable them. <strong>Note:</strong> If you're creating a repository in an organization that has disabled repository projects, the default is <code>false</code>, and if you pass <code>true</code>, the API returns an error.</p>",
            "default": true,
            "name": "has_projects",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to enable the wiki for this repository or <code>false</code> to disable it.</p>",
            "default": true,
            "name": "has_wiki",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to enable the wiki for this repository or `false` to disable it.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to make this repo available as a template repository or <code>false</code> to prevent it.</p>",
            "default": false,
            "name": "is_template",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to make this repo available as a template repository or `false` to prevent it.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>Updates the default branch for this repository.</p>",
            "name": "default_branch",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Updates the default branch for this repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow squash-merging pull requests, or <code>false</code> to prevent squash-merging.</p>",
            "default": true,
            "name": "allow_squash_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow merging pull requests with a merge commit, or <code>false</code> to prevent merging pull requests with merge commits.</p>",
            "default": true,
            "name": "allow_merge_commit",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow rebase-merging pull requests, or <code>false</code> to prevent rebase-merging.</p>",
            "default": true,
            "name": "allow_rebase_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow automatically deleting head branches when pull requests are merged, or <code>false</code> to prevent automatic deletion.</p>",
            "default": false,
            "name": "delete_branch_on_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p><code>true</code> to archive this repository. <strong>Note</strong>: You cannot unarchive repositories through the API.</p>",
            "default": false,
            "name": "archived",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "`true` to archive this repository. **Note**: You cannot unarchive repositories through the API.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to allow private forks, or <code>false</code> to prevent private forks.</p>",
            "default": false,
            "name": "allow_forking",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to allow private forks, or `false` to prevent private forks.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Hello-World",
                "description": "This is your first repository",
                "homepage": "https://github.com",
                "private": true,
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://github.com/licenses/mit"
                },
                "forks_count": 9,
                "forks": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "open_issues": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "pull": true,
                  "push": false,
                  "admin": false
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "allow_forking": true,
                "subscribers_count": 42,
                "network_count": 0,
                "organization": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "parent": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                },
                "source": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Note</strong>: To edit a repository's topics, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#replace-all-repository-topics\">Replace all repository topics</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "307",
            "description": "<p>Temporary Redirect</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>",
          "<p>The <code>is_template</code> and <code>template_repository</code> keys are currently available for developer to preview. See <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-using-a-template\">Create a repository using a template</a> to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.baptiste-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}",
        "title": "Delete a repository",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deleting a repository requires admin access. If OAuth is used, the <code>delete_repo</code> scope is required.</p>\n<p>If an organization owner has configured the organization to prevent members from deleting organization-owned\nrepositories, you will get a <code>403 Forbidden</code> response.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "307",
            "description": "<p>Temporary Redirect</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response:</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/contributors",
        "title": "List repository contributors",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "anon",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Set to <code>1</code> or <code>true</code> to include anonymous contributors in results.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "response-if-repository-contains-content",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if repository contains content",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false,
                  "contributions": 32
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.</p>\n<p>GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if repository contains content</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response if repository is empty</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/dispatches",
        "title": "Create a repository dispatch event",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. A custom webhook event name.</p>",
            "minLength": 1,
            "maxLength": 100,
            "name": "event_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A custom webhook event name.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>JSON payload with extra information about the webhook event that your action or worklow may use.</p>",
            "additionalProperties": true,
            "maxProperties": 10,
            "name": "client_payload",
            "in": "body",
            "rawType": "object",
            "rawDescription": "JSON payload with extra information about the webhook event that your action or worklow may use.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "event_type": "on-demand-test",
                "client_payload": {
                  "unit": false,
                  "integration": true
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>You can use this endpoint to trigger a webhook event called <code>repository_dispatch</code> when you want activity that happens outside of GitHub Enterprise Server to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the <code>repository_dispatch</code> event occurs. For an example <code>repository_dispatch</code> webhook payload, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#repository_dispatch\">RepositoryDispatchEvent</a>.\"</p>\n<p>The <code>client_payload</code> parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the <code>client_payload</code> can include a message that a user would like to send using a GitHub Actions workflow. Or the <code>client_payload</code> can be used as a test to debug your workflow.</p>\n<p>This endpoint requires write access to the repository by providing either:</p>\n<ul>\n<li>Personal access tokens with <code>repo</code> scope. For more information, see \"<a href=\"https://docs.github.com/articles/creating-a-personal-access-token-for-the-command-line\">Creating a personal access token for the command line</a>\" in the GitHub Help documentation.</li>\n<li>GitHub Apps with both <code>metadata:read</code> and <code>contents:read&#x26;write</code> permissions.</li>\n</ul>\n<p>This input example shows how you can use the <code>client_payload</code> as a test to debug your workflow.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/languages",
        "title": "List repository languages",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "C": 78769,
                "Python": 7769
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/tags",
        "title": "List repository tags",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "name": "v0.1",
                  "commit": {
                    "sha": "c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc",
                    "url": "https://api.github.com/repos/octocat/Hello-World/commits/c5b97d5ae6c19d5c5df71a34c7fbeeda2479ccbc"
                  },
                  "zipball_url": "https://github.com/octocat/Hello-World/zipball/v0.1",
                  "tarball_url": "https://github.com/octocat/Hello-World/tarball/v0.1",
                  "node_id": "MDQ6VXNlcjE="
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/teams",
        "title": "List repository teams",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/topics",
        "title": "Get all repository topics",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "names": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ]
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/topics",
        "title": "Replace all repository topics",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "array of strings",
            "description": "<p><strong>Required</strong>. An array of topics to add to the repository. Pass one or more topics to <em>replace</em> the set of existing topics. Send an empty array (<code>[]</code>) to clear all topics from the repository. <strong>Note:</strong> Topic <code>names</code> cannot contain uppercase letters.</p>",
            "items": {
              "type": "string"
            },
            "name": "names",
            "in": "body",
            "rawType": "array",
            "rawDescription": "An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "names": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "names": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ]
              }
            }
          }
        ],
        "descriptionHTML": "",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/transfer",
        "title": "Transfer a repository",
        "category": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The username or organization name the repository will be transferred to.</p>",
            "name": "new_owner",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The username or organization name the repository will be transferred to.",
            "childParamsGroups": []
          },
          {
            "type": "array of integers",
            "description": "<p>ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.</p>",
            "items": {
              "type": "integer"
            },
            "name": "team_ids",
            "in": "body",
            "rawType": "array",
            "rawDescription": "ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "new_owner": "github",
                "team_ids": [
                  12,
                  345
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "allow_forking": true,
                  "subscribers_count": 42,
                  "network_count": 0
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original <code>owner</code>, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see <a href=\"https://docs.github.com/articles/about-repository-transfers/\">about repository transfers</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{template_owner}/{template_repo}/generate",
        "title": "Create a repository using a template",
        "category": "repos",
        "parameters": [
          {
            "name": "template_owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "template_repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.</p>",
            "name": "owner",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the new repository.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the new repository.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>A short description of the new repository.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the new repository.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Set to <code>true</code> to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: <code>false</code>.</p>",
            "default": false,
            "name": "include_all_branches",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Either <code>true</code> to create a new private repository or <code>false</code> to create a new public one.</p>",
            "default": false,
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Either `true` to create a new private repository or `false` to create a new public one.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "owner": "octocat",
                "name": "Hello-World",
                "description": "This is your first repository",
                "include_all_branches": false,
                "private": false
              },
              "parameters": {
                "template_owner": "TEMPLATE_OWNER",
                "template_repo": "TEMPLATE_REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "forks": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "open_issues": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://github.com/licenses/mit"
                },
                "template_repository": {}
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a new repository using a repository template. Use the <code>template_owner</code> and <code>template_repo</code> route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#get-a-repository\">Get a repository</a> endpoint and check that the <code>is_template</code> key is <code>true</code>.</p>\n<p><strong>OAuth scope requirements</strong></p>\n<p>When using <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">OAuth</a>, authorizations must include:</p>\n<ul>\n<li><code>public_repo</code> scope or <code>repo</code> scope to create a public repository. Note: For GitHub AE, use <code>repo</code> scope to create an internal repository.</li>\n<li><code>repo</code> scope to create a private repository</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>Creating and using repository templates is currently available for developers to preview. To access this new endpoint during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.baptiste-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repositories",
        "title": "List public repositories",
        "category": "repos",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>A repository ID. Only return repositories with an ID greater than this ID.</p>"
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "public",
              "enum": [
                "all",
                "public"
              ],
              "examples": [
                "all"
              ]
            },
            "descriptionHTML": "<p>Specifies the types of repositories to return. Can be one of <code>all</code> or <code>public</code>. Default: <code>public</code>. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all public repositories in the order that they were created.</p>\n<p>Note:</p>\n<ul>\n<li>For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.</li>\n<li>Pagination is powered exclusively by the <code>since</code> parameter. Use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header\">Link header</a> to get the URL for the next page of repositories.</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/repos",
        "title": "List repositories for the authenticated user",
        "category": "repos",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "public",
                "private"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Can be one of <code>all</code>, <code>public</code>, or <code>private</code>. Note: For GitHub AE, can be one of <code>all</code>, <code>internal</code>, or <code>private</code>.</p>"
          },
          {
            "name": "affiliation",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "owner,collaborator,organization_member"
            },
            "descriptionHTML": "<p>Comma-separated list of values. Can include:<br>\n* <code>owner</code>: Repositories that are owned by the authenticated user.<br>\n* <code>collaborator</code>: Repositories that the user has been added to as a collaborator.<br>\n* <code>organization_member</code>: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.</p>"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "public",
                "private",
                "member"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Can be one of <code>all</code>, <code>owner</code>, <code>public</code>, <code>private</code>, <code>member</code>. Note: For GitHub AE, can be one of <code>all</code>, <code>owner</code>, <code>internal</code>, <code>private</code>, <code>member</code>. Default: <code>all</code>  </p>\n<p>Will cause a <code>422</code> error if used in the same request as <strong>visibility</strong> or <strong>affiliation</strong>. Will cause a <code>422</code> error if used in the same request as <strong>visibility</strong> or <strong>affiliation</strong>.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            },
            "descriptionHTML": "<p>Can be one of <code>created</code>, <code>updated</code>, <code>pushed</code>, <code>full_name</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Can be one of <code>asc</code> or <code>desc</code>. Default: <code>asc</code> when using <code>full_name</code>, otherwise <code>desc</code></p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated after the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "descriptionHTML": "<p>Only show notifications updated before the given time. This is a timestamp in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format: <code>YYYY-MM-DDTHH:MM:SSZ</code>.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "template_repository": null,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists repositories that the authenticated user has explicit permission (<code>:read</code>, <code>:write</code>, or <code>:admin</code>) to access.</p>\n<p>The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/user/repos",
        "title": "Create a repository for the authenticated user",
        "category": "repos",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. The name of the repository.</p>",
            "type": "string",
            "examples": [
              "Team Environment"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A short description of the repository.</p>",
            "type": "string",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A short description of the repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>A URL with more information about the repository.</p>",
            "type": "string",
            "name": "homepage",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A URL with more information about the repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the repository is private.</p>",
            "default": false,
            "type": "boolean",
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the repository is private.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether issues are enabled.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "has_issues",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether issues are enabled.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether projects are enabled.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "has_projects",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether projects are enabled.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the wiki is enabled.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "has_wiki",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the wiki is enabled.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.</p>",
            "type": "integer",
            "name": "team_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether the repository is initialized with a minimal README.</p>",
            "default": false,
            "type": "boolean",
            "name": "auto_init",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether the repository is initialized with a minimal README.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The desired language or platform to apply to the .gitignore.</p>",
            "type": "string",
            "examples": [
              "Haskell"
            ],
            "name": "gitignore_template",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The desired language or platform to apply to the .gitignore.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The license keyword of the open source license for this repository.</p>",
            "type": "string",
            "examples": [
              "mit"
            ],
            "name": "license_template",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The license keyword of the open source license for this repository.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether to allow squash merges for pull requests.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "allow_squash_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether to allow squash merges for pull requests.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether to allow merge commits for pull requests.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "allow_merge_commit",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether to allow merge commits for pull requests.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether to allow rebase merges for pull requests.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "allow_rebase_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether to allow rebase merges for pull requests.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether to delete head branches when pull requests are merged</p>",
            "default": false,
            "type": "boolean",
            "examples": [
              false
            ],
            "name": "delete_branch_on_merge",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether to delete head branches when pull requests are merged",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether downloads are enabled.</p>",
            "default": true,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "has_downloads",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether downloads are enabled.",
            "childParamsGroups": []
          },
          {
            "description": "<p>Whether this repository acts as a template that can be used to generate new repositories.</p>",
            "default": false,
            "type": "boolean",
            "examples": [
              true
            ],
            "name": "is_template",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Whether this repository acts as a template that can be used to generate new repositories.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks": 9,
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues": 0,
                "open_issues_count": 0,
                "is_template": true,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "push": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a new repository for the authenticated user.</p>\n<p><strong>OAuth scope requirements</strong></p>\n<p>When using <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">OAuth</a>, authorizations must include:</p>\n<ul>\n<li><code>public_repo</code> scope or <code>repo</code> scope to create a public repository. Note: For GitHub AE, use <code>repo</code> scope to create an internal repository.</li>\n<li><code>repo</code> scope to create a private repository.</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>",
          "<p>The <code>is_template</code> and <code>template_repository</code> keys are currently available for developer to preview. See <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-a-repository-using-a-template\">Create a repository using a template</a> to learn how to create template repositories. To access these new response keys during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.baptiste-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/repos",
        "title": "List repositories for a user",
        "category": "repos",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "all",
                "owner",
                "member"
              ],
              "default": "owner"
            },
            "descriptionHTML": "<p>Can be one of <code>all</code>, <code>owner</code>, <code>member</code>.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated",
                "pushed",
                "full_name"
              ],
              "default": "full_name"
            },
            "descriptionHTML": "<p>Can be one of <code>created</code>, <code>updated</code>, <code>pushed</code>, <code>full_name</code>.</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "descriptionHTML": "<p>Can be one of <code>asc</code> or <code>desc</code>. Default: <code>asc</code> when using <code>full_name</code>, otherwise <code>desc</code></p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>You can set the visibility of a repository using the new <code>visibility</code> parameter in the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos/\">Repositories API</a>, and get a repository's visibility with a new response key. For more information, see the <a href=\"https://developer.github.com/changes/2019-12-03-internal-visibility-changes/\">blog post</a>.</p>\n<p>To access repository visibility during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.nebula-preview+json</code></pre>"
        ],
        "subcategory": "repos"
      }
    ],
    "contents": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/contents/{path}",
        "title": "Get repository content",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>path parameter</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The name of the commit/branch/tag. Default: the repository’s default branch (usually <code>master</code>)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "response-if-content-is-a-file",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if content is a file",
              "example": {
                "type": "file",
                "encoding": "base64",
                "size": 5362,
                "name": "README.md",
                "path": "README.md",
                "content": "encoded content ...",
                "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
                "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
                "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
                "_links": {
                  "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                  "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                  "html": "https://github.com/octokit/octokit.rb/blob/master/README.md"
                }
              }
            }
          },
          {
            "key": "response-if-content-is-a-directory",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if content is a directory",
              "example": [
                {
                  "type": "file",
                  "size": 625,
                  "name": "octokit.rb",
                  "path": "lib/octokit.rb",
                  "sha": "fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
                  "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb",
                  "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
                  "html_url": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb",
                  "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/lib/octokit.rb",
                  "_links": {
                    "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit.rb",
                    "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/fff6fe3a23bf1c8ea0692b4a883af99bee26fd3b",
                    "html": "https://github.com/octokit/octokit.rb/blob/master/lib/octokit.rb"
                  }
                },
                {
                  "type": "dir",
                  "size": 0,
                  "name": "octokit",
                  "path": "lib/octokit",
                  "sha": "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                  "url": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit",
                  "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                  "html_url": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit",
                  "download_url": null,
                  "_links": {
                    "self": "https://api.github.com/repos/octokit/octokit.rb/contents/lib/octokit",
                    "git": "https://api.github.com/repos/octokit/octokit.rb/git/trees/a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d",
                    "html": "https://github.com/octokit/octokit.rb/tree/master/lib/octokit"
                  }
                }
              ]
            }
          },
          {
            "key": "response-if-content-is-a-symlink",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if content is a symlink",
              "example": {
                "type": "symlink",
                "target": "/path/to/symlink/target",
                "size": 23,
                "name": "some-symlink",
                "path": "bin/some-symlink",
                "sha": "452a98979c88e093d682cab404a3ec82babebb48",
                "url": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink",
                "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
                "html_url": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink",
                "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/bin/some-symlink",
                "_links": {
                  "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/452a98979c88e093d682cab404a3ec82babebb48",
                  "self": "https://api.github.com/repos/octokit/octokit.rb/contents/bin/some-symlink",
                  "html": "https://github.com/octokit/octokit.rb/blob/master/bin/some-symlink"
                }
              }
            }
          },
          {
            "key": "response-if-content-is-a-submodule",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if content is a submodule",
              "example": {
                "type": "submodule",
                "submodule_git_url": "git://github.com/jquery/qunit.git",
                "size": 0,
                "name": "qunit",
                "path": "test/qunit",
                "sha": "6ca3721222109997540bd6d9ccd396902e0ad2f9",
                "url": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master",
                "git_url": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
                "html_url": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9",
                "download_url": null,
                "_links": {
                  "git": "https://api.github.com/repos/jquery/qunit/git/trees/6ca3721222109997540bd6d9ccd396902e0ad2f9",
                  "self": "https://api.github.com/repos/jquery/jquery/contents/test/qunit?ref=master",
                  "html": "https://github.com/jquery/qunit/tree/6ca3721222109997540bd6d9ccd396902e0ad2f9"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the contents of a file or directory in a repository. Specify the file path or directory in <code>:path</code>. If you omit\n<code>:path</code>, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories. </p>\n<p>Files and symlinks support <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types\">a custom media type</a> for\nretrieving the raw content or rendered HTML (when supported). All content types support <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types\">a custom media\ntype</a> to ensure the content is returned in a consistent\nobject format.</p>\n<p><strong>Note</strong>:</p>\n<ul>\n<li>To get a repository's contents recursively, you can <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#trees\">recursively get the tree</a>.</li>\n<li>This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/git#get-a-tree\">Git Trees\nAPI</a>.</li>\n<li>This API supports files up to 1 megabyte in size.</li>\n</ul>\n<h4 id=\"if-the-content-is-a-directory\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#if-the-content-is-a-directory\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>If the content is a directory</h4>\n<p>The response will be an array of objects, one object for each item in the directory.\nWhen listing the contents of a directory, submodules have their \"type\" specified as \"file\". Logically, the value\n<em>should</em> be \"submodule\". This behavior exists in API v3 <a href=\"https://git.io/v1YCW\">for backwards compatibility purposes</a>.\nIn the next major version of the API, the type will be returned as \"submodule\".</p>\n<h4 id=\"if-the-content-is-a-symlink\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#if-the-content-is-a-symlink\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>If the content is a symlink</h4>\n<p>If the requested <code>:path</code> points to a symlink, and the symlink's target is a normal file in the repository, then the\nAPI responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object\ndescribing the symlink itself.</p>\n<h4 id=\"if-the-content-is-a-submodule\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#if-the-content-is-a-submodule\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>If the content is a submodule</h4>\n<p>The <code>submodule_git_url</code> identifies the location of the submodule repository, and the <code>sha</code> identifies a specific\ncommit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out\nthe submodule at that specific commit.</p>\n<p>If the submodule repository is not hosted on github.com, the Git URLs (<code>git_url</code> and <code>_links[\"git\"]</code>) and the\ngithub.com URLs (<code>html_url</code> and <code>_links[\"html\"]</code>) will have null values.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/repos/{owner}/{repo}/contents/{path}",
        "title": "Create or update file contents",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>path parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The commit message.</p>",
            "name": "message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The commit message.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The new file content, using Base64 encoding.</p>",
            "name": "content",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new file content, using Base64 encoding.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required if you are updating a file</strong>. The blob SHA of the file being replaced.</p>",
            "name": "sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Required if you are updating a file**. The blob SHA of the file being replaced.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The branch name. Default: the repository’s default branch (usually <code>master</code>)</p>",
            "name": "branch",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The branch name. Default: the repository’s default branch (usually `master`)",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>The person that committed the file. Default: the authenticated user.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The name of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>name</code> is omitted.</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The email of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>email</code> is omitted.</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                "childParamsGroups": []
              },
              "date": {
                "type": "string",
                "examples": [
                  "\"2013-01-05T13:13:22+05:00\""
                ],
                "name": "date",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              }
            },
            "required": [
              "name",
              "email"
            ],
            "name": "committer",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The person that committed the file. Default: the authenticated user.",
            "childParamsGroups": [
              {
                "parentName": "committer",
                "parentType": "object",
                "id": "committer-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The name of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>name</code> is omitted.</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The email of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>email</code> is omitted.</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"2013-01-05T13:13:22+05:00\""
                    ],
                    "name": "date",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "object",
            "description": "<p>The author of the file. Default: The <code>committer</code> or the authenticated user if you omit <code>committer</code>.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The name of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>name</code> is omitted.</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The email of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>email</code> is omitted.</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                "childParamsGroups": []
              },
              "date": {
                "type": "string",
                "examples": [
                  "\"2013-01-15T17:13:22+05:00\""
                ],
                "name": "date",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              }
            },
            "required": [
              "name",
              "email"
            ],
            "name": "author",
            "in": "body",
            "rawType": "object",
            "rawDescription": "The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.",
            "childParamsGroups": [
              {
                "parentName": "author",
                "parentType": "object",
                "id": "author-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The name of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>name</code> is omitted.</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The email of the author or committer of the commit. You'll receive a <code>422</code> status code if <code>email</code> is omitted.</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"2013-01-15T17:13:22+05:00\""
                    ],
                    "name": "date",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "example-for-creating-a-file",
            "request": {
              "contentType": "application/json",
              "description": "Example for creating a file",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "message": "my commit message",
                "committer": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "content": "bXkgbmV3IGZpbGUgY29udGVudHM="
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content": {
                  "name": "hello.txt",
                  "path": "notes/hello.txt",
                  "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
                  "size": 9,
                  "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
                  "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
                  "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
                  "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
                  "type": "file",
                  "_links": {
                    "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
                    "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/95b966ae1c166bd92f8ae7d1c313e738c731dfc3",
                    "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt"
                  }
                },
                "commit": {
                  "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
                  "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                  "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
                  "author": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "committer": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "message": "my commit message",
                  "tree": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
                    "sha": "691272480426f78a0138979dd3ce63b77f706feb"
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                      "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                      "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
                    }
                  ],
                  "verification": {
                    "verified": false,
                    "reason": "unsigned",
                    "signature": null,
                    "payload": null
                  }
                }
              }
            }
          },
          {
            "key": "example-for-updating-a-file",
            "request": {
              "contentType": "application/json",
              "description": "Example for updating a file",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "message": "a new commit message",
                "committer": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "content": "bXkgdXBkYXRlZCBmaWxlIGNvbnRlbnRz",
                "sha": "95b966ae1c166bd92f8ae7d1c313e738c731dfc3"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content": {
                  "name": "hello.txt",
                  "path": "notes/hello.txt",
                  "sha": "a56507ed892d05a37c6d6128c260937ea4d287bd",
                  "size": 9,
                  "url": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
                  "html_url": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt",
                  "git_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
                  "download_url": "https://raw.githubusercontent.com/octocat/HelloWorld/master/notes/hello.txt",
                  "type": "file",
                  "_links": {
                    "self": "https://api.github.com/repos/octocat/Hello-World/contents/notes/hello.txt",
                    "git": "https://api.github.com/repos/octocat/Hello-World/git/blobs/a56507ed892d05a37c6d6128c260937ea4d287bd",
                    "html": "https://github.com/octocat/Hello-World/blob/master/notes/hello.txt"
                  }
                },
                "commit": {
                  "sha": "18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
                  "node_id": "MDY6Q29tbWl0MThhNDNjZDhlMWUzYTc5Yzc4NmUzZDgwOGE3M2QyM2I2ZDIxMmIxNg==",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
                  "html_url": "https://github.com/octocat/Hello-World/git/commit/18a43cd8e1e3a79c786e3d808a73d23b6d212b16",
                  "author": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "committer": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "message": "my commit message",
                  "tree": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f",
                    "sha": "9a21f8e2018f42ffcf369b24d2cd20bc25c9e66f"
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/da5a433788da5c255edad7979b328b67d79f53f6",
                      "html_url": "https://github.com/octocat/Hello-World/git/commit/da5a433788da5c255edad7979b328b67d79f53f6",
                      "sha": "da5a433788da5c255edad7979b328b67d79f53f6"
                    }
                  ],
                  "verification": {
                    "verified": false,
                    "reason": "unsigned",
                    "signature": null,
                    "payload": null
                  }
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Creates a new file or replaces an existing file in a repository.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/contents/{path}",
        "title": "Delete a file",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>path parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The commit message.</p>",
            "name": "message",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The commit message.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The blob SHA of the file being replaced.</p>",
            "name": "sha",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The blob SHA of the file being replaced.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The branch name. Default: the repository’s default branch (usually <code>master</code>)</p>",
            "name": "branch",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The branch name. Default: the repository’s default branch (usually `master`)",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>object containing information about the committer.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p>The name of the author (or committer) of the commit</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p>The email of the author (or committer) of the commit</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author (or committer) of the commit",
                "childParamsGroups": []
              }
            },
            "name": "committer",
            "in": "body",
            "rawType": "object",
            "rawDescription": "object containing information about the committer.",
            "childParamsGroups": [
              {
                "parentName": "committer",
                "parentType": "object",
                "id": "committer-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The name of the author (or committer) of the commit</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The email of the author (or committer) of the commit</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author (or committer) of the commit",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "object",
            "description": "<p>object containing information about the author.</p>",
            "properties": {
              "name": {
                "type": "string",
                "description": "<p>The name of the author (or committer) of the commit</p>",
                "name": "name",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The name of the author (or committer) of the commit",
                "childParamsGroups": []
              },
              "email": {
                "type": "string",
                "description": "<p>The email of the author (or committer) of the commit</p>",
                "name": "email",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The email of the author (or committer) of the commit",
                "childParamsGroups": []
              }
            },
            "name": "author",
            "in": "body",
            "rawType": "object",
            "rawDescription": "object containing information about the author.",
            "childParamsGroups": [
              {
                "parentName": "author",
                "parentType": "object",
                "id": "author-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The name of the author (or committer) of the commit</p>",
                    "name": "name",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The name of the author (or committer) of the commit",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The email of the author (or committer) of the commit</p>",
                    "name": "email",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The email of the author (or committer) of the commit",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "message": "my commit message",
                "committer": {
                  "name": "Monalisa Octocat",
                  "email": "octocat@github.com"
                },
                "sha": "329688480d39049927147c162b9d2deaf885005f"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "path": "PATH"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content": null,
                "commit": {
                  "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
                  "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
                  "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
                  "html_url": "https://github.com/octocat/Hello-World/git/commit/7638417db6d59f3c431d3e1f261cc637155684cd",
                  "author": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "committer": {
                    "date": "2014-11-07T22:01:45Z",
                    "name": "Monalisa Octocat",
                    "email": "octocat@github.com"
                  },
                  "message": "my commit message",
                  "tree": {
                    "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
                    "sha": "691272480426f78a0138979dd3ce63b77f706feb"
                  },
                  "parents": [
                    {
                      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                      "html_url": "https://github.com/octocat/Hello-World/git/commit/1acc419d4d6a9ce985db7be48c6349a0475975b5",
                      "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
                    }
                  ],
                  "verification": {
                    "verified": false,
                    "reason": "unsigned",
                    "signature": null,
                    "payload": null
                  }
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a file in a repository.</p>\n<p>You can provide an additional <code>committer</code> parameter, which is an object containing information about the committer. Or, you can provide an <code>author</code> parameter, which is an object containing information about the author.</p>\n<p>The <code>author</code> section is optional and is filled in with the <code>committer</code> information if omitted. If the <code>committer</code> information is omitted, the authenticated user's information is used.</p>\n<p>You must provide values for both <code>name</code> and <code>email</code>, whether you choose to use <code>author</code> or <code>committer</code>. Otherwise, you'll receive a <code>422</code> status code.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "409",
            "description": "<p>Conflict</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/readme",
        "title": "Get a repository README",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The name of the commit/branch/tag. Default: the repository’s default branch (usually <code>master</code>)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "file",
                "encoding": "base64",
                "size": 5362,
                "name": "README.md",
                "path": "README.md",
                "content": "encoded content ...",
                "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
                "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
                "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
                "_links": {
                  "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                  "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                  "html": "https://github.com/octokit/octokit.rb/blob/master/README.md"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the preferred README for a repository.</p>\n<p>READMEs support <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types\">custom media types</a> for retrieving the raw content or rendered HTML.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/readme/{dir}",
        "title": "Get a repository README for a directory",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "dir",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-multi-segment": true,
            "descriptionHTML": "<p>The alternate path to look for a README file</p>"
          },
          {
            "name": "ref",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The name of the commit/branch/tag. Default: the repository’s default branch (usually <code>master</code>)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "dir": "DIR"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "file",
                "encoding": "base64",
                "size": 5362,
                "name": "README.md",
                "path": "README.md",
                "content": "encoded content ...",
                "sha": "3d21ec53a331a6f037a91c368710b99387d012c1",
                "url": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                "git_url": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                "html_url": "https://github.com/octokit/octokit.rb/blob/master/README.md",
                "download_url": "https://raw.githubusercontent.com/octokit/octokit.rb/master/README.md",
                "_links": {
                  "git": "https://api.github.com/repos/octokit/octokit.rb/git/blobs/3d21ec53a331a6f037a91c368710b99387d012c1",
                  "self": "https://api.github.com/repos/octokit/octokit.rb/contents/README.md",
                  "html": "https://github.com/octokit/octokit.rb/blob/master/README.md"
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets the README from a repository directory.</p>\n<p>READMEs support <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#custom-media-types\">custom media types</a> for retrieving the raw content or rendered HTML.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/tarball/{ref}",
        "title": "Download a repository archive (tar)",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "302",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a redirect URL to download a tar archive for a repository. If you omit <code>:ref</code>, the repository’s default branch (usually\n<code>master</code>) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe <code>Location</code> header to make a second <code>GET</code> request.\n<strong>Note</strong>: For private repositories, these links are temporary and expire after five minutes.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/zipball/{ref}",
        "title": "Download a repository archive (zip)",
        "category": "repos",
        "subcategory": "contents",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "ref",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "ref": "REF"
              }
            },
            "response": {
              "statusCode": "302",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a redirect URL to download a zip archive for a repository. If you omit <code>:ref</code>, the repository’s default branch (usually\n<code>master</code>) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use\nthe <code>Location</code> header to make a second <code>GET</code> request.\n<strong>Note</strong>: For private repositories, these links are temporary and expire after five minutes.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "302",
            "description": "<p>Found</p>"
          }
        ]
      }
    ],
    "forks": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/forks",
        "title": "List forks",
        "category": "repos",
        "subcategory": "forks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "newest",
                "oldest",
                "stargazers",
                "watchers"
              ],
              "default": "newest"
            },
            "descriptionHTML": "<p>The sort order. Can be either <code>newest</code>, <code>oldest</code>, or <code>stargazers</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": true,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "delete_branch_on_merge": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "spdx_id": "MIT",
                    "url": "https://api.github.com/licenses/mit",
                    "node_id": "MDc6TGljZW5zZW1pdA=="
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/forks",
        "title": "Create a fork",
        "category": "repos",
        "subcategory": "forks",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Optional parameter to specify the organization name if forking into an organization.</p>",
            "name": "organization",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Optional parameter to specify the organization name if forking into an organization.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "202",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://github.com/licenses/mit"
                },
                "forks_count": 9,
                "forks": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "watchers": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "open_issues": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "pull": true,
                  "push": false,
                  "admin": false
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "allow_forking": true,
                "subscribers_count": 42,
                "network_count": 0,
                "organization": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "parent": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                },
                "source": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": true,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "forks": 1,
                  "open_issues": 1,
                  "watchers": 1
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Create a fork for the authenticated user.</p>\n<p><strong>Note</strong>: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact <a href=\"https://support.github.com/contact?tags=dotcom-rest-api\">GitHub Enterprise Server Support</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "202",
            "description": "<p>Accepted</p>"
          },
          {
            "httpStatusCode": "400",
            "description": "<p>Bad Request</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      }
    ]
  },
  "search": {
    "search": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/code",
        "title": "Search code",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-code\">Searching code</a>\" for a detailed list of qualifiers.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "indexed"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query. Can only be <code>indexed</code>, which indicates how recently a file has been indexed by the GitHub Enterprise Server search infrastructure. Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 7,
                "incomplete_results": false,
                "items": [
                  {
                    "name": "classes.js",
                    "path": "src/attributes/classes.js",
                    "sha": "d7212f9dee2dcc18f084d7df8f417b80846ded5a",
                    "url": "https://api.github.com/repositories/167174/contents/src/attributes/classes.js?ref=825ac3773694e0cd23ee74895fd5aeb535b27da4",
                    "git_url": "https://api.github.com/repositories/167174/git/blobs/d7212f9dee2dcc18f084d7df8f417b80846ded5a",
                    "html_url": "https://github.com/jquery/jquery/blob/825ac3773694e0cd23ee74895fd5aeb535b27da4/src/attributes/classes.js",
                    "repository": {
                      "id": 167174,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxNjcxNzQ=",
                      "name": "jquery",
                      "full_name": "jquery/jquery",
                      "owner": {
                        "login": "jquery",
                        "id": 70142,
                        "node_id": "MDQ6VXNlcjcwMTQy",
                        "avatar_url": "https://0.gravatar.com/avatar/6906f317a4733f4379b06c32229ef02f?d=https%3A%2F%2Fidenticons.github.com%2Ff426f04f2f9813718fb806b30e0093de.png",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/jquery",
                        "html_url": "https://github.com/jquery",
                        "followers_url": "https://api.github.com/users/jquery/followers",
                        "following_url": "https://api.github.com/users/jquery/following{/other_user}",
                        "gists_url": "https://api.github.com/users/jquery/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/jquery/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/jquery/subscriptions",
                        "organizations_url": "https://api.github.com/users/jquery/orgs",
                        "repos_url": "https://api.github.com/users/jquery/repos",
                        "events_url": "https://api.github.com/users/jquery/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/jquery/received_events",
                        "type": "Organization",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/jquery/jquery",
                      "description": "jQuery JavaScript Library",
                      "fork": false,
                      "url": "https://api.github.com/repos/jquery/jquery",
                      "forks_url": "https://api.github.com/repos/jquery/jquery/forks",
                      "keys_url": "https://api.github.com/repos/jquery/jquery/keys{/key_id}",
                      "collaborators_url": "https://api.github.com/repos/jquery/jquery/collaborators{/collaborator}",
                      "teams_url": "https://api.github.com/repos/jquery/jquery/teams",
                      "hooks_url": "https://api.github.com/repos/jquery/jquery/hooks",
                      "issue_events_url": "https://api.github.com/repos/jquery/jquery/issues/events{/number}",
                      "events_url": "https://api.github.com/repos/jquery/jquery/events",
                      "assignees_url": "https://api.github.com/repos/jquery/jquery/assignees{/user}",
                      "branches_url": "https://api.github.com/repos/jquery/jquery/branches{/branch}",
                      "tags_url": "https://api.github.com/repos/jquery/jquery/tags",
                      "blobs_url": "https://api.github.com/repos/jquery/jquery/git/blobs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/jquery/jquery/git/tags{/sha}",
                      "git_refs_url": "https://api.github.com/repos/jquery/jquery/git/refs{/sha}",
                      "trees_url": "https://api.github.com/repos/jquery/jquery/git/trees{/sha}",
                      "statuses_url": "https://api.github.com/repos/jquery/jquery/statuses/{sha}",
                      "languages_url": "https://api.github.com/repos/jquery/jquery/languages",
                      "stargazers_url": "https://api.github.com/repos/jquery/jquery/stargazers",
                      "contributors_url": "https://api.github.com/repos/jquery/jquery/contributors",
                      "subscribers_url": "https://api.github.com/repos/jquery/jquery/subscribers",
                      "subscription_url": "https://api.github.com/repos/jquery/jquery/subscription",
                      "commits_url": "https://api.github.com/repos/jquery/jquery/commits{/sha}",
                      "git_commits_url": "https://api.github.com/repos/jquery/jquery/git/commits{/sha}",
                      "comments_url": "https://api.github.com/repos/jquery/jquery/comments{/number}",
                      "issue_comment_url": "https://api.github.com/repos/jquery/jquery/issues/comments/{number}",
                      "contents_url": "https://api.github.com/repos/jquery/jquery/contents/{+path}",
                      "compare_url": "https://api.github.com/repos/jquery/jquery/compare/{base}...{head}",
                      "merges_url": "https://api.github.com/repos/jquery/jquery/merges",
                      "archive_url": "https://api.github.com/repos/jquery/jquery/{archive_format}{/ref}",
                      "downloads_url": "https://api.github.com/repos/jquery/jquery/downloads",
                      "issues_url": "https://api.github.com/repos/jquery/jquery/issues{/number}",
                      "pulls_url": "https://api.github.com/repos/jquery/jquery/pulls{/number}",
                      "milestones_url": "https://api.github.com/repos/jquery/jquery/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/jquery/jquery/notifications{?since,all,participating}",
                      "labels_url": "https://api.github.com/repos/jquery/jquery/labels{/name}",
                      "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
                      "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
                    },
                    "score": 1
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Searches for query terms inside of a file. This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for code, you can get text match metadata for the file <strong>content</strong> and file <strong>path</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find the definition of the <code>addClass</code> function inside <a href=\"https://github.com/jquery/jquery\">jQuery</a> repository, your query would look something like this:</p>\n<p><code>q=addClass+in:file+language:js+repo:jquery/jquery</code></p>\n<p>This query searches for the keyword <code>addClass</code> within a file's contents. The query limits the search to files where the language is JavaScript in the <code>jquery/jquery</code> repository.</p>\n<h4 id=\"considerations-for-code-search\"><a aria-hidden=\"\" tabindex=\"-1\" class=\"doctocat-link\" href=\"#considerations-for-code-search\"><svg aria-hidden=\"\" role=\"img\" class=\"octicon-link\" viewBox=\"0 0 16 16\" width=\"16\" height=\"16\" fill=\"currentColor\" style=\"display:inline-block;user-select:none;vertical-align:middle\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a>Considerations for code search</h4>\n<p>Due to the complexity of searching code, there are a few restrictions on how searches are performed:</p>\n<ul>\n<li>Only the <em>default branch</em> is considered. In most cases, this will be the <code>master</code> branch.</li>\n<li>Only files smaller than 384 KB are searchable.</li>\n<li>You must always include at least one search term when searching source code. For example, searching for <a href=\"https://github.com/search?utf8=%E2%9C%93&#x26;q=language%3Ago&#x26;type=Code\"><code>language:go</code></a> is not valid, while <a href=\"https://github.com/search?utf8=%E2%9C%93&#x26;q=amazing+language%3Ago&#x26;type=Code\"><code>amazing language:go</code></a> is.</li>\n</ul>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/commits",
        "title": "Search commits",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-commits\">Searching commits</a>\" for a detailed list of qualifiers.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "author-date",
                "committer-date"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query by <code>author-date</code> or <code>committer-date</code>. Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 1,
                "incomplete_results": false,
                "items": [
                  {
                    "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                    "sha": "bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                    "html_url": "https://github.com/octocat/Spoon-Knife/commit/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                    "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f/comments",
                    "commit": {
                      "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits/bb4cc8d3b2e14b3af5df699876dd4ff3acd00b7f",
                      "author": {
                        "date": "2014-02-04T14:38:36-08:00",
                        "name": "The Octocat",
                        "email": "octocat@nowhere.com"
                      },
                      "committer": {
                        "date": "2014-02-12T15:18:55-08:00",
                        "name": "The Octocat",
                        "email": "octocat@nowhere.com"
                      },
                      "message": "Create styles.css and updated README",
                      "tree": {
                        "url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees/a639e96f9038797fba6e0469f94a4b0cc459fa68",
                        "sha": "a639e96f9038797fba6e0469f94a4b0cc459fa68"
                      },
                      "comment_count": 8
                    },
                    "author": {
                      "login": "octocat",
                      "id": 583231,
                      "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                      "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/octocat",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/octocat/received_events",
                      "type": "User",
                      "site_admin": false
                    },
                    "committer": {},
                    "parents": [
                      {
                        "url": "https://api.github.com/repos/octocat/Spoon-Knife/commits/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                        "html_url": "https://github.com/octocat/Spoon-Knife/commit/a30c19e3f13765a3b48829788bc1cb8b4e95cee4",
                        "sha": "a30c19e3f13765a3b48829788bc1cb8b4e95cee4"
                      }
                    ],
                    "repository": {
                      "id": 1300192,
                      "node_id": "MDEwOlJlcG9zaXRvcnkxMzAwMTky",
                      "name": "Spoon-Knife",
                      "full_name": "octocat/Spoon-Knife",
                      "owner": {
                        "login": "octocat",
                        "id": 583231,
                        "node_id": "MDQ6VXNlcjU4MzIzMQ==",
                        "avatar_url": "https://avatars.githubusercontent.com/u/583231?v=3",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "private": false,
                      "html_url": "https://github.com/octocat/Spoon-Knife",
                      "description": "This repo is for demonstration purposes only.",
                      "fork": false,
                      "url": "https://api.github.com/repos/octocat/Spoon-Knife",
                      "forks_url": "https://api.github.com/repos/octocat/Spoon-Knife/forks",
                      "keys_url": "https://api.github.com/repos/octocat/Spoon-Knife/keys{/key_id}",
                      "collaborators_url": "https://api.github.com/repos/octocat/Spoon-Knife/collaborators{/collaborator}",
                      "teams_url": "https://api.github.com/repos/octocat/Spoon-Knife/teams",
                      "hooks_url": "https://api.github.com/repos/octocat/Spoon-Knife/hooks",
                      "issue_events_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/events{/number}",
                      "events_url": "https://api.github.com/repos/octocat/Spoon-Knife/events",
                      "assignees_url": "https://api.github.com/repos/octocat/Spoon-Knife/assignees{/user}",
                      "branches_url": "https://api.github.com/repos/octocat/Spoon-Knife/branches{/branch}",
                      "tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/tags",
                      "blobs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/blobs{/sha}",
                      "git_tags_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/tags{/sha}",
                      "git_refs_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/refs{/sha}",
                      "trees_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/trees{/sha}",
                      "statuses_url": "https://api.github.com/repos/octocat/Spoon-Knife/statuses/{sha}",
                      "languages_url": "https://api.github.com/repos/octocat/Spoon-Knife/languages",
                      "stargazers_url": "https://api.github.com/repos/octocat/Spoon-Knife/stargazers",
                      "contributors_url": "https://api.github.com/repos/octocat/Spoon-Knife/contributors",
                      "subscribers_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscribers",
                      "subscription_url": "https://api.github.com/repos/octocat/Spoon-Knife/subscription",
                      "commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/commits{/sha}",
                      "git_commits_url": "https://api.github.com/repos/octocat/Spoon-Knife/git/commits{/sha}",
                      "comments_url": "https://api.github.com/repos/octocat/Spoon-Knife/comments{/number}",
                      "issue_comment_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues/comments{/number}",
                      "contents_url": "https://api.github.com/repos/octocat/Spoon-Knife/contents/{+path}",
                      "compare_url": "https://api.github.com/repos/octocat/Spoon-Knife/compare/{base}...{head}",
                      "merges_url": "https://api.github.com/repos/octocat/Spoon-Knife/merges",
                      "archive_url": "https://api.github.com/repos/octocat/Spoon-Knife/{archive_format}{/ref}",
                      "downloads_url": "https://api.github.com/repos/octocat/Spoon-Knife/downloads",
                      "issues_url": "https://api.github.com/repos/octocat/Spoon-Knife/issues{/number}",
                      "pulls_url": "https://api.github.com/repos/octocat/Spoon-Knife/pulls{/number}",
                      "milestones_url": "https://api.github.com/repos/octocat/Spoon-Knife/milestones{/number}",
                      "notifications_url": "https://api.github.com/repos/octocat/Spoon-Knife/notifications{?since,all,participating}",
                      "labels_url": "https://api.github.com/repos/octocat/Spoon-Knife/labels{/name}",
                      "releases_url": "https://api.github.com/repos/octocat/Spoon-Knife/releases{/id}",
                      "deployments_url": "https://api.github.com/repos/octocat/Spoon-Knife/deployments"
                    },
                    "score": 1,
                    "node_id": "MDQ6VXNlcjU4MzIzMQ=="
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "<p>Find commits via various criteria on the default branch (usually <code>master</code>). This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for commits, you can get text match metadata for the <strong>message</strong> field when you provide the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match\nmetadata</a>.</p>\n<p>For example, if you want to find commits related to CSS in the <a href=\"https://github.com/octocat/Spoon-Knife\">octocat/Spoon-Knife</a> repository. Your query would look something like this:</p>\n<p><code>q=repo:octocat/Spoon-Knife+css</code></p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "previews": [
          "<p>The Commit Search API is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2017-01-05-commit-search-api/\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.cloak-preview</code></pre>"
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/issues",
        "title": "Search issues and pull requests",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-issues-and-pull-requests\">Searching issues and pull requests</a>\" for a detailed list of qualifiers.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "comments",
                "reactions",
                "reactions-+1",
                "reactions--1",
                "reactions-smile",
                "reactions-thinking_face",
                "reactions-heart",
                "reactions-tada",
                "interactions",
                "created",
                "updated"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query by the number of <code>comments</code>, <code>reactions</code>, <code>reactions-+1</code>, <code>reactions--1</code>, <code>reactions-smile</code>, <code>reactions-thinking_face</code>, <code>reactions-heart</code>, <code>reactions-tada</code>, or <code>interactions</code>. You can also sort results by how recently the items were <code>created</code> or <code>updated</code>, Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 280,
                "incomplete_results": false,
                "items": [
                  {
                    "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132",
                    "repository_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit",
                    "labels_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/labels{/name}",
                    "comments_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/comments",
                    "events_url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/issues/132/events",
                    "html_url": "https://github.com/batterseapower/pinyin-toolkit/issues/132",
                    "id": 35802,
                    "node_id": "MDU6SXNzdWUzNTgwMg==",
                    "number": 132,
                    "title": "Line Number Indexes Beyond 20 Not Displayed",
                    "user": {
                      "login": "Nick3C",
                      "id": 90254,
                      "node_id": "MDQ6VXNlcjkwMjU0",
                      "avatar_url": "https://secure.gravatar.com/avatar/934442aadfe3b2f4630510de416c5718?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/Nick3C",
                      "html_url": "https://github.com/Nick3C",
                      "followers_url": "https://api.github.com/users/Nick3C/followers",
                      "following_url": "https://api.github.com/users/Nick3C/following{/other_user}",
                      "gists_url": "https://api.github.com/users/Nick3C/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/Nick3C/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/Nick3C/subscriptions",
                      "organizations_url": "https://api.github.com/users/Nick3C/orgs",
                      "repos_url": "https://api.github.com/users/Nick3C/repos",
                      "events_url": "https://api.github.com/users/Nick3C/events{/privacy}",
                      "received_events_url": "https://api.github.com/users/Nick3C/received_events",
                      "type": "User",
                      "site_admin": true
                    },
                    "labels": [
                      {
                        "id": 4,
                        "node_id": "MDU6TGFiZWw0",
                        "url": "https://api.github.com/repos/batterseapower/pinyin-toolkit/labels/bug",
                        "name": "bug",
                        "color": "ff0000"
                      }
                    ],
                    "state": "open",
                    "assignee": null,
                    "milestone": {
                      "url": "https://api.github.com/repos/octocat/Hello-World/milestones/1",
                      "html_url": "https://github.com/octocat/Hello-World/milestones/v1.0",
                      "labels_url": "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels",
                      "id": 1002604,
                      "node_id": "MDk6TWlsZXN0b25lMTAwMjYwNA==",
                      "number": 1,
                      "state": "open",
                      "title": "v1.0",
                      "description": "Tracking milestone for version 1.0",
                      "creator": {
                        "login": "octocat",
                        "id": 1,
                        "node_id": "MDQ6VXNlcjE=",
                        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                        "gravatar_id": "",
                        "url": "https://api.github.com/users/octocat",
                        "html_url": "https://github.com/octocat",
                        "followers_url": "https://api.github.com/users/octocat/followers",
                        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                        "organizations_url": "https://api.github.com/users/octocat/orgs",
                        "repos_url": "https://api.github.com/users/octocat/repos",
                        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                        "received_events_url": "https://api.github.com/users/octocat/received_events",
                        "type": "User",
                        "site_admin": false
                      },
                      "open_issues": 4,
                      "closed_issues": 8,
                      "created_at": "2011-04-10T20:09:31Z",
                      "updated_at": "2014-03-03T18:58:10Z",
                      "closed_at": "2013-02-12T13:22:01Z",
                      "due_on": "2012-10-09T23:39:01Z"
                    },
                    "comments": 15,
                    "created_at": "2009-07-12T20:10:41Z",
                    "updated_at": "2009-07-19T09:23:43Z",
                    "closed_at": null,
                    "pull_request": {
                      "url": "https://api/github.com/repos/octocat/Hello-World/pull/1347",
                      "html_url": "https://github.com/octocat/Hello-World/pull/1347",
                      "diff_url": "https://github.com/octocat/Hello-World/pull/1347.diff",
                      "patch_url": "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
                    },
                    "body": "...",
                    "score": 1,
                    "locked": true,
                    "author_association": "COLLABORATOR"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Find issues by state and keyword. This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for issues, you can get text match metadata for the issue <strong>title</strong>, issue <strong>body</strong>, and issue <strong>comment body</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted\nsearch results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.</p>\n<p><code>q=windows+label:bug+language:python+state:open&#x26;sort=created&#x26;order=asc</code></p>\n<p>This query searches for the keyword <code>windows</code>, within any open issue that is labeled as <code>bug</code>. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.</p>\n<p><strong>Note:</strong> For <a href=\"https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests\">user-to-server</a> GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the <code>is:issue</code> or <code>is:pull-request</code> qualifier will receive an HTTP <code>422 Unprocessable Entity</code> response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the <code>is</code> qualifier, see \"<a href=\"https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests\">Searching only issues or pull requests</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/labels",
        "title": "Search labels",
        "category": "search",
        "parameters": [
          {
            "name": "repository_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>The id of the repository.</p>"
          },
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "updated"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query by when the label was <code>created</code> or <code>updated</code>. Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 2,
                "incomplete_results": false,
                "items": [
                  {
                    "id": 418327088,
                    "node_id": "MDU6TGFiZWw0MTgzMjcwODg=",
                    "url": "https://api.github.com/repos/octocat/linguist/labels/enhancement",
                    "name": "enhancement",
                    "color": "84b6eb",
                    "default": true,
                    "description": "New feature or request.",
                    "score": 1
                  },
                  {
                    "id": 418327086,
                    "node_id": "MDU6TGFiZWw0MTgzMjcwODY=",
                    "url": "https://api.github.com/repos/octocat/linguist/labels/bug",
                    "name": "bug",
                    "color": "ee0701",
                    "default": true,
                    "description": "Something isn't working.",
                    "score": 1
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for labels, you can get text match metadata for the label <strong>name</strong> and <strong>description</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to find labels in the <code>linguist</code> repository that match <code>bug</code>, <code>defect</code>, or <code>enhancement</code>. Your query might look like this:</p>\n<p><code>q=bug+defect+enhancement&#x26;repository_id=64778136</code></p>\n<p>The labels that best match the query appear first in the search results.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/repositories",
        "title": "Search repositories",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://docs.github.com/articles/searching-for-repositories/\">Searching for repositories</a>\" for a detailed list of qualifiers.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "stars",
                "forks",
                "help-wanted-issues",
                "updated"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query by number of <code>stars</code>, <code>forks</code>, or <code>help-wanted-issues</code> or how recently the items were <code>updated</code>. Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 40,
                "incomplete_results": false,
                "items": [
                  {
                    "id": 3081286,
                    "node_id": "MDEwOlJlcG9zaXRvcnkzMDgxMjg2",
                    "name": "Tetris",
                    "full_name": "dtrupenn/Tetris",
                    "owner": {
                      "login": "dtrupenn",
                      "id": 872147,
                      "node_id": "MDQ6VXNlcjg3MjE0Nw==",
                      "avatar_url": "https://secure.gravatar.com/avatar/e7956084e75f239de85d3a31bc172ace?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                      "gravatar_id": "",
                      "url": "https://api.github.com/users/dtrupenn",
                      "received_events_url": "https://api.github.com/users/dtrupenn/received_events",
                      "type": "User",
                      "html_url": "https://github.com/octocat",
                      "followers_url": "https://api.github.com/users/octocat/followers",
                      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                      "organizations_url": "https://api.github.com/users/octocat/orgs",
                      "repos_url": "https://api.github.com/users/octocat/repos",
                      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                      "site_admin": true
                    },
                    "private": false,
                    "html_url": "https://github.com/dtrupenn/Tetris",
                    "description": "A C implementation of Tetris using Pennsim through LC4",
                    "fork": false,
                    "url": "https://api.github.com/repos/dtrupenn/Tetris",
                    "created_at": "2012-01-01T00:31:50Z",
                    "updated_at": "2013-01-05T17:58:47Z",
                    "pushed_at": "2012-01-01T00:37:02Z",
                    "homepage": "https://github.com",
                    "size": 524,
                    "stargazers_count": 1,
                    "watchers_count": 1,
                    "language": "Assembly",
                    "forks_count": 0,
                    "open_issues_count": 0,
                    "master_branch": "master",
                    "default_branch": "master",
                    "score": 1,
                    "archive_url": "https://api.github.com/repos/dtrupenn/Tetris/{archive_format}{/ref}",
                    "assignees_url": "https://api.github.com/repos/dtrupenn/Tetris/assignees{/user}",
                    "blobs_url": "https://api.github.com/repos/dtrupenn/Tetris/git/blobs{/sha}",
                    "branches_url": "https://api.github.com/repos/dtrupenn/Tetris/branches{/branch}",
                    "collaborators_url": "https://api.github.com/repos/dtrupenn/Tetris/collaborators{/collaborator}",
                    "comments_url": "https://api.github.com/repos/dtrupenn/Tetris/comments{/number}",
                    "commits_url": "https://api.github.com/repos/dtrupenn/Tetris/commits{/sha}",
                    "compare_url": "https://api.github.com/repos/dtrupenn/Tetris/compare/{base}...{head}",
                    "contents_url": "https://api.github.com/repos/dtrupenn/Tetris/contents/{+path}",
                    "contributors_url": "https://api.github.com/repos/dtrupenn/Tetris/contributors",
                    "deployments_url": "https://api.github.com/repos/dtrupenn/Tetris/deployments",
                    "downloads_url": "https://api.github.com/repos/dtrupenn/Tetris/downloads",
                    "events_url": "https://api.github.com/repos/dtrupenn/Tetris/events",
                    "forks_url": "https://api.github.com/repos/dtrupenn/Tetris/forks",
                    "git_commits_url": "https://api.github.com/repos/dtrupenn/Tetris/git/commits{/sha}",
                    "git_refs_url": "https://api.github.com/repos/dtrupenn/Tetris/git/refs{/sha}",
                    "git_tags_url": "https://api.github.com/repos/dtrupenn/Tetris/git/tags{/sha}",
                    "git_url": "git:github.com/dtrupenn/Tetris.git",
                    "issue_comment_url": "https://api.github.com/repos/dtrupenn/Tetris/issues/comments{/number}",
                    "issue_events_url": "https://api.github.com/repos/dtrupenn/Tetris/issues/events{/number}",
                    "issues_url": "https://api.github.com/repos/dtrupenn/Tetris/issues{/number}",
                    "keys_url": "https://api.github.com/repos/dtrupenn/Tetris/keys{/key_id}",
                    "labels_url": "https://api.github.com/repos/dtrupenn/Tetris/labels{/name}",
                    "languages_url": "https://api.github.com/repos/dtrupenn/Tetris/languages",
                    "merges_url": "https://api.github.com/repos/dtrupenn/Tetris/merges",
                    "milestones_url": "https://api.github.com/repos/dtrupenn/Tetris/milestones{/number}",
                    "notifications_url": "https://api.github.com/repos/dtrupenn/Tetris/notifications{?since,all,participating}",
                    "pulls_url": "https://api.github.com/repos/dtrupenn/Tetris/pulls{/number}",
                    "releases_url": "https://api.github.com/repos/dtrupenn/Tetris/releases{/id}",
                    "ssh_url": "git@github.com:dtrupenn/Tetris.git",
                    "stargazers_url": "https://api.github.com/repos/dtrupenn/Tetris/stargazers",
                    "statuses_url": "https://api.github.com/repos/dtrupenn/Tetris/statuses/{sha}",
                    "subscribers_url": "https://api.github.com/repos/dtrupenn/Tetris/subscribers",
                    "subscription_url": "https://api.github.com/repos/dtrupenn/Tetris/subscription",
                    "tags_url": "https://api.github.com/repos/dtrupenn/Tetris/tags",
                    "teams_url": "https://api.github.com/repos/dtrupenn/Tetris/teams",
                    "trees_url": "https://api.github.com/repos/dtrupenn/Tetris/git/trees{/sha}",
                    "clone_url": "https://github.com/dtrupenn/Tetris.git",
                    "mirror_url": "git:git.example.com/dtrupenn/Tetris",
                    "hooks_url": "https://api.github.com/repos/dtrupenn/Tetris/hooks",
                    "svn_url": "https://svn.github.com/dtrupenn/Tetris",
                    "forks": 1,
                    "open_issues": 1,
                    "watchers": 1,
                    "has_issues": true,
                    "has_projects": true,
                    "has_pages": true,
                    "has_wiki": true,
                    "has_downloads": true,
                    "archived": true,
                    "disabled": true,
                    "visibility": "private",
                    "license": {
                      "key": "mit",
                      "name": "MIT License",
                      "url": "https://api.github.com/licenses/mit",
                      "spdx_id": "MIT",
                      "node_id": "MDc6TGljZW5zZW1pdA==",
                      "html_url": "https://api.github.com/licenses/mit"
                    }
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "<p>Find repositories via various criteria. This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for repositories, you can get text match metadata for the <strong>name</strong> and <strong>description</strong> fields when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:</p>\n<p><code>q=tetris+language:assembly&#x26;sort=stars&#x26;order=desc</code></p>\n<p>This query searches for repositories with the word <code>tetris</code> in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.</p>\n<p>When you include the <code>mercy</code> preview header, you can also search for multiple topics by adding more <code>topic:</code> instances. For example, your query might look like this:</p>\n<p><code>q=topic:ruby+topic:rails</code></p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/topics",
        "title": "Search topics",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 6,
                "incomplete_results": false,
                "items": [
                  {
                    "name": "ruby",
                    "display_name": "Ruby",
                    "short_description": "Ruby is a scripting language designed for simplified object-oriented programming.",
                    "description": "Ruby was developed by Yukihiro \"Matz\" Matsumoto in 1995 with the intent of having an easily readable programming language. It is integrated with the Rails framework to create dynamic web-applications. Ruby's syntax is similar to that of Perl and Python.",
                    "created_by": "Yukihiro Matsumoto",
                    "released": "December 21, 1995",
                    "created_at": "2016-11-28T22:03:59Z",
                    "updated_at": "2017-10-30T18:16:32Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  },
                  {
                    "name": "rails",
                    "display_name": "Rails",
                    "short_description": "Ruby on Rails (Rails) is a web application framework written in Ruby.",
                    "description": "Ruby on Rails (Rails) is a web application framework written in Ruby. It is meant to help simplify the building of complex websites.",
                    "created_by": "David Heinemeier Hansson",
                    "released": "December 13 2005",
                    "created_at": "2016-12-09T17:03:50Z",
                    "updated_at": "2017-10-30T16:20:19Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  },
                  {
                    "name": "python",
                    "display_name": "Python",
                    "short_description": "Python is a dynamically typed programming language.",
                    "description": "Python is a dynamically typed programming language designed by Guido Van Rossum. Much like the programming language Ruby, Python was designed to be easily read by programmers. Because of its large following and many libraries, Python can be implemented and used to do anything from webpages to scientific research.",
                    "created_by": "Guido van Rossum",
                    "released": "February 20, 1991",
                    "created_at": "2016-12-07T00:07:02Z",
                    "updated_at": "2017-10-27T22:45:43Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  },
                  {
                    "name": "jekyll",
                    "display_name": "Jekyll",
                    "short_description": "Jekyll is a simple, blog-aware static site generator.",
                    "description": "Jekyll is a blog-aware, site generator written in Ruby. It takes raw text files, runs it through a renderer and produces a publishable static website.",
                    "created_by": "Tom Preston-Werner",
                    "released": "2008",
                    "created_at": "2016-12-16T21:53:08Z",
                    "updated_at": "2017-10-27T19:00:24Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  },
                  {
                    "name": "sass",
                    "display_name": "Sass",
                    "short_description": "Sass is a stable extension to classic CSS.",
                    "description": "Sass is a stylesheet language with a main implementation in Ruby. It is an extension of CSS that makes improvements to the old stylesheet format, such as being able to declare variables and using a cleaner nesting syntax.",
                    "created_by": "Hampton Catlin, Natalie Weizenbaum, Chris Eppstein",
                    "released": "November 28, 2006",
                    "created_at": "2016-12-16T21:53:45Z",
                    "updated_at": "2018-01-16T16:30:40Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  },
                  {
                    "name": "homebrew",
                    "display_name": "Homebrew",
                    "short_description": "Homebrew is a package manager for macOS.",
                    "description": "Homebrew is a package manager for Apple's macOS operating system. It simplifies the installation of software and is popular in the Ruby on Rails community.",
                    "created_by": "Max Howell",
                    "released": "2009",
                    "created_at": "2016-12-17T20:30:44Z",
                    "updated_at": "2018-02-06T16:14:56Z",
                    "featured": true,
                    "curated": true,
                    "score": 1
                  }
                ]
              }
            }
          }
        ],
        "descriptionHTML": "<p>Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>. See \"<a href=\"https://docs.github.com/articles/searching-topics/\">Searching topics</a>\" for a detailed list of qualifiers.</p>\n<p>When searching for topics, you can get text match metadata for the topic's <strong>short_description</strong>, <strong>description</strong>, <strong>name</strong>, or <strong>display_name</strong> field when you pass the <code>text-match</code> media type. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you want to search for topics related to Ruby that are featured on <a href=\"https://github.com/topics\">https://github.com/topics</a>. Your query might look like this:</p>\n<p><code>q=ruby+is:featured</code></p>\n<p>This query searches for topics with the keyword <code>ruby</code> and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "415",
            "description": "<p>Preview header missing</p>"
          }
        ],
        "previews": [
          "<p>The <code>topics</code> property for repositories on GitHub is currently available for developers to preview. To view the <code>topics</code> property in calls that return repository results, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.mercy-preview+json</code></pre>"
        ],
        "subcategory": "search"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/search/users",
        "title": "Search users",
        "category": "search",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub Enterprise Server. The REST API supports the same qualifiers as the web interface for GitHub Enterprise Server. To learn more about the format of the query, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#constructing-a-search-query\">Constructing a search query</a>. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/search-github/searching-on-github/searching-users\">Searching users</a>\" for a detailed list of qualifiers.</p>"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "followers",
                "repositories",
                "joined"
              ]
            },
            "descriptionHTML": "<p>Sorts the results of your query by number of <code>followers</code> or <code>repositories</code>, or when the person <code>joined</code> GitHub Enterprise Server. Default: <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#ranking-search-results\">best match</a></p>"
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>Determines whether the first search result returned is the highest number of matches (<code>desc</code>) or lowest number of matches (<code>asc</code>). This parameter is ignored unless you provide <code>sort</code>.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "total_count": 12,
                "incomplete_results": false,
                "items": [
                  {
                    "login": "mojombo",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://secure.gravatar.com/avatar/25c7c18223fb42a4c6ae1c8db6f50f9b?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/mojombo",
                    "html_url": "https://github.com/mojombo",
                    "followers_url": "https://api.github.com/users/mojombo/followers",
                    "subscriptions_url": "https://api.github.com/users/mojombo/subscriptions",
                    "organizations_url": "https://api.github.com/users/mojombo/orgs",
                    "repos_url": "https://api.github.com/users/mojombo/repos",
                    "received_events_url": "https://api.github.com/users/mojombo/received_events",
                    "type": "User",
                    "score": 1,
                    "following_url": "https://api.github.com/users/mojombo/following{/other_user}",
                    "gists_url": "https://api.github.com/users/mojombo/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/mojombo/starred{/owner}{/repo}",
                    "events_url": "https://api.github.com/users/mojombo/events{/privacy}",
                    "site_admin": true
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Find users via various criteria. This method returns up to 100 results <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#pagination\">per page</a>.</p>\n<p>When searching for users, you can get text match metadata for the issue <strong>login</strong>, <strong>email</strong>, and <strong>name</strong> fields when you pass the <code>text-match</code> media type. For more details about highlighting search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>. For more details about how to receive highlighted search results, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/search#text-match-metadata\">Text match metadata</a>.</p>\n<p>For example, if you're looking for a list of popular users, you might try this query:</p>\n<p><code>q=tom+repos:%3E42+followers:%3E1000</code></p>\n<p>This query searches for users with the name <code>tom</code>. The results are restricted to users with more than 42 repositories and over 1,000 followers.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "search"
      }
    ]
  },
  "secret-scanning": {
    "secret-scanning": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/secret-scanning/alerts",
        "title": "List secret scanning alerts for a repository",
        "category": "secret-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "open",
                "resolved"
              ]
            },
            "descriptionHTML": "<p>Set to <code>open</code> or <code>resolved</code> to only list secret scanning alerts in a specific state.</p>"
          },
          {
            "name": "secret_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A comma-separated list of secret types to return. By default all secret types are returned.\nSee \"<a href=\"https://docs.github.com/enterprise-server@3.1/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security\">Secret scanning patterns</a>\"\nfor a complete list of secret types (API slug).</p>"
          },
          {
            "name": "resolution",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>A comma-separated list of resolutions. Only secret scanning alerts with one of these resolutions are listed. Valid resolutions are <code>false_positive</code>, <code>wont_fix</code>, <code>revoked</code>, <code>pattern_edited</code>, <code>pattern_deleted</code> or <code>used_in_tests</code>.</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "number": 2,
                  "created_at": "2020-11-06T18:48:51Z",
                  "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/2",
                  "html_url": "https://github.com/owner/private-repo/security/secret-scanning/2",
                  "state": "resolved",
                  "resolution": "false_positive",
                  "resolved_at": "2020-11-07T02:47:13Z",
                  "resolved_by": {
                    "login": "monalisa",
                    "id": 2,
                    "node_id": "MDQ6VXNlcjI=",
                    "avatar_url": "https://alambic.github.com/avatars/u/2?",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/monalisa",
                    "html_url": "https://github.com/monalisa",
                    "followers_url": "https://api.github.com/users/monalisa/followers",
                    "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
                    "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
                    "organizations_url": "https://api.github.com/users/monalisa/orgs",
                    "repos_url": "https://api.github.com/users/monalisa/repos",
                    "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/monalisa/received_events",
                    "type": "User",
                    "site_admin": true
                  },
                  "secret_type": "adafruit_io_key",
                  "secret": "aio_XXXXXXXXXXXXXXXXXXXXXXXXXXXX"
                },
                {
                  "number": 1,
                  "created_at": "2020-11-06T18:18:30Z",
                  "url": "https://api.github.com/repos/owner/repo/secret-scanning/alerts/1",
                  "html_url": "https://github.com/owner/repo/security/secret-scanning/1",
                  "state": "open",
                  "resolution": null,
                  "resolved_at": null,
                  "resolved_by": null,
                  "secret_type": "mailchimp_api_key",
                  "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the <code>repo</code> scope or <code>security_events</code> scope.</p>\n<p>GitHub Apps must have the <code>secret_scanning_alerts</code> read permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Repository is public or secret scanning is disabled for the repository</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "secret-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "title": "Get a secret scanning alert",
        "category": "secret-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "alert_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The security alert number.",
              "readOnly": true
            },
            "descriptionHTML": "<p>The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the <code>number</code> field in the response from the <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code> operation.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "alert_number": "ALERT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "number": 42,
                "created_at": "2020-11-06T18:18:30Z",
                "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
                "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
                "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
                "state": "open",
                "secret_type": "mailchimp_api_key",
                "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the <code>repo</code> scope or <code>security_events</code> scope.</p>\n<p>GitHub Apps must have the <code>secret_scanning_alerts</code> read permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Repository is public, or secret scanning is disabled for the repository, or the resource is not found</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "secret-scanning"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
        "title": "Update a secret scanning alert",
        "category": "secret-scanning",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "alert_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The security alert number.",
              "readOnly": true
            },
            "descriptionHTML": "<p>The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the <code>number</code> field in the response from the <code>GET /repos/{owner}/{repo}/code-scanning/alerts</code> operation.</p>"
          }
        ],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Sets the state of the secret scanning alert. Can be either <code>open</code> or <code>resolved</code>. You must provide <code>resolution</code> when you set the state to <code>resolved</code>.</p>",
            "type": "string",
            "enum": [
              "open",
              "resolved"
            ],
            "name": "state",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.",
            "childParamsGroups": []
          },
          {
            "type": "string or null",
            "description": "<p><strong>Required when the <code>state</code> is <code>resolved</code>.</strong> The reason for resolving the alert. Can be one of <code>false_positive</code>, <code>wont_fix</code>, <code>revoked</code>, or <code>used_in_tests</code>.</p>",
            "enum": [
              null,
              "false_positive",
              "wont_fix",
              "revoked",
              "used_in_tests"
            ],
            "name": "resolution",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "**Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "state": "resolved",
                "resolution": "false_positive"
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "alert_number": "ALERT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "number": 42,
                "created_at": "2020-11-06T18:18:30Z",
                "url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42",
                "html_url": "https://github.com/owner/private-repo/security/secret-scanning/42",
                "locations_url": "https://api.github.com/repos/owner/private-repo/secret-scanning/alerts/42/locations",
                "state": "resolved",
                "resolution": "used_in_tests",
                "resolved_at": "2020-11-16T22:42:07Z",
                "resolved_by": {
                  "login": "monalisa",
                  "id": 2,
                  "node_id": "MDQ6VXNlcjI=",
                  "avatar_url": "https://alambic.github.com/avatars/u/2?",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/monalisa",
                  "html_url": "https://github.com/monalisa",
                  "followers_url": "https://api.github.com/users/monalisa/followers",
                  "following_url": "https://api.github.com/users/monalisa/following{/other_user}",
                  "gists_url": "https://api.github.com/users/monalisa/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/monalisa/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/monalisa/subscriptions",
                  "organizations_url": "https://api.github.com/users/monalisa/orgs",
                  "repos_url": "https://api.github.com/users/monalisa/repos",
                  "events_url": "https://api.github.com/users/monalisa/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/monalisa/received_events",
                  "type": "User",
                  "site_admin": true
                },
                "secret_type": "mailchimp_api_key",
                "secret": "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX-us2"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the <code>repo</code> scope or <code>security_events</code> scope.</p>\n<p>GitHub Apps must have the <code>secret_scanning_alerts</code> write permission to use this endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Repository is public, or secret scanning is disabled for the repository, or the resource is not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>State does not match the resolution</p>"
          },
          {
            "httpStatusCode": "503",
            "description": "<p>Service unavailable</p>"
          }
        ],
        "subcategory": "secret-scanning"
      }
    ]
  },
  "teams": {
    "teams": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams",
        "title": "List teams",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all teams in an organization that are visible to the authenticated user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/teams",
        "title": "Create a team",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the team.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the team.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the team.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>List GitHub IDs for organization members who will become team maintainers.</p>",
            "items": {
              "type": "string"
            },
            "name": "maintainers",
            "in": "body",
            "rawType": "array",
            "rawDescription": "List GitHub IDs for organization members who will become team maintainers.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.</p>",
            "items": {
              "type": "string"
            },
            "name": "repo_names",
            "in": "body",
            "rawType": "array",
            "rawDescription": "The full name (e.g., \"organization-name/repository-name\") of repositories to add the team to.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The level of privacy this team should have. The options are:<br>\n<strong>For a non-nested team:</strong><br>\n* <code>secret</code> - only visible to organization owners and members of this team.<br>\n* <code>closed</code> - visible to all members of this organization.<br>\nDefault: <code>secret</code><br>\n<strong>For a parent or child team:</strong><br>\n* <code>closed</code> - visible to all members of this organization.<br>\nDefault for child team: <code>closed</code></p>",
            "enum": [
              "secret",
              "closed"
            ],
            "name": "privacy",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The level of privacy this team should have. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \nDefault: `secret`  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.  \nDefault for child team: `closed`",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Deprecated</strong>. The permission that new repositories will be added to the team with when none is specified. Can be one of:<br>\n* <code>pull</code> - team members can pull, but not push to or administer newly-added repositories.<br>\n* <code>push</code> - team members can pull and push, but not administer newly-added repositories.</p>",
            "enum": [
              "pull",
              "push"
            ],
            "default": "pull",
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.",
            "childParamsGroups": []
          },
          {
            "type": "integer",
            "description": "<p>The ID of a team to set as the parent team.</p>",
            "name": "parent_team_id",
            "in": "body",
            "rawType": "integer",
            "rawDescription": "The ID of a team to set as the parent team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The <a href=\"https://www.ldap.com/ldap-dns-and-rdns\">distinguished name</a> (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team\">Update LDAP mapping for a team</a>\" endpoint to change the LDAP DN. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync\">Using LDAP</a>.\"</p>",
            "name": "ldap_dn",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The [distinguished name](https://www.ldap.com/ldap-dns-and-rdns) (DN) of the LDAP entry to map to a team. LDAP synchronization must be enabled to map LDAP entries to a team. Use the \"[Update LDAP mapping for a team](https://docs.github.com/enterprise-server@3.1/rest/reference/enterprise-admin#update-ldap-mapping-for-a-team)\" endpoint to change the LDAP DN. For more information, see \"[Using LDAP](https://docs.github.com/enterprise-server@3.1/admin/identity-and-access-management/authenticating-users-for-your-github-enterprise-server-instance/using-ldap#enabling-ldap-sync).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "Justice League",
                "description": "A great team",
                "permission": "push",
                "privacy": "closed"
              },
              "parameters": {
                "org": "ORG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>To create a team, the authenticated user must be a member or owner of <code>{org}</code>. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see \"<a href=\"https://docs.github.com/en/articles/setting-team-creation-permissions-in-your-organization\">Setting team creation permissions</a>.\"</p>\n<p>When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of <code>maintainers</code>. For more information, see \"<a href=\"https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams\">About teams</a>\".</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}",
        "title": "Get a team by name",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Gets a team using the team's <code>slug</code>. GitHub Enterprise Server generates the <code>slug</code> from the team <code>name</code>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/teams/{team_slug}",
        "title": "Update a team",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The name of the team.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the team.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The level of privacy this team should have. Editing teams without specifying this parameter leaves <code>privacy</code> intact. When a team is nested, the <code>privacy</code> for parent teams cannot be <code>secret</code>. The options are:<br>\n<strong>For a non-nested team:</strong><br>\n* <code>secret</code> - only visible to organization owners and members of this team.<br>\n* <code>closed</code> - visible to all members of this organization.<br>\n<strong>For a parent or child team:</strong><br>\n* <code>closed</code> - visible to all members of this organization.</p>",
            "enum": [
              "secret",
              "closed"
            ],
            "name": "privacy",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Deprecated</strong>. The permission that new repositories will be added to the team with when none is specified. Can be one of:<br>\n* <code>pull</code> - team members can pull, but not push to or administer newly-added repositories.<br>\n* <code>push</code> - team members can pull and push, but not administer newly-added repositories.<br>\n* <code>admin</code> - team members can pull, push and administer newly-added repositories.</p>",
            "enum": [
              "pull",
              "push",
              "admin"
            ],
            "default": "pull",
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
            "childParamsGroups": []
          },
          {
            "type": "integer or null",
            "description": "<p>The ID of a team to set as the parent team.</p>",
            "name": "parent_team_id",
            "in": "body",
            "rawType": [
              "integer",
              "null"
            ],
            "rawDescription": "The ID of a team to set as the parent team.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "new team name",
                "description": "new team description",
                "privacy": "closed"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>To edit a team, the authenticated user must either be an organization owner or a team maintainer.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PATCH /organizations/{org_id}/team/{team_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}",
        "title": "Delete a team",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>To delete a team, the authenticated user must be an organization owner or team maintainer.</p>\n<p>If you are an organization owner, deleting a parent team will delete all of its child teams as well.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/projects",
        "title": "List team projects",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "owner_url": "https://api.github.com/orgs/octocat",
                  "url": "https://api.github.com/projects/1002605",
                  "html_url": "https://github.com/orgs/api-playground/projects/1",
                  "columns_url": "https://api.github.com/projects/1002605/columns",
                  "id": 1002605,
                  "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                  "name": "Organization Roadmap",
                  "body": "High-level roadmap for the upcoming year.",
                  "number": 1,
                  "state": "open",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-11T20:09:31Z",
                  "updated_at": "2014-03-04T18:58:10Z",
                  "organization_permission": "write",
                  "private": false,
                  "permissions": {
                    "read": true,
                    "write": true,
                    "admin": false
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>Lists the organization projects for a team.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/projects</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "title": "Check team permissions for a project",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/orgs/octocat",
                "url": "https://api.github.com/projects/1002605",
                "html_url": "https://github.com/orgs/api-playground/projects/1",
                "columns_url": "https://api.github.com/projects/1002605/columns",
                "id": 1002605,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                "name": "Organization Roadmap",
                "body": "High-level roadmap for the upcoming year.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-11T20:09:31Z",
                "updated_at": "2014-03-04T18:58:10Z",
                "organization_permission": "write",
                "private": false,
                "permissions": {
                  "read": true,
                  "write": true,
                  "admin": false
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Checks whether a team has <code>read</code>, <code>write</code>, or <code>admin</code> permissions for an organization project. The response includes projects inherited from a parent team.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/projects/{project_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if project is not managed by this team</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "title": "Add or update team project permissions",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permission to grant to the team for this project. Can be one of:<br>\n* <code>read</code> - team members can read, but not write to or administer this project.<br>\n* <code>write</code> - team members can read and write, but not administer this project.<br>\n* <code>admin</code> - team members can read, write and administer this project.<br>\nDefault: the team's <code>permission</code> attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p>Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have <code>admin</code> permissions for the project. The project and team must be part of the same organization.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if the project is not owned by the organization</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/projects/{project_id}",
        "title": "Remove a project from a team",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have <code>read</code> access to both the team and project, or <code>admin</code> access to the team or project. This endpoint removes the project from the team, but does not delete the project.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/repos",
        "title": "List team repositories",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists a team's repositories visible to the authenticated user.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/repos</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "title": "Check team permissions for a repository",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "alternative-response-with-repository-permissions",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Alternative response with repository permissions",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "maintain": false,
                  "push": false,
                  "triage": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "pull": true,
                    "triage": false,
                    "push": false,
                    "maintain": false,
                    "admin": false
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Checks whether a team has <code>admin</code>, <code>push</code>, <code>maintain</code>, <code>triage</code>, or <code>pull</code> permission for a repository. Repositories inherited through a parent team will also be checked.</p>\n<p>You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> via the <code>application/vnd.github.v3.repository+json</code> accept header.</p>\n<p>If a team doesn't have permission for the repository, you will receive a <code>404 Not Found</code> response status.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Alternative response with repository permissions</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response if team has permission for the repository. This is the response when the repository media type hasn't been provded in the Accept header.</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if team does not have permission for the repository</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "title": "Add or update team repository permissions",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permission to grant the team on this repository. Can be one of:<br>\n* <code>pull</code> - team members can pull, but not push to or administer this repository.<br>\n* <code>push</code> - team members can pull and push, but not administer this repository.<br>\n* <code>admin</code> - team members can pull, push and administer this repository.<br>\n* <code>maintain</code> - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.<br>\n* <code>triage</code> - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  </p>\n<p>If no permission is specified, the team's <code>permission</code> attribute will be used to determine what permission to grant the team on this repository.</p>",
            "enum": [
              "pull",
              "push",
              "admin",
              "maintain",
              "triage"
            ],
            "default": "push",
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n\\* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.  \n\\* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a <code>422 Unprocessable Entity</code> status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}</code>.</p>\n<p>For more information about the permission levels, see \"<a href=\"https://docs.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization\">Repository permission levels for an organization</a>\".</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
        "title": "Remove a repository from a team",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/teams",
        "title": "List child teams",
        "category": "teams",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if child teams exist",
              "example": [
                {
                  "id": 2,
                  "node_id": "MDQ6VGVhbTI=",
                  "url": "https://api.github.com/teams/2",
                  "name": "Original Roster",
                  "slug": "original-roster",
                  "description": "Started it all.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/2/members{/member}",
                  "repositories_url": "https://api.github.com/teams/2/repos",
                  "parent": {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos"
                  },
                  "html_url": "https://github.com/orgs/rails/teams/core"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the child teams of the team specified by <code>{team_slug}</code>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/teams</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if child teams exist</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}",
        "title": "Get a team (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-team-by-name\">Get a team by name</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/teams/{team_id}",
        "title": "Update a team (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The name of the team.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The name of the team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The description of the team.</p>",
            "name": "description",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The description of the team.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The level of privacy this team should have. Editing teams without specifying this parameter leaves <code>privacy</code> intact. The options are:<br>\n<strong>For a non-nested team:</strong><br>\n* <code>secret</code> - only visible to organization owners and members of this team.<br>\n* <code>closed</code> - visible to all members of this organization.<br>\n<strong>For a parent or child team:</strong><br>\n* <code>closed</code> - visible to all members of this organization.</p>",
            "enum": [
              "secret",
              "closed"
            ],
            "name": "privacy",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:  \n**For a non-nested team:**  \n\\* `secret` - only visible to organization owners and members of this team.  \n\\* `closed` - visible to all members of this organization.  \n**For a parent or child team:**  \n\\* `closed` - visible to all members of this organization.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Deprecated</strong>. The permission that new repositories will be added to the team with when none is specified. Can be one of:<br>\n* <code>pull</code> - team members can pull, but not push to or administer newly-added repositories.<br>\n* <code>push</code> - team members can pull and push, but not administer newly-added repositories.<br>\n* <code>admin</code> - team members can pull, push and administer newly-added repositories.</p>",
            "enum": [
              "pull",
              "push",
              "admin"
            ],
            "default": "pull",
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "**Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer newly-added repositories.  \n\\* `push` - team members can pull and push, but not administer newly-added repositories.  \n\\* `admin` - team members can pull, push and administer newly-added repositories.",
            "childParamsGroups": []
          },
          {
            "type": "integer or null",
            "description": "<p>The ID of a team to set as the parent team.</p>",
            "name": "parent_team_id",
            "in": "body",
            "rawType": [
              "integer",
              "null"
            ],
            "rawDescription": "The ID of a team to set as the parent team.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "new team name",
                "description": "new team description",
                "privacy": "closed"
              },
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response when the updated information already exists",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          },
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "new team name",
                "description": "new team description",
                "privacy": "closed"
              },
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 1,
                "node_id": "MDQ6VGVhbTE=",
                "url": "https://api.github.com/teams/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league",
                "name": "Justice League",
                "slug": "justice-league",
                "description": "A great team.",
                "privacy": "closed",
                "permission": "admin",
                "members_url": "https://api.github.com/teams/1/members{/member}",
                "repositories_url": "https://api.github.com/teams/1/repos",
                "members_count": 3,
                "repos_count": 10,
                "created_at": "2017-07-14T16:53:42Z",
                "updated_at": "2017-08-17T12:37:15Z",
                "organization": {
                  "login": "github",
                  "id": 1,
                  "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                  "url": "https://api.github.com/orgs/github",
                  "repos_url": "https://api.github.com/orgs/github/repos",
                  "events_url": "https://api.github.com/orgs/github/events",
                  "hooks_url": "https://api.github.com/orgs/github/hooks",
                  "issues_url": "https://api.github.com/orgs/github/issues",
                  "members_url": "https://api.github.com/orgs/github/members{/member}",
                  "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "description": "A great organization",
                  "name": "github",
                  "company": "GitHub",
                  "blog": "https://github.com/blog",
                  "location": "San Francisco",
                  "email": "octocat@github.com",
                  "has_organization_projects": true,
                  "has_repository_projects": true,
                  "public_repos": 2,
                  "public_gists": 1,
                  "followers": 20,
                  "following": 0,
                  "html_url": "https://github.com/octocat",
                  "created_at": "2008-01-14T04:33:35Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "type": "Organization"
                },
                "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-team\">Update a team</a> endpoint.</p>\n<p>To edit a team, the authenticated user must either be an organization owner or a team maintainer.</p>\n<p><strong>Note:</strong> With nested teams, the <code>privacy</code> for parent teams cannot be <code>secret</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Response when the updated information already exists</p>"
          },
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}",
        "title": "Delete a team (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-team\">Delete a team</a> endpoint.</p>\n<p>To delete a team, the authenticated user must be an organization owner or team maintainer.</p>\n<p>If you are an organization owner, deleting a parent team will delete all of its child teams as well.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/projects",
        "title": "List team projects (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "owner_url": "https://api.github.com/orgs/octocat",
                  "url": "https://api.github.com/projects/1002605",
                  "html_url": "https://github.com/orgs/api-playground/projects/1",
                  "columns_url": "https://api.github.com/projects/1002605/columns",
                  "id": 1002605,
                  "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                  "name": "Organization Roadmap",
                  "body": "High-level roadmap for the upcoming year.",
                  "number": 1,
                  "state": "open",
                  "creator": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "created_at": "2011-04-11T20:09:31Z",
                  "updated_at": "2014-03-04T18:58:10Z",
                  "organization_permission": "write",
                  "private": false,
                  "permissions": {
                    "read": true,
                    "write": true,
                    "admin": false
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-projects\"><code>List team projects</code></a> endpoint.</p>\n<p>Lists the organization projects for a team.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/projects/{project_id}",
        "title": "Check team permissions for a project (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "owner_url": "https://api.github.com/orgs/octocat",
                "url": "https://api.github.com/projects/1002605",
                "html_url": "https://github.com/orgs/api-playground/projects/1",
                "columns_url": "https://api.github.com/projects/1002605/columns",
                "id": 1002605,
                "node_id": "MDc6UHJvamVjdDEwMDI2MDU=",
                "name": "Organization Roadmap",
                "body": "High-level roadmap for the upcoming year.",
                "number": 1,
                "state": "open",
                "creator": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "created_at": "2011-04-11T20:09:31Z",
                "updated_at": "2014-03-04T18:58:10Z",
                "organization_permission": "write",
                "private": false,
                "permissions": {
                  "read": true,
                  "write": true,
                  "admin": false
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-project\">Check team permissions for a project</a> endpoint.</p>\n<p>Checks whether a team has <code>read</code>, <code>write</code>, or <code>admin</code> permissions for an organization project. The response includes projects inherited from a parent team.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if project is not managed by this team</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/teams/{team_id}/projects/{project_id}",
        "title": "Add or update team project permissions (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permission to grant to the team for this project. Can be one of:<br>\n* <code>read</code> - team members can read, but not write to or administer this project.<br>\n* <code>write</code> - team members can read and write, but not administer this project.<br>\n* <code>admin</code> - team members can read, write and administer this project.<br>\nDefault: the team's <code>permission</code> attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
            "enum": [
              "read",
              "write",
              "admin"
            ],
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant to the team for this project. Can be one of:  \n\\* `read` - team members can read, but not write to or administer this project.  \n\\* `write` - team members can read and write, but not administer this project.  \n\\* `admin` - team members can read, write and administer this project.  \nDefault: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see \"[HTTP verbs](https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs).\"",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-project-permissions\">Add or update team project permissions</a> endpoint.</p>\n<p>Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have <code>admin</code> permissions for the project. The project and team must be part of the same organization.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if the project is not owned by the organization</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "previews": [
          "<p>The Projects API is currently available for developers to preview. During the preview period, the API may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-10-27-changes-to-projects-api\">blog post</a> for full details. To access the API during the preview period, you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.inertia-preview+json</code></pre>"
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/projects/{project_id}",
        "title": "Remove a project from a team (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "project_id": "PROJECT_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-a-project-from-a-team\">Remove a project from a team</a> endpoint.</p>\n<p>Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have <code>read</code> access to both the team and project, or <code>admin</code> access to the team or project. <strong>Note:</strong> This endpoint removes the project from the team, but does not delete it.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/repos",
        "title": "List team repositories (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World",
                  "full_name": "octocat/Hello-World",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World",
                  "homepage": "https://github.com",
                  "language": null,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues_count": 0,
                  "is_template": false,
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "admin": false,
                    "push": false,
                    "pull": true
                  },
                  "template_repository": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-repositories\">List team repositories</a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/repos/{owner}/{repo}",
        "title": "Check team permissions for a repository (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "alternative-response-with-extra-repository-information",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Alternative response with extra repository information",
              "example": {
                "id": 1296269,
                "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                "name": "Hello-World",
                "full_name": "octocat/Hello-World",
                "owner": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/octocat/Hello-World",
                "description": "This your first repo!",
                "fork": false,
                "url": "https://api.github.com/repos/octocat/Hello-World",
                "archive_url": "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
                "assignees_url": "https://api.github.com/repos/octocat/Hello-World/assignees{/user}",
                "blobs_url": "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
                "branches_url": "https://api.github.com/repos/octocat/Hello-World/branches{/branch}",
                "collaborators_url": "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
                "comments_url": "https://api.github.com/repos/octocat/Hello-World/comments{/number}",
                "commits_url": "https://api.github.com/repos/octocat/Hello-World/commits{/sha}",
                "compare_url": "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
                "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/{+path}",
                "contributors_url": "https://api.github.com/repos/octocat/Hello-World/contributors",
                "deployments_url": "https://api.github.com/repos/octocat/Hello-World/deployments",
                "downloads_url": "https://api.github.com/repos/octocat/Hello-World/downloads",
                "events_url": "https://api.github.com/repos/octocat/Hello-World/events",
                "forks_url": "https://api.github.com/repos/octocat/Hello-World/forks",
                "git_commits_url": "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
                "git_refs_url": "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
                "git_tags_url": "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
                "git_url": "git:github.com/octocat/Hello-World.git",
                "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
                "issue_events_url": "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
                "issues_url": "https://api.github.com/repos/octocat/Hello-World/issues{/number}",
                "keys_url": "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
                "labels_url": "https://api.github.com/repos/octocat/Hello-World/labels{/name}",
                "languages_url": "https://api.github.com/repos/octocat/Hello-World/languages",
                "merges_url": "https://api.github.com/repos/octocat/Hello-World/merges",
                "milestones_url": "https://api.github.com/repos/octocat/Hello-World/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}",
                "pulls_url": "https://api.github.com/repos/octocat/Hello-World/pulls{/number}",
                "releases_url": "https://api.github.com/repos/octocat/Hello-World/releases{/id}",
                "ssh_url": "git@github.com:octocat/Hello-World.git",
                "stargazers_url": "https://api.github.com/repos/octocat/Hello-World/stargazers",
                "statuses_url": "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
                "subscribers_url": "https://api.github.com/repos/octocat/Hello-World/subscribers",
                "subscription_url": "https://api.github.com/repos/octocat/Hello-World/subscription",
                "tags_url": "https://api.github.com/repos/octocat/Hello-World/tags",
                "teams_url": "https://api.github.com/repos/octocat/Hello-World/teams",
                "trees_url": "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
                "clone_url": "https://github.com/octocat/Hello-World.git",
                "mirror_url": "git:git.example.com/octocat/Hello-World",
                "hooks_url": "https://api.github.com/repos/octocat/Hello-World/hooks",
                "svn_url": "https://svn.github.com/octocat/Hello-World",
                "homepage": "https://github.com",
                "forks_count": 9,
                "stargazers_count": 80,
                "watchers_count": 80,
                "size": 108,
                "default_branch": "master",
                "open_issues_count": 0,
                "is_template": false,
                "topics": [
                  "octocat",
                  "atom",
                  "electron",
                  "api"
                ],
                "has_issues": true,
                "has_projects": true,
                "has_wiki": true,
                "has_pages": false,
                "has_downloads": true,
                "archived": false,
                "disabled": false,
                "visibility": "public",
                "pushed_at": "2011-01-26T19:06:43Z",
                "created_at": "2011-01-26T19:01:12Z",
                "updated_at": "2011-01-26T19:14:43Z",
                "permissions": {
                  "admin": false,
                  "maintain": false,
                  "push": false,
                  "triage": false,
                  "pull": true
                },
                "allow_rebase_merge": true,
                "template_repository": {
                  "id": 1296269,
                  "node_id": "MDEwOlJlcG9zaXRvcnkxMjk2MjY5",
                  "name": "Hello-World-Template",
                  "full_name": "octocat/Hello-World-Template",
                  "owner": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "private": false,
                  "html_url": "https://github.com/octocat/Hello-World-Template",
                  "description": "This your first repo!",
                  "fork": false,
                  "url": "https://api.github.com/repos/octocat/Hello-World-Template",
                  "archive_url": "https://api.github.com/repos/octocat/Hello-World-Template/{archive_format}{/ref}",
                  "assignees_url": "https://api.github.com/repos/octocat/Hello-World-Template/assignees{/user}",
                  "blobs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/blobs{/sha}",
                  "branches_url": "https://api.github.com/repos/octocat/Hello-World-Template/branches{/branch}",
                  "collaborators_url": "https://api.github.com/repos/octocat/Hello-World-Template/collaborators{/collaborator}",
                  "comments_url": "https://api.github.com/repos/octocat/Hello-World-Template/comments{/number}",
                  "commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/commits{/sha}",
                  "compare_url": "https://api.github.com/repos/octocat/Hello-World-Template/compare/{base}...{head}",
                  "contents_url": "https://api.github.com/repos/octocat/Hello-World-Template/contents/{+path}",
                  "contributors_url": "https://api.github.com/repos/octocat/Hello-World-Template/contributors",
                  "deployments_url": "https://api.github.com/repos/octocat/Hello-World-Template/deployments",
                  "downloads_url": "https://api.github.com/repos/octocat/Hello-World-Template/downloads",
                  "events_url": "https://api.github.com/repos/octocat/Hello-World-Template/events",
                  "forks_url": "https://api.github.com/repos/octocat/Hello-World-Template/forks",
                  "git_commits_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/commits{/sha}",
                  "git_refs_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/refs{/sha}",
                  "git_tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/tags{/sha}",
                  "git_url": "git:github.com/octocat/Hello-World-Template.git",
                  "issue_comment_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/comments{/number}",
                  "issue_events_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues/events{/number}",
                  "issues_url": "https://api.github.com/repos/octocat/Hello-World-Template/issues{/number}",
                  "keys_url": "https://api.github.com/repos/octocat/Hello-World-Template/keys{/key_id}",
                  "labels_url": "https://api.github.com/repos/octocat/Hello-World-Template/labels{/name}",
                  "languages_url": "https://api.github.com/repos/octocat/Hello-World-Template/languages",
                  "merges_url": "https://api.github.com/repos/octocat/Hello-World-Template/merges",
                  "milestones_url": "https://api.github.com/repos/octocat/Hello-World-Template/milestones{/number}",
                  "notifications_url": "https://api.github.com/repos/octocat/Hello-World-Template/notifications{?since,all,participating}",
                  "pulls_url": "https://api.github.com/repos/octocat/Hello-World-Template/pulls{/number}",
                  "releases_url": "https://api.github.com/repos/octocat/Hello-World-Template/releases{/id}",
                  "ssh_url": "git@github.com:octocat/Hello-World-Template.git",
                  "stargazers_url": "https://api.github.com/repos/octocat/Hello-World-Template/stargazers",
                  "statuses_url": "https://api.github.com/repos/octocat/Hello-World-Template/statuses/{sha}",
                  "subscribers_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscribers",
                  "subscription_url": "https://api.github.com/repos/octocat/Hello-World-Template/subscription",
                  "tags_url": "https://api.github.com/repos/octocat/Hello-World-Template/tags",
                  "teams_url": "https://api.github.com/repos/octocat/Hello-World-Template/teams",
                  "trees_url": "https://api.github.com/repos/octocat/Hello-World-Template/git/trees{/sha}",
                  "clone_url": "https://github.com/octocat/Hello-World-Template.git",
                  "mirror_url": "git:git.example.com/octocat/Hello-World-Template",
                  "hooks_url": "https://api.github.com/repos/octocat/Hello-World-Template/hooks",
                  "svn_url": "https://svn.github.com/octocat/Hello-World-Template",
                  "homepage": "https://github.com",
                  "forks": 9,
                  "forks_count": 9,
                  "stargazers_count": 80,
                  "watchers_count": 80,
                  "watchers": 80,
                  "size": 108,
                  "default_branch": "master",
                  "open_issues": 0,
                  "open_issues_count": 0,
                  "is_template": true,
                  "license": {
                    "key": "mit",
                    "name": "MIT License",
                    "url": "https://api.github.com/licenses/mit",
                    "spdx_id": "MIT",
                    "node_id": "MDc6TGljZW5zZW1pdA==",
                    "html_url": "https://api.github.com/licenses/mit"
                  },
                  "topics": [
                    "octocat",
                    "atom",
                    "electron",
                    "api"
                  ],
                  "has_issues": true,
                  "has_projects": true,
                  "has_wiki": true,
                  "has_pages": false,
                  "has_downloads": true,
                  "archived": false,
                  "disabled": false,
                  "visibility": "public",
                  "pushed_at": "2011-01-26T19:06:43Z",
                  "created_at": "2011-01-26T19:01:12Z",
                  "updated_at": "2011-01-26T19:14:43Z",
                  "permissions": {
                    "pull": true,
                    "triage": false,
                    "push": false,
                    "maintain": false,
                    "admin": false
                  },
                  "allow_rebase_merge": true,
                  "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                  "allow_squash_merge": true,
                  "delete_branch_on_merge": true,
                  "allow_merge_commit": true,
                  "subscribers_count": 42,
                  "network_count": 0
                },
                "temp_clone_token": "ABTLWHOULUVAXGTRYU7OC2876QJ2O",
                "allow_squash_merge": true,
                "delete_branch_on_merge": true,
                "allow_merge_commit": true,
                "subscribers_count": 42,
                "network_count": 0,
                "license": {
                  "key": "mit",
                  "name": "MIT License",
                  "url": "https://api.github.com/licenses/mit",
                  "spdx_id": "MIT",
                  "node_id": "MDc6TGljZW5zZW1pdA==",
                  "html_url": "https://api.github.com/licenses/mit"
                },
                "forks": 1,
                "open_issues": 1,
                "watchers": 1
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note</strong>: Repositories inherited through a parent team will also be checked.</p>\n<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#check-team-permissions-for-a-repository\">Check team permissions for a repository</a> endpoint.</p>\n<p>You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types/\">media type</a> via the <code>Accept</code> header:</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>Alternative response with extra repository information</p>"
          },
          {
            "httpStatusCode": "204",
            "description": "<p>Response if repository is managed by this team</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if repository is not managed by this team</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/teams/{team_id}/repos/{owner}/{repo}",
        "title": "Add or update team repository permissions (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The permission to grant the team on this repository. Can be one of:<br>\n* <code>pull</code> - team members can pull, but not push to or administer this repository.<br>\n* <code>push</code> - team members can pull and push, but not administer this repository.<br>\n* <code>admin</code> - team members can pull, push and administer this repository.  </p>\n<p>If no permission is specified, the team's <code>permission</code> attribute will be used to determine what permission to grant the team on this repository.</p>",
            "enum": [
              "pull",
              "push",
              "admin"
            ],
            "name": "permission",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The permission to grant the team on this repository. Can be one of:  \n\\* `pull` - team members can pull, but not push to or administer this repository.  \n\\* `push` - team members can pull and push, but not administer this repository.  \n\\* `admin` - team members can pull, push and administer this repository.  \n  \nIf no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-repository-permissions\">Add or update team repository permissions</a>\" endpoint.</p>\n<p>To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a <code>422 Unprocessable Entity</code> status if you attempt to add a repository to a team that is not owned by the organization.</p>\n<p>Note that, if you choose not to pass any parameters, you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/repos/{owner}/{repo}",
        "title": "Remove a repository from a team (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-a-repository-from-a-team\">Remove a repository from a team</a> endpoint.</p>\n<p>If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/teams",
        "title": "List child teams (Legacy)",
        "category": "teams",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "if child teams exist",
              "example": [
                {
                  "id": 2,
                  "node_id": "MDQ6VGVhbTI=",
                  "url": "https://api.github.com/teams/2",
                  "name": "Original Roster",
                  "slug": "original-roster",
                  "description": "Started it all.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/2/members{/member}",
                  "repositories_url": "https://api.github.com/teams/2/repos",
                  "parent": {
                    "id": 1,
                    "node_id": "MDQ6VGVhbTE=",
                    "url": "https://api.github.com/teams/1",
                    "html_url": "https://github.com/orgs/github/teams/justice-league",
                    "name": "Justice League",
                    "slug": "justice-league",
                    "description": "A great team.",
                    "privacy": "closed",
                    "permission": "admin",
                    "members_url": "https://api.github.com/teams/1/members{/member}",
                    "repositories_url": "https://api.github.com/teams/1/repos"
                  },
                  "html_url": "https://github.com/orgs/rails/teams/core"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-child-teams\"><code>List child teams</code></a> endpoint.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>if child teams exist</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "teams"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/teams",
        "title": "List teams for the authenticated user",
        "category": "teams",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "node_id": "MDQ6VGVhbTE=",
                  "url": "https://api.github.com/teams/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league",
                  "name": "Justice League",
                  "slug": "justice-league",
                  "description": "A great team.",
                  "privacy": "closed",
                  "permission": "admin",
                  "members_url": "https://api.github.com/teams/1/members{/member}",
                  "repositories_url": "https://api.github.com/teams/1/repos",
                  "parent": null,
                  "members_count": 3,
                  "repos_count": 10,
                  "created_at": "2017-07-14T16:53:42Z",
                  "updated_at": "2017-08-17T12:37:15Z",
                  "organization": {
                    "login": "github",
                    "id": 1,
                    "node_id": "MDEyOk9yZ2FuaXphdGlvbjE=",
                    "url": "https://api.github.com/orgs/github",
                    "repos_url": "https://api.github.com/orgs/github/repos",
                    "events_url": "https://api.github.com/orgs/github/events",
                    "hooks_url": "https://api.github.com/orgs/github/hooks",
                    "issues_url": "https://api.github.com/orgs/github/issues",
                    "members_url": "https://api.github.com/orgs/github/members{/member}",
                    "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "description": "A great organization",
                    "name": "github",
                    "company": "GitHub",
                    "blog": "https://github.com/blog",
                    "location": "San Francisco",
                    "email": "octocat@github.com",
                    "has_organization_projects": true,
                    "has_repository_projects": true,
                    "public_repos": 2,
                    "public_gists": 1,
                    "followers": 20,
                    "following": 0,
                    "html_url": "https://github.com/octocat",
                    "created_at": "2008-01-14T04:33:35Z",
                    "type": "Organization"
                  },
                  "ldap_dn": "uid=asdf,ou=users,dc=github,dc=com"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>List all of the teams across all of the organizations to which the authenticated user belongs. This method requires <code>user</code>, <code>repo</code>, or <code>read:org</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a> when authenticating via <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/\">OAuth</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "teams"
      }
    ],
    "discussion-comments": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "title": "List discussion comments",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Do you like apples?",
                  "body_html": "<p>Do you like apples?</p>",
                  "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                  "created_at": "2018-01-15T23:53:58Z",
                  "last_edited_at": null,
                  "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                  "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                  "number": 1,
                  "updated_at": "2018-01-15T23:53:58Z",
                  "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                  "reactions": {
                    "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                    "total_count": 5,
                    "+1": 3,
                    "-1": 1,
                    "laugh": 0,
                    "confused": 0,
                    "heart": 1,
                    "hooray": 0,
                    "eyes": 1,
                    "rocket": 1
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List all comments on a team discussion. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "title": "Create a discussion comment",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion comment's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion comment's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Do you like apples?"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like apples?",
                "body_html": "<p>Do you like apples?</p>",
                "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": null,
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-15T23:53:58Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a new comment on a team discussion. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Get a discussion comment",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like apples?",
                "body_html": "<p>Do you like apples?</p>",
                "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": null,
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-15T23:53:58Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Get a specific comment on a team discussion. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Update a discussion comment",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion comment's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion comment's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Do you like pineapples?"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like pineapples?",
                "body_html": "<p>Do you like pineapples?</p>",
                "body_version": "e6907b24d9c93cc0c5024a7af5888116",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": "2018-01-26T18:22:20Z",
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-26T18:22:20Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Edits the body text of a discussion comment. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Delete a discussion comment",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Deletes a comment on a team discussion. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments",
        "title": "List discussion comments (Legacy)",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Do you like apples?",
                  "body_html": "<p>Do you like apples?</p>",
                  "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                  "created_at": "2018-01-15T23:53:58Z",
                  "last_edited_at": null,
                  "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                  "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                  "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                  "number": 1,
                  "updated_at": "2018-01-15T23:53:58Z",
                  "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                  "reactions": {
                    "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                    "total_count": 5,
                    "+1": 3,
                    "-1": 1,
                    "laugh": 0,
                    "confused": 0,
                    "heart": 1,
                    "hooray": 0,
                    "eyes": 1,
                    "rocket": 1
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussion-comments\">List discussion comments</a> endpoint.</p>\n<p>List all comments on a team discussion. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments",
        "title": "Create a discussion comment (Legacy)",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion comment's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion comment's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Do you like apples?"
              },
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like apples?",
                "body_html": "<p>Do you like apples?</p>",
                "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": null,
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-15T23:53:58Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-discussion-comment\">Create a discussion comment</a> endpoint.</p>\n<p>Creates a new comment on a team discussion. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Get a discussion comment (Legacy)",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like apples?",
                "body_html": "<p>Do you like apples?</p>",
                "body_version": "5eb32b219cdc6a5a9b29ba5d6caa9c51",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": null,
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-15T23:53:58Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion-comment\">Get a discussion comment</a> endpoint.</p>\n<p>Get a specific comment on a team discussion. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Update a discussion comment (Legacy)",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion comment's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion comment's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "body": "Do you like pineapples?"
              },
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Do you like pineapples?",
                "body_html": "<p>Do you like pineapples?</p>",
                "body_version": "e6907b24d9c93cc0c5024a7af5888116",
                "created_at": "2018-01-15T23:53:58Z",
                "last_edited_at": "2018-01-26T18:22:20Z",
                "discussion_url": "https://api.github.com/teams/2403582/discussions/1",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1",
                "node_id": "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE=",
                "number": 1,
                "updated_at": "2018-01-26T18:22:20Z",
                "url": "https://api.github.com/teams/2403582/discussions/1/comments/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2403582/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-discussion-comment\">Update a discussion comment</a> endpoint.</p>\n<p>Edits the body text of a discussion comment. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}",
        "title": "Delete a discussion comment (Legacy)",
        "category": "teams",
        "subcategory": "discussion-comments",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "comment_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER",
                "comment_number": "COMMENT_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-discussion-comment\">Delete a discussion comment</a> endpoint.</p>\n<p>Deletes a comment on a team discussion. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "discussions": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions",
        "title": "List discussions",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          },
          {
            "name": "pinned",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Pinned discussions only filter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Hi! This is an area for us to collaborate as a team.",
                  "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                  "body_version": "0d495416a700fb06133c612575d92bfb",
                  "comments_count": 0,
                  "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                  "created_at": "2018-01-25T18:56:31Z",
                  "last_edited_at": null,
                  "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                  "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                  "number": 1,
                  "pinned": false,
                  "private": false,
                  "team_url": "https://api.github.com/teams/2343027",
                  "title": "Our first team post",
                  "updated_at": "2018-01-25T18:56:31Z",
                  "url": "https://api.github.com/teams/2343027/discussions/1",
                  "reactions": {
                    "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                    "total_count": 5,
                    "+1": 3,
                    "-1": 1,
                    "laugh": 0,
                    "confused": 0,
                    "heart": 1,
                    "hooray": 0,
                    "eyes": 1,
                    "rocket": 1
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p>List all discussions on a team's page. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/discussions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions",
        "title": "Create a discussion",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion post's title.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's title.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion post's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's body text.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to <code>true</code> to create a private post.</p>",
            "default": false,
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Our first team post",
                "body": "Hi! This is an area for us to collaborate as a team."
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 0,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": null,
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Our first team post",
                "updated_at": "2018-01-25T18:56:31Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Creates a new discussion post on a team's page. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>POST /organizations/{org_id}/team/{team_id}/discussions</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "title": "Get a discussion",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 0,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": null,
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Our first team post",
                "updated_at": "2018-01-25T18:56:31Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Get a specific discussion on a team's page. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "title": "Update a discussion",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The discussion post's title.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's title.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The discussion post's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Welcome to our first team post"
              },
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 1,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": "2018-01-26T18:22:20Z",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Welcome to our first team post",
                "updated_at": "2018-01-26T18:22:20Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p>Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
        "title": "Delete a discussion",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Delete a discussion from a team's page. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions",
        "title": "List discussions (Legacy)",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "default": "desc"
            },
            "descriptionHTML": "<p>One of <code>asc</code> (ascending) or <code>desc</code> (descending).</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "author": {
                    "login": "octocat",
                    "id": 1,
                    "node_id": "MDQ6VXNlcjE=",
                    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                    "gravatar_id": "",
                    "url": "https://api.github.com/users/octocat",
                    "html_url": "https://github.com/octocat",
                    "followers_url": "https://api.github.com/users/octocat/followers",
                    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                    "organizations_url": "https://api.github.com/users/octocat/orgs",
                    "repos_url": "https://api.github.com/users/octocat/repos",
                    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                    "received_events_url": "https://api.github.com/users/octocat/received_events",
                    "type": "User",
                    "site_admin": false
                  },
                  "body": "Hi! This is an area for us to collaborate as a team.",
                  "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                  "body_version": "0d495416a700fb06133c612575d92bfb",
                  "comments_count": 0,
                  "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                  "created_at": "2018-01-25T18:56:31Z",
                  "last_edited_at": null,
                  "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                  "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                  "number": 1,
                  "pinned": false,
                  "private": false,
                  "team_url": "https://api.github.com/teams/2343027",
                  "title": "Our first team post",
                  "updated_at": "2018-01-25T18:56:31Z",
                  "url": "https://api.github.com/teams/2343027/discussions/1",
                  "reactions": {
                    "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                    "total_count": 5,
                    "+1": 3,
                    "-1": 1,
                    "laugh": 0,
                    "confused": 0,
                    "heart": 1,
                    "hooray": 0,
                    "eyes": 1,
                    "rocket": 1
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-discussions\"><code>List discussions</code></a> endpoint.</p>\n<p>List all discussions on a team's page. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/teams/{team_id}/discussions",
        "title": "Create a discussion (Legacy)",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion post's title.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's title.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p><strong>Required</strong>. The discussion post's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's body text.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to <code>true</code> to create a private post.</p>",
            "default": false,
            "name": "private",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Our first team post",
                "body": "Hi! This is an area for us to collaborate as a team."
              },
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 0,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": null,
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Our first team post",
                "updated_at": "2018-01-25T18:56:31Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-discussion\"><code>Create a discussion</code></a> endpoint.</p>\n<p>Creates a new discussion post on a team's page. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>\n<p>This endpoint triggers <a href=\"https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications\">notifications</a>. Creating content too quickly using this endpoint may result in secondary rate limiting. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#secondary-rate-limits\">Secondary rate limits</a>\" and \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits\">Dealing with secondary rate limits</a>\" for details.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}",
        "title": "Get a discussion (Legacy)",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 0,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": null,
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Our first team post",
                "updated_at": "2018-01-25T18:56:31Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-a-discussion\">Get a discussion</a> endpoint.</p>\n<p>Get a specific discussion on a team's page. OAuth access tokens require the <code>read:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}",
        "title": "Update a discussion (Legacy)",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The discussion post's title.</p>",
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's title.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The discussion post's body text.</p>",
            "name": "body",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The discussion post's body text.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "title": "Welcome to our first team post"
              },
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "author": {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                },
                "body": "Hi! This is an area for us to collaborate as a team.",
                "body_html": "<p>Hi! This is an area for us to collaborate as a team</p>",
                "body_version": "0d495416a700fb06133c612575d92bfb",
                "comments_count": 1,
                "comments_url": "https://api.github.com/teams/2343027/discussions/1/comments",
                "created_at": "2018-01-25T18:56:31Z",
                "last_edited_at": "2018-01-26T18:22:20Z",
                "html_url": "https://github.com/orgs/github/teams/justice-league/discussions/1",
                "node_id": "MDE0OlRlYW1EaXNjdXNzaW9uMQ==",
                "number": 1,
                "pinned": false,
                "private": false,
                "team_url": "https://api.github.com/teams/2343027",
                "title": "Welcome to our first team post",
                "updated_at": "2018-01-26T18:22:20Z",
                "url": "https://api.github.com/teams/2343027/discussions/1",
                "reactions": {
                  "url": "https://api.github.com/teams/2343027/discussions/1/reactions",
                  "total_count": 5,
                  "+1": 3,
                  "-1": 1,
                  "laugh": 0,
                  "confused": 0,
                  "heart": 1,
                  "hooray": 0,
                  "eyes": 1,
                  "rocket": 1
                }
              }
            }
          }
        ],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#update-a-discussion\">Update a discussion</a> endpoint.</p>\n<p>Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ],
        "previews": [
          "<p>An additional <code>reactions</code> object in the issue comment payload is currently available for developers to preview. During the preview period, the APIs may change without advance notice. Please see the <a href=\"https://developer.github.com/changes/2016-05-12-reactions-api-preview\">blog post</a> for full details.</p>\n<p>To access the API you must provide a custom <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/media-types\">media type</a> in the <code>Accept</code> header:</p>\n<pre><code class=\"hljs language-shell\">application/vnd.github.squirrel-girl-preview</code></pre>\n<p>The <code>reactions</code> key will have the following payload where <code>url</code> can be used to construct the API location for <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/reactions\">listing and creating</a> reactions.</p>"
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/discussions/{discussion_number}",
        "title": "Delete a discussion (Legacy)",
        "category": "teams",
        "subcategory": "discussions",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "discussion_number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "discussion_number": "DISCUSSION_NUMBER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#delete-a-discussion\"><code>Delete a discussion</code></a> endpoint.</p>\n<p>Delete a discussion from a team's page. OAuth access tokens require the <code>write:discussion</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          }
        ]
      }
    ],
    "members": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/members",
        "title": "List team members",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "maintainer",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filters members returned by their role in the team. Can be one of:<br>\n* <code>member</code> - normal members of the team.<br>\n* <code>maintainer</code> - team maintainers.<br>\n* <code>all</code> - all members of the team.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Team members will include the members of child teams.</p>\n<p>To list members in a team, the team must be visible to the authenticated user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "title": "Get team membership for a user",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user is a team maintainer",
              "example": {
                "url": "https://api.github.com/teams/1/memberships/octocat",
                "role": "maintainer",
                "state": "active"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Team members will include the members of child teams.</p>\n<p>To get a user's membership with a team, the team must be visible to the authenticated user.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>GET /organizations/{org_id}/team/{team_id}/memberships/{username}</code>.</p>\n<p><strong>Note:</strong>\nThe response contains the <code>state</code> of the membership and the member's <code>role</code>.</p>\n<p>The <code>role</code> for organization owners is set to <code>maintainer</code>. For more information about <code>maintainer</code> roles, see see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team\">Create a team</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>if user has no team membership</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "title": "Add or update team membership for a user",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The role that this user should have in the team. Can be one of:<br>\n* <code>member</code> - a normal member of the team.<br>\n* <code>maintainer</code> - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.</p>",
            "enum": [
              "member",
              "maintainer"
            ],
            "default": "member",
            "name": "role",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user's membership with team is now pending",
              "example": {
                "url": "https://api.github.com/teams/1/memberships/octocat",
                "role": "member",
                "state": "pending"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>\n<p>An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the \"pending\" state until the person accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team.</p>\n<p>If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>PUT /organizations/{org_id}/team/{team_id}/memberships/{username}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if team synchronization is set up</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Unprocessable Entity if you attempt to add an organization to a team</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/orgs/{org}/teams/{team_slug}/memberships/{username}",
        "title": "Remove team membership for a user",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "team_slug",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>team_slug parameter</p>"
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "org": "ORG",
                "team_slug": "TEAM_SLUG",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>\n<p><strong>Note:</strong> You can also specify a team by <code>org_id</code> and <code>team_id</code> using the route <code>DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}</code>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if team synchronization is set up</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/members",
        "title": "List team members (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "role",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "member",
                "maintainer",
                "all"
              ],
              "default": "all"
            },
            "descriptionHTML": "<p>Filters members returned by their role in the team. Can be one of:<br>\n* <code>member</code> - normal members of the team.<br>\n* <code>maintainer</code> - team maintainers.<br>\n* <code>all</code> - all members of the team.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#list-team-members\"><code>List team members</code></a> endpoint.</p>\n<p>Team members will include the members of child teams.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/members/{username}",
        "title": "Get team member (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "if user is a member"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The \"Get team member\" endpoint (described below) is deprecated.</p>\n<p>We recommend using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user\">Get team membership for a user</a> endpoint instead. It allows you to get both active and pending memberships.</p>\n<p>To list members in a team, the team must be visible to the authenticated user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>if user is a member</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>if user is not a member</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/teams/{team_id}/members/{username}",
        "title": "Add team member (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The \"Add team member\" endpoint (described below) is deprecated.</p>\n<p>We recommend using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-membership-for-a-user\">Add or update team membership for a user</a> endpoint instead. It allows you to invite new organization members to your teams.</p>\n<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>\n<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if team synchronization is set up</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Unprocessable Entity if you attempt to add an organization to a team or you attempt to add a user to a team when they are not a member of at least one other team in the same organization</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/members/{username}",
        "title": "Remove team member (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>The \"Remove team member\" endpoint (described below) is deprecated.</p>\n<p>We recommend using the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-team-membership-for-a-user\">Remove team membership for a user</a> endpoint instead. It allows you to remove both active and pending memberships.</p>\n<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Not Found if team synchronization is setup</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/teams/{team_id}/memberships/{username}",
        "title": "Get team membership for a user (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user is a team maintainer",
              "example": {
                "url": "https://api.github.com/teams/1/memberships/octocat",
                "role": "maintainer",
                "state": "active"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#get-team-membership-for-a-user\">Get team membership for a user</a> endpoint.</p>\n<p>Team members will include the members of child teams.</p>\n<p>To get a user's membership with a team, the team must be visible to the authenticated user.</p>\n<p><strong>Note:</strong>\nThe response contains the <code>state</code> of the membership and the member's <code>role</code>.</p>\n<p>The <code>role</code> for organization owners is set to <code>maintainer</code>. For more information about <code>maintainer</code> roles, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#create-a-team\">Create a team</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/teams/{team_id}/memberships/{username}",
        "title": "Add or update team membership for a user (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The role that this user should have in the team. Can be one of:<br>\n* <code>member</code> - a normal member of the team.<br>\n* <code>maintainer</code> - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.</p>",
            "enum": [
              "member",
              "maintainer"
            ],
            "default": "member",
            "name": "role",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The role that this user should have in the team. Can be one of:  \n\\* `member` - a normal member of the team.  \n\\* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response if user's membership with team is now pending",
              "example": {
                "url": "https://api.github.com/teams/1/memberships/octocat",
                "role": "member",
                "state": "pending"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#add-or-update-team-membership-for-a-user\">Add or update team membership for a user</a> endpoint.</p>\n<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>\n<p>If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the \"pending\" state until the user accepts the invitation, at which point the membership will transition to the \"active\" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.</p>\n<p>If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden if team synchronization is set up</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Unprocessable Entity if you attempt to add an organization to a team</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/teams/{team_id}/memberships/{username}",
        "title": "Remove team membership for a user (Legacy)",
        "category": "teams",
        "subcategory": "members",
        "parameters": [
          {
            "name": "team_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "team_id": "TEAM_ID",
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Deprecation Notice:</strong> This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/teams#remove-team-membership-for-a-user\">Remove team membership for a user</a> endpoint.</p>\n<p>Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see <a href=\"https://docs.github.com/github/getting-started-with-github/githubs-products\">GitHub's products</a> in the GitHub Help documentation.</p>\n<p>To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.</p>\n<p><strong>Note:</strong> When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub Enterprise Server team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see \"<a href=\"https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/\">Synchronizing teams between your identity provider and GitHub Enterprise Server</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>if team synchronization is set up</p>"
          }
        ]
      }
    ]
  },
  "users": {
    "users": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user",
        "title": "Get the authenticated user",
        "category": "users",
        "parameters": [],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "response-with-public-and-private-profile-information",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response with public and private profile information",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z",
                "private_gists": 81,
                "total_private_repos": 100,
                "owned_private_repos": 100,
                "disk_usage": 10000,
                "collaborators": 8,
                "two_factor_authentication": true,
                "plan": {
                  "name": "Medium",
                  "space": 400,
                  "private_repos": 20,
                  "collaborators": 0
                }
              }
            }
          },
          {
            "key": "response-with-public-profile-information",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response with public profile information",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>If the authenticated user is authenticated through basic authentication or OAuth with the <code>user</code> scope, then the response lists public and private profile information.</p>\n<p>If the authenticated user is authenticated through OAuth without the <code>user</code> scope, then the response lists only public profile information.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ],
        "subcategory": "users"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/user",
        "title": "Update the authenticated user",
        "category": "users",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p>The new name of the user.</p>",
            "type": "string",
            "examples": [
              "Omar Jahandar"
            ],
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new name of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The publicly visible email address of the user.</p>",
            "type": "string",
            "examples": [
              "omar@example.com"
            ],
            "name": "email",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The publicly visible email address of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new blog URL of the user.</p>",
            "type": "string",
            "examples": [
              "blog.example.com"
            ],
            "name": "blog",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new blog URL of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new Twitter username of the user.</p>",
            "type": "string or null",
            "examples": [
              "therealomarj"
            ],
            "name": "twitter_username",
            "in": "body",
            "rawType": [
              "string",
              "null"
            ],
            "rawDescription": "The new Twitter username of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new company of the user.</p>",
            "type": "string",
            "examples": [
              "Acme corporation"
            ],
            "name": "company",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new company of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new location of the user.</p>",
            "type": "string",
            "examples": [
              "Berlin, Germany"
            ],
            "name": "location",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new location of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new hiring availability of the user.</p>",
            "type": "boolean",
            "name": "hireable",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "The new hiring availability of the user.",
            "childParamsGroups": []
          },
          {
            "description": "<p>The new short biography of the user.</p>",
            "type": "string",
            "name": "bio",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The new short biography of the user.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z",
                "private_gists": 81,
                "total_private_repos": 100,
                "owned_private_repos": 100,
                "disk_usage": 10000,
                "collaborators": 8,
                "two_factor_authentication": true,
                "plan": {
                  "name": "Medium",
                  "space": 400,
                  "private_repos": 20,
                  "collaborators": 0
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p><strong>Note:</strong> If your email is set to private and you send an <code>email</code> parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "users"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users",
        "title": "List users",
        "category": "users",
        "parameters": [
          {
            "name": "since",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>A user ID. Only return users with an ID greater than this ID.</p>"
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all users, in the order that they signed up on GitHub Enterprise Server. This list includes personal user accounts and organization accounts.</p>\n<p>Note: Pagination is powered exclusively by the <code>since</code> parameter. Use the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#link-header\">Link header</a> to get the URL for the next page of users.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          }
        ],
        "subcategory": "users"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}",
        "title": "Get a user",
        "category": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default-response",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Default response",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "twitter_username": "monatheoctocat",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z"
              }
            }
          },
          {
            "key": "response-with-git-hub-plan-information",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response with GitHub plan information",
              "example": {
                "login": "octocat",
                "id": 1,
                "node_id": "MDQ6VXNlcjE=",
                "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                "gravatar_id": "",
                "url": "https://api.github.com/users/octocat",
                "html_url": "https://github.com/octocat",
                "followers_url": "https://api.github.com/users/octocat/followers",
                "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                "organizations_url": "https://api.github.com/users/octocat/orgs",
                "repos_url": "https://api.github.com/users/octocat/repos",
                "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                "received_events_url": "https://api.github.com/users/octocat/received_events",
                "type": "User",
                "site_admin": false,
                "name": "monalisa octocat",
                "company": "GitHub",
                "blog": "https://github.com/blog",
                "location": "San Francisco",
                "email": "octocat@github.com",
                "hireable": false,
                "bio": "There once was...",
                "twitter_username": "monatheoctocat",
                "public_repos": 2,
                "public_gists": 1,
                "followers": 20,
                "following": 0,
                "created_at": "2008-01-14T04:33:35Z",
                "updated_at": "2008-01-14T04:33:35Z",
                "plan": {
                  "name": "pro",
                  "space": 976562499,
                  "collaborators": 0,
                  "private_repos": 9999
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Provides publicly available information about someone with a GitHub account.</p>\n<p>GitHub Apps with the <code>Plan</code> user permission can use this endpoint to retrieve information about a user's GitHub Enterprise Server plan. The GitHub App must be authenticated as a user. See \"<a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/\">Identifying and authorizing users for GitHub Apps</a>\" for details about authentication. For an example response, see 'Response with GitHub Enterprise Server plan information' below\"</p>\n<p>The <code>email</code> key in the following response is the publicly visible email address from your GitHub Enterprise Server <a href=\"https://github.com/settings/profile\">profile page</a>. When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for <code>email</code>, then it will have a value of <code>null</code>. You only see publicly visible email addresses when authenticated with GitHub Enterprise Server. For more information, see <a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#authentication\">Authentication</a>.</p>\n<p>The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/users#emails\">Emails API</a>\".</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ],
        "subcategory": "users"
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/hovercard",
        "title": "Get contextual information for a user",
        "category": "users",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "subject_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "organization",
                "repository",
                "issue",
                "pull_request"
              ]
            },
            "descriptionHTML": "<p>Identifies which additional information you'd like to receive about the person's hovercard. Can be <code>organization</code>, <code>repository</code>, <code>issue</code>, <code>pull_request</code>. <strong>Required</strong> when using <code>subject_id</code>.</p>"
          },
          {
            "name": "subject_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": "<p>Uses the ID for the <code>subject_type</code> you specified. <strong>Required</strong> when using <code>subject_type</code>.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "contexts": [
                  {
                    "message": "Owns this repository",
                    "octicon": "repo"
                  }
                ]
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Provides hovercard information when authenticated through basic auth or OAuth with the <code>repo</code> scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.</p>\n<p>The <code>subject_type</code> and <code>subject_id</code> parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about <code>octocat</code> who owns the <code>Spoon-Knife</code> repository via cURL, it would look like this:</p>\n<pre><code class=\"hljs language-shell\">curl -u username:token\n  https://api.github.com/users/octocat/hovercard?subject_type=repository&#x26;subject_id=1300192</code></pre>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ],
        "subcategory": "users"
      }
    ],
    "emails": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/emails",
        "title": "List email addresses for the authenticated user",
        "category": "users",
        "subcategory": "emails",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "email": "octocat@github.com",
                  "verified": true,
                  "primary": true,
                  "visibility": "public"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the <code>user:email</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/user/emails",
        "title": "Add an email address for the authenticated user",
        "category": "users",
        "subcategory": "emails",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Adds one or more email addresses to your GitHub account. Must contain at least one email address. <strong>Note:</strong> Alternatively, you can pass a single email address or an <code>array</code> of emails addresses directly, but we recommend that you pass an object using the <code>emails</code> key.</p>",
            "type": "array of strings",
            "items": {
              "type": "string",
              "minItems": 1,
              "examples": [
                "username@example.com"
              ]
            },
            "examples": [],
            "name": "emails",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "email": "octocat@octocat.org",
                  "primary": false,
                  "verified": false,
                  "visibility": "public"
                },
                {
                  "email": "octocat@github.com",
                  "primary": false,
                  "verified": false,
                  "visibility": null
                },
                {
                  "email": "mona@github.com",
                  "primary": false,
                  "verified": false,
                  "visibility": null
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint is accessible with the <code>user</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/emails",
        "title": "Delete an email address for the authenticated user",
        "category": "users",
        "subcategory": "emails",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. Email addresses associated with the GitHub user account.</p>",
            "type": "array of strings",
            "items": {
              "type": "string",
              "minItems": 1,
              "examples": [
                "username@example.com"
              ]
            },
            "name": "emails",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Email addresses associated with the GitHub user account.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This endpoint is accessible with the <code>user</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/public_emails",
        "title": "List public email addresses for the authenticated user",
        "category": "users",
        "subcategory": "emails",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "email": "octocat@github.com",
                  "verified": true,
                  "primary": true,
                  "visibility": "public"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists your publicly visible email address, which you can set with the <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user\">Set primary email visibility for the authenticated user</a> endpoint. This endpoint is accessible with the <code>user:email</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ],
    "followers": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/followers",
        "title": "List followers of the authenticated user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people following the authenticated user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/following",
        "title": "List the people the authenticated user follows",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people who the authenticated user follows.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/following/{username}",
        "title": "Check if a person is followed by the authenticated user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "if the person is followed by the authenticated user"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>if the person is followed by the authenticated user</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>if the person is not followed by the authenticated user</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "put",
        "requestPath": "/user/following/{username}",
        "title": "Follow a user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Note that you'll need to set <code>Content-Length</code> to zero when calling out to this endpoint. For more information, see \"<a href=\"https://docs.github.com/enterprise-server@3.1/rest/overview/resources-in-the-rest-api#http-verbs\">HTTP verbs</a>.\"</p>\n<p>Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the <code>user:follow</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/following/{username}",
        "title": "Unfollow a user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the <code>user:follow</code> scope.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/followers",
        "title": "List followers of a user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people following the specified user.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/following",
        "title": "List the people a user follows",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "login": "octocat",
                  "id": 1,
                  "node_id": "MDQ6VXNlcjE=",
                  "avatar_url": "https://github.com/images/error/octocat_happy.gif",
                  "gravatar_id": "",
                  "url": "https://api.github.com/users/octocat",
                  "html_url": "https://github.com/octocat",
                  "followers_url": "https://api.github.com/users/octocat/followers",
                  "following_url": "https://api.github.com/users/octocat/following{/other_user}",
                  "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
                  "organizations_url": "https://api.github.com/users/octocat/orgs",
                  "repos_url": "https://api.github.com/users/octocat/repos",
                  "events_url": "https://api.github.com/users/octocat/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/octocat/received_events",
                  "type": "User",
                  "site_admin": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the people who the specified user follows.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/following/{target_user}",
        "title": "Check if a user follows another user",
        "category": "users",
        "subcategory": "followers",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "target_user",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME",
                "target_user": "TARGET_USER"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "if the user follows the target user"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>if the user follows the target user</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>if the user does not follow the target user</p>"
          }
        ]
      }
    ],
    "gpg-keys": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/gpg_keys",
        "title": "List GPG keys for the authenticated user",
        "category": "users",
        "subcategory": "gpg-keys",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 3,
                  "primary_key_id": 2,
                  "key_id": "3262EFF25BA0D270",
                  "public_key": "xsBNBFayYZ...",
                  "emails": [
                    {
                      "email": "mastahyeti@users.noreply.github.com",
                      "verified": true
                    }
                  ],
                  "subkeys": [
                    {
                      "id": 4,
                      "primary_key_id": 3,
                      "key_id": "4A595D4C72EE49C7",
                      "public_key": "zsBNBFayYZ...",
                      "emails": [],
                      "subkeys": [],
                      "can_sign": false,
                      "can_encrypt_comms": true,
                      "can_encrypt_storage": true,
                      "can_certify": false,
                      "created_at": "2016-03-24T11:31:04-06:00",
                      "expires_at": "2016-03-24T11:31:04-07:00"
                    }
                  ],
                  "can_sign": true,
                  "can_encrypt_comms": false,
                  "can_encrypt_storage": false,
                  "can_certify": true,
                  "created_at": "2016-03-24T11:31:04-06:00",
                  "expires_at": "2016-03-24T11:31:04-07:00",
                  "raw_key": "string"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>read:gpg_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/user/gpg_keys",
        "title": "Create a GPG key for the authenticated user",
        "category": "users",
        "subcategory": "gpg-keys",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p><strong>Required</strong>. A GPG key in ASCII-armored format.</p>",
            "type": "string",
            "name": "armored_public_key",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A GPG key in ASCII-armored format.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 3,
                "primary_key_id": 2,
                "key_id": "3262EFF25BA0D270",
                "public_key": "xsBNBFayYZ...",
                "emails": [
                  {
                    "email": "mastahyeti@users.noreply.github.com",
                    "verified": true
                  }
                ],
                "subkeys": [
                  {
                    "id": 4,
                    "primary_key_id": 3,
                    "key_id": "4A595D4C72EE49C7",
                    "public_key": "zsBNBFayYZ...",
                    "emails": [],
                    "subkeys": [],
                    "can_sign": false,
                    "can_encrypt_comms": true,
                    "can_encrypt_storage": true,
                    "can_certify": false,
                    "created_at": "2016-03-24T11:31:04-06:00",
                    "expires_at": "2016-03-24T11:31:04-07:00"
                  }
                ],
                "can_sign": true,
                "can_encrypt_comms": false,
                "can_encrypt_storage": false,
                "can_certify": true,
                "created_at": "2016-03-24T11:31:04-06:00",
                "expires_at": "2016-03-24T11:31:04-07:00",
                "raw_key": "\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nVersion: GnuPG v2\\n\\nmQENBFayYZ0BCAC4hScoJXXpyR+MXGcrBxElqw3FzCVvkViuyeko+Jp76QJhg8kr\\nucRTxbnOoHfda/FmilEa/wxf9ch5/PSrrL26FxEoPHhJolp8fnIDLQeITn94NYdB\\nZtnnEKslpPrG97qSUWIchvyqCPtvOb8+8fWvGx9K/ZWcEEdh1X8+WFR2jMENMeoX\\nwxHWQoPnS7LpX/85/M7VUcJxvDVfv+eHsnQupmE5bGarKNih0oMe3LbdN3qA5PTz\\nSCm6Iudar1VsQ+xTz08ymL7t4pnEtLguQ7EyatFHCjxNblv5RzxoL0tDgN3HqoDz\\nc7TEA+q4RtDQl9amcvQ95emnXmZ974u7UkYdABEBAAG0HlNvbWUgVXNlciA8c29t\\nZXVzZXJAZ21haWwuY29tPokBOAQTAQIAIgUCVrJhnQIbAwYLCQgHAwIGFQgCCQoL\\nBBYCAwECHgECF4AACgkQMmLv8lug0nAViQgArWjI55+7p48URr2z9Jvak+yrBTx1\\nzkufltQAnHTJkq+Kl9dySSmTnOop8o3rE4++IOpYV5Y36PkKf9EZMk4n1RQiDPKE\\nAFtRVTkRaoWzOir9KQXJPfhKrl01j/QzY+utfiMvUoBJZ9ybq8Pa885SljW9lbaX\\nIYw+hl8ZdJ2KStvGrEyfQvRyq3aN5c9TV//4BdGnwx7Qabq/U+G18lizG6f/yq15\\ned7t0KELaCfeKPvytp4VE9/z/Ksah/h3+Qilx07/oG2Ae5kC1bEC9coD/ogPUhbv\\nb2bsBIoY9E9YwsLoif2lU+o1t76zLgUktuNscRRUKobW028H1zuFS/XQhrkBDQRW\\nsmGdAQgApnyyv3i144OLYy0O4UKQxd3e10Y3WpDwfnGIBefAI1m7RxnUxBag/DsU\\n7gi9qLEC4VHSfq4eiNfr1LJOyCL2edTgCWFgBhVjbXjZe6YAOrAnhxwCErnN0Y7N\\n6s8wVh9fObSOyf8ZE6G7JeKpcq9Q6gd/KxagfD48a1v+fyRHpyQc6J9pUEmtrDJ7\\nBjmsd2VWzLBvNWdHyxDNtZweIaqIO9VUYYpr1mtTliNBOZLUelmgrt7HBRcJpWMA\\nS8muVVbuP5MK0trLBq/JB8qUH3zRzB/PhMgzmkIfjEK1VYDWm4E8DYyTWEJcHqkb\\neqFsNjrIlwPaA122BWC6gUOPwwH+oQARAQABiQEfBBgBAgAJBQJWsmGdAhsMAAoJ\\nEDJi7/JboNJwAyAIALd4xcdmGbZD98gScJzqwzkOMcO8zFHqHNvJ42xIFvGny7c0\\n1Rx7iyrdypOby5AxE+viQcjG4rpLZW/xKYBNGrCfDyQO7511I0v8x20EICMlMfD/\\nNrWQCzesEPcUlKTP07d+sFyP8AyseOidbzY/92CpskTgdSBjY/ntLSaoknl/fjJE\\nQM8OkPqU7IraO1Jzzdnm20d5PZL9+PIwIWdSTedU/vBMTJyNcoqvSfKf1wNC66XP\\nhqfYgXJE564AdWZKA3C0IyCqiv+LHwxLnUHio1a4/r91C8KPzxs6tGxRDjXLd7ms\\nuYFGWymiUGOE/giHlcxdYcHzwLnPDliMQOLiTkK5AQ0EVuxMygEIAOD+bW1cDTmE\\nBxh5JECoqeHuwgl6DlLhnubWPkQ4ZeRzBRAsFcEJQlwlJjrzFDicL+lnm6Qq4tt0\\n560TwHdf15/AKTZIZu7H25axvGNzgeaUkJEJdYAq9zTKWwX7wKyzBszi485nQg97\\nMfAqwhMpDW0Qqf8+7Ug+WEmfBSGv9uL3aQC6WEeIsHfri0n0n8v4XgwhfShXguxO\\nCsOztEsuW7WWKW9P4TngKKv4lCHdPlV6FwxeMzODBJvc2fkHVHnqc0PqszJ5xcF8\\n6gZCpMM027SbpeYWCAD5zwJyYP9ntfO1p2HjnQ1dZaP9FeNcO7uIV1Lnd1eGCu6I\\nsrVp5k1f3isAEQEAAYkCPgQYAQIACQUCVuxMygIbAgEpCRAyYu/yW6DScMBdIAQZ\\nAQIABgUCVuxMygAKCRCKohN4dhq2b4tcCACHxmOHVXNpu47OvUGYQydLgMACUlXN\\nlj+HfE0VReqShxdDmpasAY9IRpuMB2RsGK8GbNP+4SlOlAiPf5SMhS7nZNkNDgQQ\\naZ3HFpgrFmFwmE10BKT4iQtoxELLM57z0qGOAfTsEjWFQa4sF+6IHAQR/ptkdkkI\\nBUEXiMnAwVwBysLIJiLO8qdjB6qp52QkT074JVrwywT/P+DkMfC2k4r/AfEbf6eF\\ndmPDuPk6KD87+hJZsSa5MaMUBQVvRO/mgEkhJRITVu58eWGaBOcQJ8gqurhCqM5P\\nDfUA4TJ7wiqM6sS764vV1rOioTTXkszzhClQqET7hPVnVQjenYgv0EZHNyQH/1f1\\n/CYqvV1vFjM9vJjMbxXsATCkZe6wvBVKD8vLsJAr8N+onKQz+4OPc3kmKq7aESu3\\nCi/iuie5KKVwnuNhr9AzT61vEkKxwHcVFEvHB77F6ZAAInhRvjzmQbD2dlPLLQCC\\nqDj71ODSSAPTEmUy6969bgD9PfWei7kNkBIx7s3eBv8yzytSc2EcuUgopqFazquw\\nFs1+tqGHjBvQfTo6bqbJjp/9Ci2pvde3ElV2rAgUlb3lqXyXjRDqrXosh5GcRPQj\\nK8Nhj1BNhnrCVskE4BP0LYbOHuzgm86uXwGCFsY+w2VOsSm16Jx5GHyG5S5WU3+D\\nIts/HFYRLiFgDLmTlxo=\\n=+OzK\\n-----END PGP PUBLIC KEY BLOCK-----\""
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least <code>write:gpg_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/gpg_keys/{gpg_key_id}",
        "title": "Get a GPG key for the authenticated user",
        "category": "users",
        "subcategory": "gpg-keys",
        "parameters": [
          {
            "name": "gpg_key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>gpg_key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gpg_key_id": "GPG_KEY_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "id": 3,
                "primary_key_id": 2,
                "key_id": "3262EFF25BA0D270",
                "public_key": "xsBNBFayYZ...",
                "emails": [
                  {
                    "email": "mastahyeti@users.noreply.github.com",
                    "verified": true
                  }
                ],
                "subkeys": [
                  {
                    "id": 4,
                    "primary_key_id": 3,
                    "key_id": "4A595D4C72EE49C7",
                    "public_key": "zsBNBFayYZ...",
                    "emails": [],
                    "subkeys": [],
                    "can_sign": false,
                    "can_encrypt_comms": true,
                    "can_encrypt_storage": true,
                    "can_certify": false,
                    "created_at": "2016-03-24T11:31:04-06:00",
                    "expires_at": "2016-03-24T11:31:04-07:00"
                  }
                ],
                "can_sign": true,
                "can_encrypt_comms": false,
                "can_encrypt_storage": false,
                "can_certify": true,
                "created_at": "2016-03-24T11:31:04-06:00",
                "expires_at": "2016-03-24T11:31:04-07:00",
                "raw_key": "\"-----BEGIN PGP PUBLIC KEY BLOCK-----\\nVersion: GnuPG v2\\n\\nmQENBFayYZ0BCAC4hScoJXXpyR+MXGcrBxElqw3FzCVvkViuyeko+Jp76QJhg8kr\\nucRTxbnOoHfda/FmilEa/wxf9ch5/PSrrL26FxEoPHhJolp8fnIDLQeITn94NYdB\\nZtnnEKslpPrG97qSUWIchvyqCPtvOb8+8fWvGx9K/ZWcEEdh1X8+WFR2jMENMeoX\\nwxHWQoPnS7LpX/85/M7VUcJxvDVfv+eHsnQupmE5bGarKNih0oMe3LbdN3qA5PTz\\nSCm6Iudar1VsQ+xTz08ymL7t4pnEtLguQ7EyatFHCjxNblv5RzxoL0tDgN3HqoDz\\nc7TEA+q4RtDQl9amcvQ95emnXmZ974u7UkYdABEBAAG0HlNvbWUgVXNlciA8c29t\\nZXVzZXJAZ21haWwuY29tPokBOAQTAQIAIgUCVrJhnQIbAwYLCQgHAwIGFQgCCQoL\\nBBYCAwECHgECF4AACgkQMmLv8lug0nAViQgArWjI55+7p48URr2z9Jvak+yrBTx1\\nzkufltQAnHTJkq+Kl9dySSmTnOop8o3rE4++IOpYV5Y36PkKf9EZMk4n1RQiDPKE\\nAFtRVTkRaoWzOir9KQXJPfhKrl01j/QzY+utfiMvUoBJZ9ybq8Pa885SljW9lbaX\\nIYw+hl8ZdJ2KStvGrEyfQvRyq3aN5c9TV//4BdGnwx7Qabq/U+G18lizG6f/yq15\\ned7t0KELaCfeKPvytp4VE9/z/Ksah/h3+Qilx07/oG2Ae5kC1bEC9coD/ogPUhbv\\nb2bsBIoY9E9YwsLoif2lU+o1t76zLgUktuNscRRUKobW028H1zuFS/XQhrkBDQRW\\nsmGdAQgApnyyv3i144OLYy0O4UKQxd3e10Y3WpDwfnGIBefAI1m7RxnUxBag/DsU\\n7gi9qLEC4VHSfq4eiNfr1LJOyCL2edTgCWFgBhVjbXjZe6YAOrAnhxwCErnN0Y7N\\n6s8wVh9fObSOyf8ZE6G7JeKpcq9Q6gd/KxagfD48a1v+fyRHpyQc6J9pUEmtrDJ7\\nBjmsd2VWzLBvNWdHyxDNtZweIaqIO9VUYYpr1mtTliNBOZLUelmgrt7HBRcJpWMA\\nS8muVVbuP5MK0trLBq/JB8qUH3zRzB/PhMgzmkIfjEK1VYDWm4E8DYyTWEJcHqkb\\neqFsNjrIlwPaA122BWC6gUOPwwH+oQARAQABiQEfBBgBAgAJBQJWsmGdAhsMAAoJ\\nEDJi7/JboNJwAyAIALd4xcdmGbZD98gScJzqwzkOMcO8zFHqHNvJ42xIFvGny7c0\\n1Rx7iyrdypOby5AxE+viQcjG4rpLZW/xKYBNGrCfDyQO7511I0v8x20EICMlMfD/\\nNrWQCzesEPcUlKTP07d+sFyP8AyseOidbzY/92CpskTgdSBjY/ntLSaoknl/fjJE\\nQM8OkPqU7IraO1Jzzdnm20d5PZL9+PIwIWdSTedU/vBMTJyNcoqvSfKf1wNC66XP\\nhqfYgXJE564AdWZKA3C0IyCqiv+LHwxLnUHio1a4/r91C8KPzxs6tGxRDjXLd7ms\\nuYFGWymiUGOE/giHlcxdYcHzwLnPDliMQOLiTkK5AQ0EVuxMygEIAOD+bW1cDTmE\\nBxh5JECoqeHuwgl6DlLhnubWPkQ4ZeRzBRAsFcEJQlwlJjrzFDicL+lnm6Qq4tt0\\n560TwHdf15/AKTZIZu7H25axvGNzgeaUkJEJdYAq9zTKWwX7wKyzBszi485nQg97\\nMfAqwhMpDW0Qqf8+7Ug+WEmfBSGv9uL3aQC6WEeIsHfri0n0n8v4XgwhfShXguxO\\nCsOztEsuW7WWKW9P4TngKKv4lCHdPlV6FwxeMzODBJvc2fkHVHnqc0PqszJ5xcF8\\n6gZCpMM027SbpeYWCAD5zwJyYP9ntfO1p2HjnQ1dZaP9FeNcO7uIV1Lnd1eGCu6I\\nsrVp5k1f3isAEQEAAYkCPgQYAQIACQUCVuxMygIbAgEpCRAyYu/yW6DScMBdIAQZ\\nAQIABgUCVuxMygAKCRCKohN4dhq2b4tcCACHxmOHVXNpu47OvUGYQydLgMACUlXN\\nlj+HfE0VReqShxdDmpasAY9IRpuMB2RsGK8GbNP+4SlOlAiPf5SMhS7nZNkNDgQQ\\naZ3HFpgrFmFwmE10BKT4iQtoxELLM57z0qGOAfTsEjWFQa4sF+6IHAQR/ptkdkkI\\nBUEXiMnAwVwBysLIJiLO8qdjB6qp52QkT074JVrwywT/P+DkMfC2k4r/AfEbf6eF\\ndmPDuPk6KD87+hJZsSa5MaMUBQVvRO/mgEkhJRITVu58eWGaBOcQJ8gqurhCqM5P\\nDfUA4TJ7wiqM6sS764vV1rOioTTXkszzhClQqET7hPVnVQjenYgv0EZHNyQH/1f1\\n/CYqvV1vFjM9vJjMbxXsATCkZe6wvBVKD8vLsJAr8N+onKQz+4OPc3kmKq7aESu3\\nCi/iuie5KKVwnuNhr9AzT61vEkKxwHcVFEvHB77F6ZAAInhRvjzmQbD2dlPLLQCC\\nqDj71ODSSAPTEmUy6969bgD9PfWei7kNkBIx7s3eBv8yzytSc2EcuUgopqFazquw\\nFs1+tqGHjBvQfTo6bqbJjp/9Ci2pvde3ElV2rAgUlb3lqXyXjRDqrXosh5GcRPQj\\nK8Nhj1BNhnrCVskE4BP0LYbOHuzgm86uXwGCFsY+w2VOsSm16Jx5GHyG5S5WU3+D\\nIts/HFYRLiFgDLmTlxo=\\n=+OzK\\n-----END PGP PUBLIC KEY BLOCK-----\""
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>read:gpg_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/gpg_keys/{gpg_key_id}",
        "title": "Delete a GPG key for the authenticated user",
        "category": "users",
        "subcategory": "gpg-keys",
        "parameters": [
          {
            "name": "gpg_key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>gpg_key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "gpg_key_id": "GPG_KEY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>admin:gpg_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/gpg_keys",
        "title": "List GPG keys for a user",
        "category": "users",
        "subcategory": "gpg-keys",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 3,
                  "primary_key_id": 2,
                  "key_id": "3262EFF25BA0D270",
                  "public_key": "xsBNBFayYZ...",
                  "emails": [
                    {
                      "email": "mastahyeti@users.noreply.github.com",
                      "verified": true
                    }
                  ],
                  "subkeys": [
                    {
                      "id": 4,
                      "primary_key_id": 3,
                      "key_id": "4A595D4C72EE49C7",
                      "public_key": "zsBNBFayYZ...",
                      "emails": [],
                      "subkeys": [],
                      "can_sign": false,
                      "can_encrypt_comms": true,
                      "can_encrypt_storage": true,
                      "can_certify": false,
                      "created_at": "2016-03-24T11:31:04-06:00",
                      "expires_at": "2016-03-24T11:31:04-07:00"
                    }
                  ],
                  "can_sign": true,
                  "can_encrypt_comms": false,
                  "can_encrypt_storage": false,
                  "can_certify": true,
                  "created_at": "2016-03-24T11:31:04-06:00",
                  "expires_at": "2016-03-24T11:31:04-07:00",
                  "raw_key": "string"
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the GPG keys for a user. This information is accessible by anyone.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "keys": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/keys",
        "title": "List public SSH keys for the authenticated user",
        "category": "users",
        "subcategory": "keys",
        "parameters": [
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                  "id": 2,
                  "url": "https://api.github.com/user/keys/2",
                  "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                  "created_at": "2020-06-11T21:31:57Z",
                  "verified": false,
                  "read_only": false
                },
                {
                  "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJy931234",
                  "id": 3,
                  "url": "https://api.github.com/user/keys/3",
                  "title": "ssh-rsa AAAAB3NzaC1yc2EAAB",
                  "created_at": "2020-07-11T21:31:57Z",
                  "verified": false,
                  "read_only": false
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>read:public_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/user/keys",
        "title": "Create a public SSH key for the authenticated user",
        "category": "users",
        "subcategory": "keys",
        "parameters": [],
        "bodyParameters": [
          {
            "description": "<p>A descriptive name for the new key.</p>",
            "type": "string",
            "examples": [
              "Personal MacBook Air"
            ],
            "name": "title",
            "in": "body",
            "rawType": "string",
            "rawDescription": "A descriptive name for the new key.",
            "childParamsGroups": []
          },
          {
            "description": "<p><strong>Required</strong>. The public SSH key to add to your GitHub account.</p>",
            "type": "string",
            "pattern": "^ssh-(rsa|dss|ed25519) |^ecdsa-sha2-nistp(256|384|521) ",
            "name": "key",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The public SSH key to add to your GitHub account.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json"
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                "id": 2,
                "url": "https://api.github.com/user/keys/2",
                "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                "created_at": "2020-06-11T21:31:57Z",
                "verified": false,
                "read_only": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least <code>write:public_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/user/keys/{key_id}",
        "title": "Get a public SSH key for the authenticated user",
        "category": "users",
        "subcategory": "keys",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "key_id": "KEY_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "key": "2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvv1234",
                "id": 2,
                "url": "https://api.github.com/user/keys/2",
                "title": "ssh-rsa AAAAB3NzaC1yc2EAAA",
                "created_at": "2020-06-11T21:31:57Z",
                "verified": false,
                "read_only": false
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>read:public_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/user/keys/{key_id}",
        "title": "Delete a public SSH key for the authenticated user",
        "category": "users",
        "subcategory": "keys",
        "parameters": [
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": "<p>key_id parameter</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": false,
        "codeExamples": [
          {
            "key": "204",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "key_id": "KEY_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least <code>admin:public_key</code> <a href=\"https://docs.github.com/enterprise-server@3.1/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/\">scope</a>.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "304",
            "description": "<p>Not modified</p>"
          },
          {
            "httpStatusCode": "401",
            "description": "<p>Requires authentication</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/users/{username}/keys",
        "title": "List public keys for a user",
        "category": "users",
        "subcategory": "keys",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "username": "USERNAME"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "id": 1,
                  "key": "ssh-rsa AAA..."
                }
              ]
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Lists the <em>verified</em> public SSH keys for a user. This is accessible by anyone.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ]
  },
  "webhooks": {
    "repo-config": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "title": "Get a webhook configuration for a repository",
        "category": "webhooks",
        "subcategory": "repo-config",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns the webhook configuration for a repository. To get more information about the webhook, including the <code>active</code> state and <code>events</code>, use \"<a href=\"/rest/reference/orgs#get-a-repository-webhook\">Get a repository webhook</a>.\"</p>\n<p>Access tokens must have the <code>read:repo_hook</code> or <code>repo</code> scope, and GitHub Apps must have the <code>repository_hooks:read</code> permission.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}/config",
        "title": "Update a webhook configuration for a repository",
        "category": "webhooks",
        "subcategory": "repo-config",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>The URL to which the payloads will be delivered.</p>",
            "format": "uri",
            "examples": [
              "https://example.com/webhook"
            ],
            "name": "url",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The URL to which the payloads will be delivered.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
            "examples": [
              "\"json\""
            ],
            "name": "content_type",
            "in": "body",
            "rawType": "string",
            "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
            "childParamsGroups": []
          },
          {
            "type": "string",
            "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
            "examples": [
              "\"********\""
            ],
            "name": "secret",
            "in": "body",
            "rawType": "string",
            "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
            "childParamsGroups": []
          },
          {
            "oneOf": [
              {
                "type": "string",
                "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                "examples": [
                  "\"0\""
                ]
              },
              {
                "type": "number"
              }
            ],
            "name": "insecure_ssl",
            "in": "body",
            "type": "string or number or ",
            "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "content_type": "json",
                "insecure_ssl": "0",
                "secret": "********",
                "url": "https://example.com/webhook"
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates the webhook configuration for a repository. To update more information about the webhook, including the <code>active</code> state and <code>events</code>, use \"<a href=\"/rest/reference/orgs#update-a-repository-webhook\">Update a repository webhook</a>.\"</p>\n<p>Access tokens must have the <code>write:repo_hook</code> or <code>repo</code> scope, and GitHub Apps must have the <code>repository_hooks:write</code> permission.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          }
        ]
      }
    ],
    "repos": [
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/hooks",
        "title": "List repository webhooks",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 30
            },
            "descriptionHTML": "<p>Results per page (max 100)</p>"
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "descriptionHTML": "<p>Page number of the results to fetch.</p>"
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": [
                {
                  "type": "Repository",
                  "id": 12345678,
                  "name": "web",
                  "active": true,
                  "events": [
                    "push",
                    "pull_request"
                  ],
                  "config": {
                    "content_type": "json",
                    "insecure_ssl": "0",
                    "url": "https://example.com/webhook"
                  },
                  "updated_at": "2019-06-03T00:57:16Z",
                  "created_at": "2019-06-03T00:57:16Z",
                  "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                  "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
                  "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
                  "last_response": {
                    "code": null,
                    "status": "unused",
                    "message": null
                  }
                }
              ]
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/hooks",
        "title": "Create a repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "string",
            "description": "<p>Use <code>web</code> to create a webhook. Default: <code>web</code>. This parameter only accepts the value <code>web</code>.</p>",
            "name": "name",
            "in": "body",
            "rawType": "string",
            "rawDescription": "Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.",
            "childParamsGroups": []
          },
          {
            "type": "object",
            "description": "<p>Key/value pairs to provide settings for this webhook. <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params\">These are defined below</a>.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p>The URL to which the payloads will be delivered.</p>",
                "format": "uri",
                "examples": [
                  "https://example.com/webhook"
                ],
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "examples": [
                  "\"json\""
                ],
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                "examples": [
                  "\"********\""
                ],
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "examples": [
                      "\"0\""
                    ]
                  },
                  {
                    "type": "number"
                  }
                ],
                "name": "insecure_ssl",
                "in": "body",
                "type": "string or number or ",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "childParamsGroups": []
              },
              "token": {
                "type": "string",
                "examples": [
                  "\"abc\""
                ],
                "name": "token",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              },
              "digest": {
                "type": "string",
                "examples": [
                  "\"sha256\""
                ],
                "name": "digest",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              }
            },
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params).",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p>The URL to which the payloads will be delivered.</p>",
                    "format": "uri",
                    "examples": [
                      "https://example.com/webhook"
                    ],
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "examples": [
                      "\"json\""
                    ],
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                    "examples": [
                      "\"********\""
                    ],
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                    "childParamsGroups": []
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                        "examples": [
                          "\"0\""
                        ]
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "name": "insecure_ssl",
                    "in": "body",
                    "type": "string or number or ",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"abc\""
                    ],
                    "name": "token",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"sha256\""
                    ],
                    "name": "digest",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>Determines what <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> the hook is triggered for.</p>",
            "default": [
              "push"
            ],
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "url": "https://example.com/webhook",
                  "content_type": "json",
                  "insecure_ssl": "0"
                }
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO"
              }
            },
            "response": {
              "statusCode": "201",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Repository",
                "id": 12345678,
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "content_type": "json",
                  "insecure_ssl": "0",
                  "url": "https://example.com/webhook"
                },
                "updated_at": "2019-06-03T00:57:16Z",
                "created_at": "2019-06-03T00:57:16Z",
                "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
                "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
                "last_response": {
                  "code": null,
                  "status": "unused",
                  "message": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Repositories can have multiple webhooks installed. Each webhook should have a unique <code>config</code>. Multiple webhooks can\nshare the same <code>config</code> as long as those webhooks do not have any <code>events</code> that overlap.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "201",
            "description": "<p>Created</p>"
          },
          {
            "httpStatusCode": "403",
            "description": "<p>Forbidden</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "get",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "title": "Get a repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Repository",
                "id": 12345678,
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "content_type": "json",
                  "insecure_ssl": "0",
                  "url": "https://example.com/webhook"
                },
                "updated_at": "2019-06-03T00:57:16Z",
                "created_at": "2019-06-03T00:57:16Z",
                "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
                "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
                "last_response": {
                  "code": null,
                  "status": "unused",
                  "message": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Returns a webhook configured in a repository. To get only the webhook <code>config</code> properties, see \"<a href=\"/rest/reference/repos#get-a-webhook-configuration-for-a-repository\">Get a webhook configuration for a repository</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "patch",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "title": "Update a repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [
          {
            "type": "object",
            "description": "<p>Key/value pairs to provide settings for this webhook. <a href=\"https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params\">These are defined below</a>.</p>",
            "properties": {
              "url": {
                "type": "string",
                "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                "format": "uri",
                "examples": [
                  "https://example.com/webhook"
                ],
                "name": "url",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The URL to which the payloads will be delivered.",
                "childParamsGroups": []
              },
              "content_type": {
                "type": "string",
                "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                "examples": [
                  "\"json\""
                ],
                "name": "content_type",
                "in": "body",
                "rawType": "string",
                "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                "childParamsGroups": []
              },
              "secret": {
                "type": "string",
                "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                "examples": [
                  "\"********\""
                ],
                "name": "secret",
                "in": "body",
                "rawType": "string",
                "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                "childParamsGroups": []
              },
              "insecure_ssl": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                    "examples": [
                      "\"0\""
                    ]
                  },
                  {
                    "type": "number"
                  }
                ],
                "name": "insecure_ssl",
                "in": "body",
                "type": "string or number or ",
                "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                "childParamsGroups": []
              },
              "address": {
                "type": "string",
                "examples": [
                  "\"bar@example.com\""
                ],
                "name": "address",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              },
              "room": {
                "type": "string",
                "examples": [
                  "\"The Serious Room\""
                ],
                "name": "room",
                "in": "body",
                "rawType": "string",
                "description": "",
                "childParamsGroups": []
              }
            },
            "required": [
              "url"
            ],
            "name": "config",
            "in": "body",
            "rawType": "object",
            "rawDescription": "Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/enterprise-server@3.1/rest/reference/repos#create-hook-config-params).",
            "childParamsGroups": [
              {
                "parentName": "config",
                "parentType": "object",
                "id": "config-object",
                "params": [
                  {
                    "type": "string",
                    "description": "<p><strong>Required</strong>. The URL to which the payloads will be delivered.</p>",
                    "format": "uri",
                    "examples": [
                      "https://example.com/webhook"
                    ],
                    "name": "url",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The URL to which the payloads will be delivered.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>The media type used to serialize the payloads. Supported values include <code>json</code> and <code>form</code>. The default is <code>form</code>.</p>",
                    "examples": [
                      "\"json\""
                    ],
                    "name": "content_type",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "description": "<p>If provided, the <code>secret</code> will be used as the <code>key</code> to generate the HMAC hex digest value for <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers\">delivery signature headers</a>.</p>",
                    "examples": [
                      "\"********\""
                    ],
                    "name": "secret",
                    "in": "body",
                    "rawType": "string",
                    "rawDescription": "If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads/#delivery-headers).",
                    "childParamsGroups": []
                  },
                  {
                    "oneOf": [
                      {
                        "type": "string",
                        "description": "Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.**",
                        "examples": [
                          "\"0\""
                        ]
                      },
                      {
                        "type": "number"
                      }
                    ],
                    "name": "insecure_ssl",
                    "in": "body",
                    "type": "string or number or ",
                    "description": "<p>Determines whether the SSL certificate of the host for <code>url</code> will be verified when delivering payloads. Supported values include <code>0</code> (verification is performed) and <code>1</code> (verification is not performed). The default is <code>0</code>. <strong>We strongly recommend not setting this to <code>1</code> as you are subject to man-in-the-middle and other attacks.</strong></p>",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"bar@example.com\""
                    ],
                    "name": "address",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  },
                  {
                    "type": "string",
                    "examples": [
                      "\"The Serious Room\""
                    ],
                    "name": "room",
                    "in": "body",
                    "rawType": "string",
                    "description": "",
                    "childParamsGroups": []
                  }
                ]
              }
            ]
          },
          {
            "type": "array of strings",
            "description": "<p>Determines what <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads\">events</a> the hook is triggered for. This replaces the entire array of events.</p>",
            "default": [
              "push"
            ],
            "items": {
              "type": "string"
            },
            "name": "events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines what [events](https://docs.github.com/enterprise-server@3.1/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>Determines a list of events to be added to the list of events that the Hook triggers for.</p>",
            "items": {
              "type": "string"
            },
            "name": "add_events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines a list of events to be added to the list of events that the Hook triggers for.",
            "childParamsGroups": []
          },
          {
            "type": "array of strings",
            "description": "<p>Determines a list of events to be removed from the list of events that the Hook triggers for.</p>",
            "items": {
              "type": "string"
            },
            "name": "remove_events",
            "in": "body",
            "rawType": "array",
            "rawDescription": "Determines a list of events to be removed from the list of events that the Hook triggers for.",
            "childParamsGroups": []
          },
          {
            "type": "boolean",
            "description": "<p>Determines if notifications are sent when the webhook is triggered. Set to <code>true</code> to send notifications.</p>",
            "default": true,
            "name": "active",
            "in": "body",
            "rawType": "boolean",
            "rawDescription": "Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.",
            "childParamsGroups": []
          }
        ],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "contentType": "application/json",
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "bodyParameters": {
                "active": true,
                "add_events": [
                  "pull_request"
                ]
              },
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "200",
              "contentType": "application/json",
              "description": "Response",
              "example": {
                "type": "Repository",
                "id": 12345678,
                "name": "web",
                "active": true,
                "events": [
                  "push",
                  "pull_request"
                ],
                "config": {
                  "content_type": "json",
                  "insecure_ssl": "0",
                  "url": "https://example.com/webhook"
                },
                "updated_at": "2019-06-03T00:57:16Z",
                "created_at": "2019-06-03T00:57:16Z",
                "url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678",
                "test_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/test",
                "ping_url": "https://api.github.com/repos/octocat/Hello-World/hooks/12345678/pings",
                "last_response": {
                  "code": null,
                  "status": "unused",
                  "message": null
                }
              }
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>Updates a webhook configured in a repository. If you previously had a <code>secret</code> set, you must provide the same <code>secret</code> or set a new <code>secret</code> or the secret will be removed. If you are only updating individual webhook <code>config</code> properties, use \"<a href=\"/rest/reference/repos#update-a-webhook-configuration-for-a-repository\">Update a webhook configuration for a repository</a>.\"</p>",
        "statusCodes": [
          {
            "httpStatusCode": "200",
            "description": "<p>OK</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          },
          {
            "httpStatusCode": "422",
            "description": "<p>Validation failed</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "delete",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}",
        "title": "Delete a repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "descriptionHTML": "",
        "previews": [],
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}/pings",
        "title": "Ping a repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This will trigger a <a href=\"https://docs.github.com/enterprise-server@3.1/webhooks/#ping-event\">ping event</a> to be sent to the hook.</p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      },
      {
        "serverUrl": "http(s)://HOSTNAME/api/v3",
        "verb": "post",
        "requestPath": "/repos/{owner}/{repo}/hooks/{hook_id}/tests",
        "title": "Test the push repository webhook",
        "category": "webhooks",
        "subcategory": "repos",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "repo",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "descriptionHTML": ""
          },
          {
            "name": "hook_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "descriptionHTML": ""
          }
        ],
        "bodyParameters": [],
        "enabledForGitHubApps": true,
        "codeExamples": [
          {
            "key": "default",
            "request": {
              "description": "Example",
              "acceptHeader": "application/vnd.github.v3+json",
              "parameters": {
                "owner": "OWNER",
                "repo": "REPO",
                "hook_id": "HOOK_ID"
              }
            },
            "response": {
              "statusCode": "204",
              "description": "Response"
            }
          }
        ],
        "previews": [],
        "descriptionHTML": "<p>This will trigger the hook with the latest push to the current repository if the hook is subscribed to <code>push</code> events. If the hook is not subscribed to <code>push</code> events, the server will respond with 204 but no test POST will be generated.</p>\n<p><strong>Note</strong>: Previously <code>/repos/:owner/:repo/hooks/:hook_id/test</code></p>",
        "statusCodes": [
          {
            "httpStatusCode": "204",
            "description": "<p>No Content</p>"
          },
          {
            "httpStatusCode": "404",
            "description": "<p>Resource not found</p>"
          }
        ]
      }
    ]
  }
}
date: '2022-05-10'
release_candidate: true
deprecated: true
intro: |
  {% note %}
  
  **참고:** {% data variables.product.product_location %}이 릴리스 후보 빌드를 실행하는 경우 핫패치를 사용하여 업그레이드할 수 없습니다. 테스트 환경에서는 릴리스 후보만 실행하는 것이 좋습니다.
  
  {% endnote %}
  
  업그레이드 지침은 “[{% data variables.product.prodname_ghe_server %} 업그레이드](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)”를 참조하세요.
sections:
  features:
    - heading: 유지 관리 후 유효성 검사 테스트의 IP 예외 목록
      notes:
        # https://github.com/github/releases/issues/2109
        - |이제 유지 관리 모드를 사용하는 동안 GitHub Enterprise Server 인스턴스의 애플리케이션 서비스에 액세스할 수 있는 IP 주소 허용 목록을 구성할 수 있습니다. 허용된 IP 주소에서 인스턴스의 웹 인터페이스를 방문하는 관리자는 유지 관리 후에 그리고 유지 관리 모드를 끄기 전에 인스턴스 기능의 유효성을 검사할 수 있습니다. 자세한 내용은 "[유지 관리 모드 사용 설정 및 예약](/admin/configuration/configuring-your-enterprise/enabling-and-scheduling-maintenance-mode#validating-changes-in-maintenance-mode-using-the-ip-exception-list)"을 참조하세요.

|
    - heading: 사용자 지정 리포지토리 역할이 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/1945
        - |사용자 지정 리포지토리 역할이 제공되므로, 이제 조직에서는 사용자에게 부여할 수 있는 리포지토리 액세스 권한을 보다 세밀하게 제어할 수 있습니다. 자세한 내용은 "[조직의 사용자 지정 리포지토리 역할 관리](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)"를 참조하세요.



사용자 지정 리포지토리 역할은 조직 소유자가 만들며 해당 조직의 모든 리포지토리에서 사용할 수 있습니다. 각 역할의 사용자 지정 이름과 설명을 제공할 수 있습니다. 40개가 넘는 세밀한 권한 세트로 구성할 수 있습니다. 만든 후에는 리포지토리 관리자가 리포지토리의 사용자, 팀 또는 외부 협력자에게 사용자 지정 역할을 할당할 수 있습니다.



사용자 지정 리포지토리 역할은 조직 설정의 새 **리포지토리 역할** 탭을 통해 만들고, 살펴보고, 편집하고, 삭제할 수 있습니다. 조직 내에서 최대 3개의 사용자 지정 역할을 만들 수 있습니다. 



또한 사용자 지정 리포지토리 역할은 GitHub Enterprise Server REST API에서 완벽하게 지원됩니다. 조직 API를 사용하여 조직의 모든 사용자 지정 리포지토리 역할을 나열할 수 있으며, 개인 및 팀에게 리포지토리 액세스 권한을 부여하는 데 사용되는 기존 API는 사용자 지정 리포지토리 역할을 지원하도록 확장되었습니다. 자세한 내용은 REST API 설명서의 "[조직](/rest/reference/orgs#list-custom-repository-roles-in-an-organization)"을 참조하세요.

|
    - heading: 공개 베타 버전의 GitHub 컨테이너 레지스트리 
      notes: 
        # https://github.com/github/releases/issues/2005
         - |GHCR(GitHub 컨테이너 레지스트리)은 현재 공개 베타 버전의 GitHub Enterprise Server 3.5로 제공되며, 개발자에게 컨테이너를 게시, 다운로드 및 관리하는 기능을 제공합니다. GitHub 패키지 컨테이너 지원은 Docker 이미지를 호스트하는 OCI 표준을 구현합니다. 자세한 내용은 "[GitHub 컨테이너 레지스트리](/packages/working-with-a-github-packages-registry/working-with-the-container-registry)"를 참조하세요.

|
    - heading: Dependabot 업데이트가 일반 공급됨
      notes:
       # https://github.com/github/releases/issues/2089
        - |이제 Dependabot 버전 및 보안 업데이트가 GitHub Enterprise Server 3.5에 일반 공급됩니다. GitHub.com 리포지토리에서 작동하는 모든 인기 있는 에코시스템과 기능을 이제 GitHub Enterprise Server 인스턴스에 설치할 수 있습니다. GitHub Enterprise Server에서 Dependabot을 사용하려면 GitHub Actions 및 자체 호스팅 Dependabot 실행기 풀이 필요하며, 관리자가 GitHub Connect 및 Dependabot을 사용하도록 설정해야 합니다. 자세한 내용은 "[Dependabot 업데이트 설정](https://docs.github.com/en/enterprise-server@3.5/admin/github-actions/enabling-github-actions-for-github-enterprise-server/setting-up-dependabot-updates)"을 참조하세요.

|
    - heading: 공개 베타 버전의 Server Statistics
      notes:
        # https://github.com/github/releases/issues/2183
        - |이제 인스턴스의 사용 데이터를 검토하고 이 집계 데이터를 GitHub와 공유하여 팀의 작업 성과를 분석하고, GitHub Enterprise Server에서 얻는 가치를 이해하고, 제품을 개선할 수 있습니다. CSV 또는 JSON 파일로 데이터를 다운로드하거나 REST API를 통해 데이터에 액세스하여 자체 도구에서 시간 경과에 따른 사용량을 분석할 수 있습니다. 수집되는 집계 메트릭 목록을 보려면 "[Server Statistics 정보](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics#server-statistics-data-collected)"를 참조하세요. Server Statistics 데이터에는 개인 데이터와 코드, 이슈, 주석 또는 끌어오기 요청 콘텐츠와 같은 GitHub 콘텐츠가 포함되지 않습니다  Server Statistics 데이터를 저장하고 보호하는 방법에 대한 자세한 내용은 "[GitHub 보안](https://github.com/security)"을 참조하세요.  Server Statistics에 대한 자세한 내용은 "[팀이 Server Statistics로 작업하는 방식 분석](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics)"을 참조하세요. 이 기능은 공개 베타 버전으로 사용할 수 있습니다.

|
    - heading: 이제 GitHub Actions 속도 제한 구성 가능
      notes:
        # https://github.com/github/releases/issues/2123
        - |사이트 관리자는 이제 GitHub Actions의 속도 제한을 사용하고 구성할 수 있습니다. 기본적으로 속도 제한은 사용하지 않도록 설정됩니다. 사용 가능한 실행기에 워크플로 작업을 즉시 할당할 수 없는 경우 실행기를 사용할 수 있을 때까지 워크플로 작업이 큐에서 대기합니다. 그러나 GitHub Actions에 지속적으로 높은 부하가 걸리면 큐가 소모 가능한 속도보다 빠르게 백업할 수 있으며 GitHub Enterprise Server 인스턴스의 성능이 저하될 수 있습니다. 관리자가 속도 제한을 구성하면 이 문제를 피할 수 있습니다. 속도 제한이 초과되면 추가 워크플로 작업은 큐에 배치되지 않고 즉시 실패합니다. 속도가 임계값 아래로 안정화되면 새로운 실행을 다시 큐에 추가할 수 있습니다. 자세한 내용은 "[속도 제한 구성](/admin/configuration/configuring-your-enterprise/configuring-rate-limits#configuring-rate-limits-for-github-actions)"을 참조하세요.

|
    - heading: GitHub Actions에서 안전한 배포를 위한 OIDC(OpenID Connect) 지원
      notes:
        # https://github.com/github/releases/issues/2066
        - |이제 GitHub Enterprise Server의 GitHub Actions는 안전한 배포를 위한 OIDC를 지원합니다. OIDC는 배포마다 자동으로 회전되는 단기 토큰을 사용합니다. OIDC를 사용하면 다음 기능을 사용할 수 있습니다.



- 인스턴스에서 장기 클라우드 비밀을 저장할 필요 없이 클라우드 공급자와 GitHub Enterprise Server 간에 중단 없이 인증

- 클라우드 관리자는 특정 클라우드 공급자의 보안 메커니즘을 사용하여 GitHub Actions 워크플로의 클라우드 리소스 액세스를 최소화할 수 있습니다. GitHub Enterprise Server와 클라우드 간의 비밀 관리가 중복되지 않습니다.



자세한 내용은 "[배포 보안 강화](/actions/deployment/security-hardening-your-deployments)"를 참조하세요.

|
    - heading: 엔터프라이즈 내에서 GitHub Actions를 공유하는 기능이 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/2085
        - |이제 GitHub Enterprise Server 인스턴스에 있는 조직에게는 내부 리포지토리에서 GitHub Actions 지원이 일반 공급됩니다. 내부 리포지토리에서 작업을 공유하여 자동화를 이너소싱할 수 있습니다. 리포지토리의 설정을 관리하거나 REST API를 사용하여 조직 내 다른 리포지토리 또는 인스턴스의 모든 조직 내 워크플로에 액세스할 수 있습니다. 자세한 내용은 REST API 설명서의 "[엔터프라이즈와 작업 및 워크플로 공유](/actions/creating-actions/sharing-actions-and-workflows-with-your-enterprise)," "[리포지토리에 대한 GitHub Actions 설정 관리](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)" 및 "[작업 권한](/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)"을 참조하세요.

|
    - heading: 이제 GitHub Enterprise Server에서 GitHub Actions에 대한 캐시 지원이 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/2110
        - |이제 종속성 캐시를 사용하여 GitHub Actions 워크플로 속도를 높일 수 있습니다. 작업의 종속성을 캐시하려면 고유한 키로 캐시를 만들도록 [작업/캐시](https://github.com/actions/cache) 작업을 포함하면 됩니다. 같은 리포지토리에 있는 모든 워크플로 간에 캐시를 공유할 수 있습니다. 그러면 이러한 워크플로가 더 빠르게 캐시를 복원하고 실행할 수 있습니다.



또한 Actions 사용자는 캐시 API를 사용하여 다음을 수행할 수 있습니다.



- 리포지토리별로 허용되는 캐시 크기 범위에 대한 엔터프라이즈 정책을 정의합니다.

- 각 리포지토리 내의 캐시 사용량을 쿼리하고 모든 캐시의 총 크기가 상한에 도달하는지 모니터링합니다.

- 리포지토리의 캐시 요구 사항에 따라 허용되는 엔터프라이즈 제한 내에서 리포지토리의 최대 캐시 크기를 늘립니다.

- 조직 수준 또는 엔터프라이즈 수준에서 집계 캐시 사용량을 모니터링합니다.



엔터프라이즈 계정 내에서 구성된 외부 Blob 스토리지를 이제 워크플로 아티팩트, 로그 및 캐시 간에 공유할 수 있습니다. 자세한 내용은 "[워크플로 속도를 높이기 위한 종속성 캐싱](/actions/using-workflows/caching-dependencies-to-speed-up-workflows)"을 참조하세요.

|
    - heading: 웹 UI에서 만들어진 커밋에 자동 서명
      notes:
        # https://github.com/github/releases/issues/1963
        - |이제 파일을 편집하거나 끌어오기 요청을 병합하는 것처럼 웹 인터페이스에서 만들어진 커밋을 자동 서명하도록 GitHub Enterprise Server를 구성할 수 있습니다. 서명된 커밋은 변경 내용의 출처가 신뢰할 수 있는 소스라는 신뢰도를 높입니다. 이 기능은 [서명된 커밋 필요](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-signed-commits) 분기 보호 설정을 통해 웹 인터페이스에서 만들어진 커밋일지라도 서명되지 않으면 리포지토리에 들어가지 못하도록 차단하고, 서명된 커밋은 들어갈 수 있도록 허용할 수 있습니다. 자세한 내용은 "[웹 커밋 서명 구성](/admin/configuration/configuring-your-enterprise/configuring-web-commit-signing)"을 참조하세요.

|
    - heading: 언제든지 라이선스 사용량 동기화
      notes:
        # https://github.com/github/releases/issues/2201
        - |GitHub Connect를 사용하여 GitHub Enterprise Server와 GitHub Enterprise Cloud 간에 라이선스 사용량을 자동으로 동기화하는 고객은 이제 주간 자동 동기화에 관계없이 라이선스 사용량을 동기화할 수 있습니다. 이 기능은 동기화 작업의 상태도 보고합니다. 자세한 내용은 "[GitHub Enterprise Server와 GitHub Enterprise Cloud 간의 라이선스 사용량 동기화](/billing/managing-your-license-for-github-enterprise/syncing-license-usage-between-github-enterprise-server-and-github-enterprise-cloud#manually-syncing-license-usage)"를 참조하세요.

|
    - heading: GitHub Actions에 대한 재사용 가능 워크플로가 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/1767
        # https://github.com/github/releases/issues/1950
        # https://github.com/github/releases/issues/2114
          - |이제 재사용 가능 워크플로가 일반 공급됩니다. 재사용 가능 워크플로는 전체 워크플로를 마치 작업인 것처럼 재사용할 수 있게 하여 중복을 줄입니다. 이제 일반 공급 릴리스가 제공되므로, 개선된 여러 기능을 GitHub Enterprise Server에서 사용할 수 있습니다. 자세한 내용은 "[워크플로 다시 사용](/actions/using-workflows/reusing-workflows)"을 참조하세요.



- 출력을 활용하여 재사용 가능 워크플로의 데이터를 호출자 워크플로의 다른 작업에 전달할 수 있습니다.

- 환경 비밀을 재사용 가능 워크플로에 전달할 수 있습니다.

- 감사 로그에는 어떤 재사용 가능 워크플로가 사용되었는지 알려주는 정보가 포함됩니다.

- 경로와 파일 이름(`PATH/FILENAME`)만으로 호출 리포지토리와 동일한 리포지토리에 있는 재사용 가능 워크플로를 참조할 수 있습니다. 피호출 워크플로의 출처는 호출자 워크플로와 동일한 커밋입니다.

|
    - heading: 이제 GitHub Actions에 대한 자체 호스팅 실행기에서 자동 업데이트를 사용하지 않도록 설정 가능
      notes:
        # https://github.com/github/releases/issues/2014
        - |자체 호스팅 실행기가 소프트웨어 업데이트를 수행하는 시기를 보다 세밀하게 제어할 수 있습니다. 실행기에 `--disableupdate` 플래그를 지정하면 실행기는 더 최신 버전의 실행기가 있을 때 자동 소프트웨어 업데이트를 수행하지 않습니다. 이렇게 하면 원하는 일정에 따라 자체 호스팅 실행기를 업데이트할 수 있으며, 자체 호스팅 실행기가 컨테이너에 있을 때 특히 편리합니다.



 GitHub Actions 서비스와 호환되도록 새 실행기 버전이 출시된 후 30일 이내에 실행기를 수동으로 업데이트해야 합니다.  최신 실행기 버전을 설치하는 방법에 대한 지침은 [실행기 리포지토리의 최신 릴리스](https://github.com/actions/runner/releases)에 대한 설치 지침을 참조하세요.

|
    - heading: 워크플로를 제한하여 GitHub Actions에 대한 자체 호스팅 실행기 보호
      notes:
        # https://github.com/github/releases/issues/2013
        - |이제 조직 소유자는 실행기 그룹에 액세스할 수 있는 워크플로를 선택하여 자체 호스팅 실행기에서 CI/CD 워크플로의 보안을 강화할 수 있습니다. 이전에는 이슈 레이블 지정자와 같은 리포지토리의 모든 워크플로가 조직에서 사용 가능한 자체 호스팅 실행기에 액세스할 수 있었습니다. 자세한 내용은 "[그룹을 사용하여 자체 호스팅 실행기에 대한 액세스 관리](/actions/hosting-your-own-runners/managing-access-to-self-hosted-runners-using-groups#changing-what-workflows-can-access-a-runner-group)" 및 [GitHub 블로그](https://github.blog/2022-03-23-github-actions-secure-self-hosted-runners-specific-workflows/)를 참조하세요.

|
    - heading: GitHub Actions가 끌어오기 요청을 승인하지 않도록 차단
      notes:
        # https://github.com/github/releases/issues/1959
        - |이제 GitHub Actions가 끌어오기 요청을 승인할 수 있는지 여부를 제어할 수 있습니다. 이 기능은 "승인 필요" 분기 보호 요구 사항을 충족하기 위해 GitHub Actions를 사용하고 다른 사용자가 검토하지 않은 변경 내용을 병합하는 사용자로부터 보호합니다. 기존 워크플로가 손상되지 않도록 보호하기 위해 **GitHub Actions 리뷰를 승인 필요에 집계하도록 허용**이 기본적으로 사용됩니다. 조직 소유자는 조직의 GitHub Actions 설정에서 이 기능을 사용하지 않도록 설정할 수 있습니다. 자세한 내용은 "[조직에 대한 GitHub Actions 사용 안 함 또는 제한](/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-approving-pull-requests)"을 참조하세요.

|
    - heading: 실패한 또는 개별 GitHub Actions 작업 다시 실행
      notes:
        # https://github.com/github/releases/issues/1503
        - |이제 GitHub Actions 워크플로 실행에서 실패한 작업 또는 개별 작업을 다시 실행할 수 있습니다. 자세한 내용은 "[워크플로 및 작업 다시 실행](/actions/managing-workflow-runs/re-running-workflows-and-jobs)"을 참조하세요.

|
    - heading: 종속성 그래프가 GitHub Actions 지원
      notes:
        # https://github.com/github/releases/issues/1913
        - |이제 종속성 그래프는 GitHub Actions 워크플로에 대한 YAML 파일을 탐지합니다. GitHub Enterprise Server는 **인사이트** 탭의 종속성 그래프 섹션에 워크플로 파일을 표시합니다. 작업을 게시하는 리포지토리 역시 리포지토리 홈페이지의 "사용 대상" 컨트롤에서 해당 작업을 사용하는 리포지토리 수를 볼 수 있습니다. 자세한 내용은 "[종속성 그래프 정보](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)"를 참조하세요.

|
    - heading: 공개 베타 버전의 엔터프라이즈 보안 개요
      notes:
        # https://github.com/github/releases/issues/2040
        - |GitHub Advanced Security 고객은 이제 엔터프라이즈 수준에서 보안 경고 개요를 볼 수 있습니다. 엔터프라이즈 수준의 새로운 **보안** 탭은 리포지토리 중심의 애플리케이션 보안 위험 보기와 경고 중심의 비밀 검사 경고 보기를 제공합니다. 자세한 내용은 “[보안 개요 정보](/code-security/security-overview/about-the-security-overview)”를 참조하세요.

|
    - heading: 조직의 보안 보기가 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/2096
        - |이제 조직 수준의 보안 경고 개요가 일반 공급됩니다. GitHub Advanced Security 고객은 보안 개요를 사용하여 리포지토리 중심의 애플리케이션 보안 위험 보기 또는 경고 중심의 모든 코드 검사, Dependabot 및 조직 내 모든 리포지토리에 대한 비밀 검사 경고 보기를 볼 수 있습니다. 자세한 내용은 “[보안 개요 정보](/code-security/security-overview/about-the-security-overview)”를 참조하세요.

|
    - heading: 코드 검사에서 더 많은 보안 문제를 탐지하고 새 언어 버전 지원
      notes:
        # https://github.com/github/releases/issues/2097
        - |이제 코드 검사에서 수많은 CWE를 탐지하며, CodeQL 코드 검사는 다음 언어 릴리스의 표준 언어 기능을 완벽하게 지원합니다.



- C# 10/.NET 6

- Python 3.10

- Java 17

- TypeScript 4.5



자세한 내용은 [GitHub 블로그](https://github.blog/changelog/2022-02-25-code-scanning-detects-more-security-issues-supports-new-language-versions/)를 참조하세요.

|
    - heading: 조직 전체의 코드 검사 경고 보기
      notes:
        # https://github.com/github/releases/issues/1792
        - |GitHub Advanced Security 고객은 이제 조직의 **보안** 탭에서 코드 검사 경고를 볼 수 있습니다. 이 보기는 조직 소유자와 [보안 관리자 역할](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)이 있는 팀 구성원에게 제공됩니다. 자세한 내용은 “[보안 개요 정보](/code-security/security-overview/about-the-security-overview)”를 참조하세요.

|
        # https://github.com/github/releases/issues/1763
        - |이제 사용자는 REST API를 통해 GitHub Enterprise Server 인스턴스에서 조직에 대한 코드 검사 경고를 검색할 수 있습니다. 이 새 API 엔드포인트는 기존 [리포지토리용 엔드포인트](/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)를 보완합니다. 자세한 내용은 REST API 설명서의 [코드 스캐닝](/rest/code-scanning)을 참조하세요.

|
    - heading: 비밀 검사를 푸시 보호로 제공
      notes:
        # 
        - |이제 GitHub Enterprise Server는 신뢰도가 높은 토큰이 탐지되는 푸시를 차단할 수 있습니다. 개발자는 웹 UI를 통해 비밀을 커밋해야 하는 이유를 설명하는 세부 정보를 제공하여 차단을 우회할 수 있습니다. 자세한 내용은 "[비밀 검사를 사용하여 푸시 보호](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)"를 참조하세요.

|
    - heading: 비밀 검사를 사용하여 고객 패턴에 대한 시험 실행
      notes:
        # https://github.com/github/releases/issues/1703
        # https://github.com/github/releases/issues/2084
        - |이제 GitHub Advanced Security 고객은 조직 또는 리포지토리 수준에서 사용자 지정 비밀 검사 패턴을 시험 실행할 수 있습니다. 소유자 또는 관리자 액세스 권한이 있는 사람은 패턴을 게시하고 경고를 만들기 전에 시험 실행을 통해 패턴을 검토하고 개선할 수 있습니다. 패턴을 만든 다음, **저장 및 시험 실행**을 사용하여 결과를 검색할 수 있습니다. 이 검사는 일반적으로 몇 초밖에 걸리지 않지만, GitHub Enterprise Server는 시험 실행 결과가 나오면 이메일을 통해 조직 소유자 또는 리포지토리 관리자에게 알립니다. 자세한 내용은 "[비밀 검사 정보](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)" 및 "[비밀 검사를 위한 사용자 지정 패턴 정의](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)"를 참조하세요.

|
    - heading: 이제 감사 로그에 비밀 검사 사용자 지정 패턴 이벤트 포함
      notes:
        # https://github.com/github/releases/issues/2154
        - |이제 비밀 검사 사용자 지정 패턴과 관련된 이벤트는 감사 로그에 포함됩니다. 이 데이터는 GitHub Advanced Security 고객이 보안 및 규정 준수 감사를 위해 [리포지토리](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#repository_secret_scanning_custom_pattern-category-actions)-, [조직](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#org_secret_scanning_custom_pattern-category-actions)- 또는 [엔터프라이즈](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_custom_pattern-category-actions) 수준 사용자 지정 패턴에서 수행된 작업을 이해하는 데 도움이 됩니다. 자세한 내용은 "[조직에 대한 감사 로그 검토](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization)" 또는 "[엔터프라이즈에 대한 감사 로그 검토](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise)"를 참조하세요.

|
    - heading: 사용자 지정 리포지토리 역할을 사용하여 비밀 검사에 대한 권한 구성
      notes:
        # https://github.com/github/releases/issues/1909
        - |이제 사용자 지정 리포지토리 역할을 관리할 때 비밀 검사에 대한 두 가지 새 권한을 구성할 수 있습니다.



- 비밀 검사 결과 보기

- 비밀 검사 결과 해제 또는 다시 열기



자세한 내용은 "[조직의 사용자 지정 리포지토리 역할 관리](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)"를 참조하세요.

|
    - heading: 이제 비밀 검사에서 보관 리포지토리 지원
      notes:
        # https://github.com/github/releases/issues/2076
        - |이제 GitHub Advanced Security 고객은 UI 및 API를 통해 보관 리포지토리에 비밀 검사를 사용하도록 설정할 수 있습니다. 자세한 내용은 REST API 설명서의 "[비밀 검사 정보](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)," "[보관 리포지토리 정보](/repositories/archiving-a-github-repository/archiving-repositories)" 및 "[리포지토리](/rest/repos/repos#update-a-repository)"를 참조하세요.

|
    - heading: 경고 위치에 대한 비밀 검사 webhook
      notes:
        # https://github.com/github/releases/issues/2149
        - |이제 비밀 검사를 사용하는 GitHub Advanced Security 고객은 새 위치에서 비밀이 탐지될 때마다 webhook를 수신하도록 선택할 수 있습니다. `secret_scanning_alert_location` webhook 이벤트에는 커밋 SHA 같은 위치 세부 정보와 탐지 관련 경고가 포함됩니다. 탐지된 비밀을 포함하고 있는 새 파일 경로마다 위치가 만들어집니다. 자세한 내용은 "[Webhook 이벤트 및 페이로드](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret_scanning_alert_location)"를 참조하세요.

|
    - heading: 조직의 Dependabot 경고 보기
      notes:
        # https://github.com/github/releases/issues/1992
        - |이제 GitHub Advanced Security 고객은 조직의 **보안** 탭에서 Dependabot 경고를 볼 수 있습니다. 이 보기는 조직 소유자와 [보안 관리자 역할](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)이 있는 팀 구성원에게 제공됩니다. 자세한 내용은 “[보안 개요 정보](/code-security/security-overview/about-the-security-overview)”를 참조하세요.

|
    - heading: 사용자 지정 리포지토리 역할을 사용하여 Dependabot 경고에 대한 권한 구성
      notes:
        # https://github.com/github/releases/issues/1958
        - |이제 사용자 지정 리포지토리 역할을 관리할 때 Dependabot 경고에 대한 두 가지 새 권한을 구성할 수 있습니다.



- Dependabot 경고 보기

- Dependabot 경고 해제 또는 다시 열기



자세한 내용은 "[조직의 사용자 지정 리포지토리 역할 관리](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)"를 참조하세요.

|
    - heading: 해제된 Dependabot 경고 다시 열기
      notes:
        # https://github.com/github/releases/issues/1923
        - |이제 닫힌 경고에 대한 UI 페이지를 통해 해제된 Dependabot 경고를 다시 열 수 있습니다. 이렇게 해도 Dependabot 끌어오기 요청 또는 GraphQL API에 영향을 주지 않습니다. 자세한 내용은 "[Dependabot 경고 정보](/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)"를 참조하세요.

|
    - heading: Dependabot 버전 업데이트에 대한 Pub 지원이 현재 공개 베타 버전
      notes:
        # https://github.com/github/releases/issues/2086
        - |이제 Dependabot 버전 업데이트 사용자는 Pub 패키지 관리자를 사용하는 Flutter 또는 Dart 프로젝트의 종속성을 선제적으로 업데이트할 수 있습니다.  



자체 Dart 또는 Flutter 리포지토리에서 [버전 업데이트](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates)를 테스트하려면 다음 구성 파일을 <code>[.github/dependabot.yaml](/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates#enabling-dependabot-version-updates)</code>에 추가합니다. `package-ecosystem: "pub"` 및 `enable-beta-ecosystems: true` 플래그에 주목하세요.

```yaml

version: 2

enable-beta-ecosystems: true

updates:

  - package-ecosystem: "pub"

    directory: "/"

    schedule:

      interval: "weekly"

```

|
    - heading: GraphQL API를 통해 리포지토리의 Dependabot 경고와 관련된 끌어오기 요청 보기
      notes:
        # https://github.com/github/releases/issues/2088
        - |새로운 `DependabotUpdate` GraphQL 개체를 통해 리포지토리의 보안 업데이트에 발생한 일에 대한 정보를 볼 수 있습니다. GitHub Enterprise Server가 리포지토리의 종속성이 취약하다는 것을 탐지하면 Dependabot은 끌어오기 요청을 열어서 해당 종속성을 취약하지 않은 버전으로 업데이트하려고 시도합니다. 이제 취약성을 수정하는 끌어오기 요청을 볼 수 있습니다. 경우에 따라 Dependabot이 끌어오기 요청을 여는 데 실패할 때도 있습니다. 이전에는 Dependabot이 생성한 오류 메시지를 **보안** 탭의 "Dependabot 경고" 섹션에서만 볼 수 있었습니다. 이제는 Dependabot이 보안 경고에 대한 끌어오기 요청을 열려고 시도하다가 오류가 발생하면 GraphQL API를 사용하여 이유를 확인할 수 있습니다. 자세한 내용은 GraphQL API 설명서의 "[개체](/graphql/reference/objects#dependabotupdate)"를 참조하세요.

|
    - heading: GraphQL API를 통해 Dependabot 경고에 대한 더 많은 정보에 액세스
      notes:
        # https://github.com/github/releases/issues/1922
        - |이제 GraphQL API를 통해 Dependabot에서 수정된 경고를 볼 수 있습니다. 또한 상태 및 고유한 숫자 식별자를 기준으로 액세스하고 필터링할 수 있으며, 취약성 경고 개체를 상태로 필터링할 수 있습니다. 이제 `RepositoryVulnerabilityAlert`에 대한 다음 필드가 있습니다.



- `number`

- `fixed_at`

- `fix_reason`

- `state`



자세한 내용은 GraphQL API 설명서의 "[개체](/graphql/reference/objects#repositoryvulnerabilityalert)"를 참조하세요.

|
    - heading: Git 이벤트가 엔터프라이즈 감사 로그에 표시
      notes:
        # https://github.com/github/releases/issues/2205
        - |이제 다음과 같은 Git 관련 이벤트가 엔터프라이즈 감사 로그에 표시됩니다. 기능을 사용하도록 설정하고 감사 로그 보존 기간을 설정하면 UI 및 API를 통해 새 이벤트를 검색하거나 JSON 또는 CSV를 통해 내보낼 수 있습니다.



- `git.clone`

- `git.fetch`

- `git.push`



기록되는 Git 이벤트 수가 많기 때문에 인스턴스의 파일 스토리지를 모니터링하고 관련 경고 구성을 검토하는 것이 좋습니다. 자세한 내용은 "[엔터프라이즈에 대한 감사 로그 구성](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/configuring-the-audit-log-for-your-enterprise#managing-git-events-in-the-audit-log)"을 참조하세요.

|
    - heading: CODEOWNERS의 향상된 기능
      notes:
        # https://github.com/github/releases/issues/1994
        - |이 릴리스에는 CODEOWNERS의 향상된 기능이 포함되어 있습니다.



- 이제 웹에서 CODEOWNERS 파일을 볼 때 구문 오류가 표시됩니다. 이전에는 CODEOWNERS 파일의 줄에 구문 오류가 있어도 무시되거나 경우에 따라 CODEOWNERS 파일 전체가 로드되지 않았습니다. GitHub 앱 및 작업은 새로운 REST 및 GraphQL API를 사용하여 동일한 오류 목록에 액세스할 수 있습니다. 자세한 내용은 REST API 설명서의 "[리포지토리](/rest/repos/repos#list-codeowners-errors)" 또는 GraphQL API 설명서의 "[개체](/graphql/reference/objects#repositorycodeowners)"를 참조하세요.

- 이제 누군가가 새 끌어오기 요청을 만들거나 새 변경 내용을 초안 끌어오기 요청으로 푸시하면 검토 요청을 받게 될 코드 소유자가 "검토자" 아래의 끌어오기 요청에 나열됩니다. 이 기능을 통해 끌어오기 요청 검토 준비가 완료된 것으로 표시되면 누가 검토 요청을 받게 되는지 일찍 알 수 있습니다.

- 이제 CODEOWNERS 파일의 주석이 전용 줄뿐 아니라 줄 끝에도 표시될 수 있습니다.



자세한 내용은 "[코드 소유자 정보](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)"를 참조하세요.

|
    - heading: 끌어오기 요청의 토픽 분기를 최신 상태로 유지하는 방법 추가
      notes:
        # https://github.com/github/releases/issues/1566
        - |끌어오기 요청 페이지의 **분기 업데이트** 단추를 사용하여 끌어오기 요청의 분기를 베이스 분기의 최신 변경 내용으로 업데이트할 수 있습니다. 이 기능은 병합하기 전에 변경 내용이 현재 버전의 베이스 분기와 호환되는지 확인하는 데 유용합니다. 두 가지 향상된 기능이 분기를 최신 상태로 유지할 수 있는 더 많은 방법을 제공합니다.



- 끌어오기 요청의 토픽 분기가 오래된 베이스 분기인 경우 이제 최신 버전의 베이스 분기로 다시 지정하여 토픽 분기를 업데이트할 수 있습니다. 재지정은 분기의 변경 내용을 최신 버전의 베이스 분기에 적용하며, 병합 커밋이 만들어지지 않으므로 분기의 기록이 선형적이게 됩니다. 재지정을 통해 업데이트하려면 **분기 업데이트** 단추 옆에 있는 드롭다운 메뉴를 클릭하고 **다시 지정을 사용하여 업데이트**를 클릭한 다음, **분기 다시 지정**을 클릭합니다. 이전에는 **분기 업데이트**가 항상 끌어오기 요청 분기에서 병합 커밋이 만들어지는 기존 병합을 수행했습니다. 이 옵션이 여전히 제공되지만, 이제는 선택할 수 있습니다. 자세한 내용은 "[끌어오기 요청을 베이스 분기와 동기화 상태로 유지](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/keeping-your-pull-request-in-sync-with-the-base-branch)"를 참조하세요.



- 새 리포지토리 설정에서는 끌어오기 요청의 토픽 분기가 최신 베이스 분기가 아닐 때 항상 **분기 업데이트** 단추를 사용할 수 있습니다. 이전에는 **병합 전 분기 업데이트 필요** 분기 보호 설정이 사용되는 경우에만 이 단추를 사용할 수 있었습니다. 관리자 또는 유지 관리자 액세스 권한이 있는 사람은 리포지토리 설정의 **끌어오기 요청** 섹션에서 **항상 끌어오기 요청 분기 업데이트 제안** 설정을 관리할 수 있습니다. 자세한 내용은 "[끌어오기 요청 분기를 업데이트하는 제안 관리](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-suggestions-to-update-pull-request-branches)"를 참조하세요.

|
    - heading: GitHub Pages 사이트의 사용자 지정 HTTP 헤더 구성
      notes: 
        # https://github.com/github/releases/issues/2124
        - |이제 GitHub Enterprise Server 인스턴스가 서비스하는 모든 GitHub Pages 사이트에 적용되는 사용자 지정 HTTP 헤더를 구성할 수 있습니다. 자세한 내용은 "[엔터프라이즈에 대한 GitHub Pages 구성](/admin/configuration/configuring-your-enterprise/configuring-github-pages-for-your-enterprise#configuring-github-pages-response-headers-for-your-enterprise)"을 참조하세요.

|
    - heading: Blame 보기에서 커밋 무시
      notes:
        # https://github.com/github/releases/issues/2090
        - |이제 리포지토리의 루트에 _.git-blame-ignore-revs_ 파일을 만들어 Blame 보기에서 수정 내용을 무시할 수 있습니다. 자세한 내용은 "[파일 보기](/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view)"를 참조하세요.

|
    - heading: 밝은 고대비 테마가 일반 공급됨
      notes:
        # https://github.com/github/releases/issues/2011
        - |전경 요소와 배경 요소의 대비 차이가 큰 밝은 고대비 테마가 이제 일반 공급됩니다. 자세한 내용은 "[테마 설정 관리](/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/managing-your-theme-settings)"를 참조하세요.

|
    - heading: 태그 보호 규칙
      notes:
        # https://github.com/github/releases/issues/1793
        - |이제 리포지토리 소유자는 태그 보호 규칙을 구성하여 리포지토리의 태그를 보호할 수 있습니다. 태그 보호 규칙을 통해 보호하면 지정된 이름 패턴과 일치하는 태그는 리포지토리의 유지 관리 또는 관리자 역할이 있는 사용자만이 만들고 삭제할 수 있습니다. 자세한 내용은 "[태그 보호 규칙 구성](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-tag-protection-rules)"을 참조하세요.

|
  bugs:
    # https://github.com/github/releases/issues/1934
    - |이제 GitHub 앱이 릴리스 자산을 업로드할 수 있습니다.

|
  changes:
    # https://github.com/github/releases/issues/2063
    - |OAuth 및 GitHub 앱에 디바이스 권한 부여 흐름을 사용하려면 해당 기능을 사용하도록 수동으로 설정해야 합니다. 이렇게 변경하면 통합업체가 위험을 인식하고 이 인증 형식의 지원 여부를 신중하게 결정할 수 있으므로 앱이 GitHub Enterprise Server 사용자를 목표로 한 피싱 공격에 사용될 가능성이 감소합니다. OAuth App 또는 GitHub App을 갖고 있거나 관리하고 있으며 디바이스 흐름을 사용하고 싶은 경우에는 앱의 설정 페이지에서 앱에 디바이스 흐름을 사용하도록 설정할 수 있습니다. 디바이스 흐름 API 엔드포인트는 이 기능이 설정되지 않은 앱에는 상태 코드 `400`으로 응답합니다. 자세한 내용은 "[OAuth 앱 권한 부여](/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow)"를 참조하세요.

|
    # https://github.com/github/releases/issues/2049
    - |이제 코드 검사 경고 페이지에는 항상 기본 분기에 대한 경고 상태와 정보가 표시됩니다. 사이드바에는 다른 분기의 경고 상태를 볼 수 있는 "영향을 받는 분기"라는 새로운 패널이 있습니다. 기본 분기에 경고가 없으면 경고 페이지에는 경고가 마지막으로 목격된 위치의 상태가 "분기에 있음" 또는 "끌어오기 요청에 있음"으로 표시됩니다. 이 향상된 기능 덕분에 코드 베이스에 적용된 경고 상태를 보다 쉽게 파악할 수 있습니다. 자세한 내용은 "[코드 검사 경고 정보](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-alert-details)"를 참조하세요.



경고 목록 페이지는 변하지 않았으며 `분기`로 필터링할 수 있습니다. 코드 검사 API를 사용하여 경고에 대한 보다 구체적인 분기 정보를 검색할 수 있습니다. 자세한 내용은 REST API 설명서의 "[코드 스캐닝](/rest/code-scanning)"을 참조하세요.

|
    # https://github.com/github/releases/issues/2050
    - |이제 코드 검사는 경고의 분석 원본에 대한 세부 정보를 표시합니다. 경고의 분석 원본이 여러 개이면 경고가 "영향을 받는 분기" 사이드바와 경고 타임라인에 표시됩니다. 마우스 커서를 "영향을 받는 분기" 사이드바의 분석 원본 아이콘 위로 이동하면 각 분석 원본의 경고 상태를 볼 수 있습니다. 경고의 분석 원본이 하나뿐인 경우에는 경고 페이지에 분석 원본에 대한 정보가 표시되지 않습니다. 이러한 향상된 기능 덕분에 경고를 보다 쉽게 이해할 수 있습니다. 특히 분석 원본이 여러 개 있는 경고를 이해하는 데 도움이 됩니다. 모노 리포지토리처럼 여러 분석 구성을 사용하는 설정에 특히 유용합니다. 자세한 내용은 "[코드 검사 경고 정보](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-analysis-origins)"를 참조하세요.

|
    # https://github.com/github/releases/issues/2071
    - |사용자 또는 조직이 소유한 리포지토리 목록에 필터 옵션 "템플릿"이 추가되어 템플릿 리포지토리를 더 쉽게 찾을 수 있습니다.

|
    # https://github.com/github/releases/issues/1947
    - |GitHub Enterprise Server는 PNG, JPG, GIF, PSD 및 SVG를 비롯한 여러 공통 이미지 형식을 표시할 수 있으며, 버전 간 차이점을 비교하는 여러 가지 방법을 제공합니다. 이제 끌어오기 요청에서 추가 또는 변경된 이미지를 검토할 때 기본적으로 이미지 미리 보기가 표시됩니다. 이전에는 이진 파일을 표시할 수 없다는 메시지가 표시되고 "리치 디프 표시" 옵션을 전환해야 했습니다. 자세한 내용은 "[비 코드 파일 사용](/repositories/working-with-files/using-files/working-with-non-code-files)"을 참조하세요.

|
    # https://github.com/github/releases/issues/2054
    - |이제 새 gist는 `main`의 기본 분기 이름 또는 사용자 설정에 정의된 대체 기본 분기 이름으로 만들어집니다. 이는 GitHub Enterprise Server에서 다른 리포지토리가 만들어지는 방식과 일치합니다. 자세한 내용은 "[분기 정보](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#about-the-default-branch)" 및 "[리포지토리의 기본 분기 이름 관리](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-personal-account-settings/managing-the-default-branch-name-for-your-repositories)"를 참조하세요.

|
    # https://github.com/github/releases/issues/2028
    - |이제 gist는 처음 표시될 때 가장 최신 댓글 30개만 표시합니다. **이전 댓글 로드...**를 클릭하면 더 많은 댓글을 볼 수 있습니다. 이렇게 바뀐 덕분에 댓글이 많은 gist가 더 빠르게 표시됩니다. 자세한 내용은 "[gist가 있는 콘텐츠의 편집 및 공유](/get-started/writing-on-github/editing-and-sharing-content-with-gists)"를 참조하세요.

|
    # https://github.com/github/releases/issues/2036
    - |사용자, 조직, 리포지토리 및 팀의 설정 페이지가 새로 디자인되었습니다. 비슷한 설정 페이지를 섹션으로 그룹화하여 정보 아키텍처와 검색 가능성을 향상했습니다. 자세한 내용은 [GitHub 변경 로그](https://github.blog/changelog/2022-02-02-redesign-of-githubs-settings-pages/)를 참조하세요. 

|
    # https://github.com/github/releases/issues/2129
    - |이제 포커스를 레이블로 이동하거나 마우스로 레이블을 가리키면 도구 설명에 레이블 설명이 표시됩니다.

|
    # https://github.com/github/releases/issues/1983
    - |이제 API에서 하든 웹 인터페이스에서 하든, 리포지토리 초대를 만들고 제거할 때 GitHub Enterprise Server 인스턴스에서 사용되는 속도 제한이 적용됩니다. 자세한 내용은 "[속도 제한 구성](/admin/configuration/configuring-your-enterprise/configuring-rate-limits)"을 참조하세요.

|
    # https://github.com/github/releases/issues/2291
    - |MinIO에서 2022년 6월 1일부터 MinIO Gateways를 제거한다고 발표했습니다. NAS용 MinIO Gateway는 Github Actions 및 Github Packages를 지원하는 스토리지 공급자 중 하나로 계속 남아 있겠지만, MinIO의 지원과 버그 픽스를 사용할 수 있도록 MinIO LTS 지원으로 전환하는 것이 좋습니다. 속도 제한에 대한 자세한 내용은 "[minio/minio 리포지토리에서 GCS, Azure, HDFS용 MinIO Gateway 제거 예정](https://github.com/minio/minio/issues/14331)"을 참조하세요.

|
  deprecations:
    - heading: 인증 토큰 형식 변경
      notes:
        # https://github.com/github/releases/issues/1235
        - |GitHub 인증 토큰 형식 변경으로 인해 GitHub Enterprise Server 3.1 이하 버전을 실행하는 인스턴스에 대해 6월 3일 이후에는 GitHub Connect가 더 이상 작동하지 않습니다. 자세한 내용은 [GitHub 변경 로그](https://github.blog/changelog/2021-03-31-authentication-token-format-updates-are-generally-available/)를 참조하세요.

|
    - heading: CodeQL CLI로 대체되는 CodeQL 실행기
      notes:
        # https://github.com/github/releases/issues/1632
        - |CodeQL 실행기가 CodeQL CLI로 대체됩니다. GitHub Enterprise Server 3.4 이상에는 더 이상 CodeQL 실행기가 포함되지 않습니다. 이 변경은 타사 CI/CD 시스템에서 CodeQL 코드 검사를 사용하는 사용자에게만 적용됩니다. GitHub Actions 사용자는 영향을 받지 않습니다. GitHub에서는 CodeQL 실행기의 기능을 완벽하게 대체할 뿐 아니라 다른 기능이 더 추가된 CodeQL CLI로 마이그레이션할 것을 강력하게 권장합니다. 자세한 내용은 "[CodeQL Runner에서 CodeQL CLI로 마이그레이션](/code-security/code-scanning/using-codeql-code-scanning-with-your-existing-ci-system/migrating-from-the-codeql-runner-to-codeql-cli)"을 참조하세요.

|
    - heading: GitHub Pages 테마 선택기가 제거되었습니다.
      notes:
        - |GitHub Pages 테마 선택기가 Pages 설정에서 제거되었습니다. GitHub Pages의 테마 구성에 대한 자세한 내용은 "[Jekyll을 사용하여 GitHub Pages 사이트에 테마 추가](/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll)"를 참조하세요.

|
  known_issues:
      - "사용자 없이 새로 설정된 {% data variables.product.prodname_ghe_server %} 인스턴스에서 공격자는 첫 번째 관리 사용자를 만들 수 있습니다."
      - 사용자 지정 방화벽 규칙은 업그레이드 프로세스 중에 제거됩니다.
      - "Git LFS 추적 파일[웹 인터페이스를 통해 업로드됨](https://github.com/blog/2105-upload-files-to-your-repositories)이 리포지토리에 직접 잘못 추가되었습니다."
      - 이슈에 동일한 리포지토리의 Blob에 대한 고정 링크가 포함되었지만 Blob의 파일 경로가 255자보다 긴 경우 해당 이슈를 종료할 수 없습니다.
      - GitHub Connect에서 “사용자가 GitHub.com을 검색할 수 있음”이 사용하도록 설정되면 프라이빗 및 내부 리포지토리의 이슈가 GitHub.com 검색 결과에 포함되지 않습니다.
      - "{% data variables.product.prodname_registry %} npm 레지스트리는 더 이상 메타데이터 응답에서 시간 값을 반환하지 않습니다. 이 작업은 성능을 크게 향상시키기 위해 수행되었습니다. 메타데이터 응답의 일부로 시간 값을 반환하는 데 필요한 모든 데이터를 계속 보유하고 있으며, 기존 성능 이슈가 해결되면 이 값의 반환을 다시 시작할 예정입니다."
      - 사전 수신 후크 처리에만 해당되는 리소스 한도로 인해 일부 사전 수신 후크가 실패할 수 있습니다.
      - 다른 호스트에서 수행된 백업에서 어플라이언스를 복원한 후에는 작업 서비스를 다시 시작해야 합니다.

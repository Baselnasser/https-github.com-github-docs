- term: '@멘션'
  description:
    사용자 이름 앞에 ‘@’을 사용하여 GitHub에서 사용자에게 알립니다. GitHub에서 조직의 사용자는 언급할 수 있는 팀의 일원이 될 수도 있습니다.
- term: 액세스 토큰
  description: >-
    명령줄 또는 API에서 Git을 사용하여 HTTPS를 통해 Git 작업을 수행할 때 암호 대신 사용되는 토큰입니다. 개인 액세스 토큰이라고도 합니다.
- term: API 미리 보기
  description: >-
    공식 GitHub API의 일부가 되기 전에 새로운 API와 기존 API 메서드의 변경 사항을 시험해보는 방법입니다.
- term: 어플라이언스
  description: >-
    산업 표준 하드웨어(일반적으로 서버) 또는 가상 컴퓨터에서 최적으로 실행하기에 충분한 운영 체제(JeOS)와 결합된 소프트웨어 애플리케이션입니다.
- term: assignee
  description: 이슈에 할당된 사용자입니다.
- term: 인증 코드
  description: >-
    브라우저를 통해 2FA로 로그인할 때 GitHub 암호 외에 제공할 코드입니다. 이 코드는 애플리케이션에서 생성되거나 문자 메시지를 통해 휴대폰으로 제공됩니다. “2FA 인증 코드”라고도 합니다.
- term: 베이스 분기
  description:
    끌어오기 요청을 병합할 때 변경 내용이 결합되는 분기입니다. 끌어오기 요청을 만들 때 필요한 경우 베이스 분기를 리포지토리의 기본 분기에서 다른 분기로 변경할 수 있습니다.
- term: 기본 인증
  description: >-
    자격 증명이 암호화되지 않은 텍스트로 전송되는 인증 방법입니다.
- term: 바이오
  description: >-
    프로필에 있는 사용자 생성 설명[프로필에 바이오 추가](/articles/adding-a-bio-to-your-profile)
- term: 청구 주기
  description: 특정 청구 플랜에 대한 시간 간격입니다.
- term: 청구 메일
  description: >-
    GitHub에서 영수증, 신용 카드 또는 PayPal 요금 및 기타 청구 관련 통신을 보내는 조직 메일 주소입니다.
- term: 청구 관리자
  description: 조직에 대한 청구 설정을 관리하는 조직 구성원입니다.
- term: 요금제
  description: >-
    각 플랜 유형에 대한 설정 기능을 포함하는 사용자 및 조직에 대한 지불 플랜입니다.
- term: 블레임
  description: >-
    Git의 “블레임” 기능은 일반적으로 수정 버전, 작성자 및 시간을 표시하는 파일의 각 줄에 대한 마지막 수정 내용을 설명합니다. 예를 들어 기능이 추가된 시점 또는 특정 버그를 발생시킨 커밋을 추적하는 데 유용합니다.
- term: block
  description: >-
    조직의 리포지토리에서 협업할 수 있는 사용자의 기능을 제거합니다.
- term: 분기
  description: >-
    분기는 리포지토리의 병렬 버전입니다. 리포지토리 내에 포함되어 있지만 주 또는 기본 분기에 영향을 주지 않으므로 "라이브" 버전을 중단하지 않고 자유롭게 작업할 수 있습니다. 원하는 내용을 변경한 경우 분기를 기본 분기에 다시 병합하여 변경 내용을 게시할 수 있습니다.
- term: 분기 제한
  description: >-
    리포지토리 관리자가 활성화할 수 있는 제한으로 특정 사용자나 팀만 분기를 밀어내거나 특정 변경을 수행할 수 있습니다.
- term: 비즈니스 플랜
  description: >-
    무제한 퍼블릭 및 프라이빗 리포지토리에서 협업하거나, 조직 구성원이 SAML SSO를 사용하여 GitHub로 인증하고 SAML 또는 SCIM을 사용하여 액세스를 프로비전 및 해제하도록 허용하거나 요청할 수 있는 조직 청구 플랜입니다.
- term: CA 인증서
  description: >-
    CA(인증 기관)이 발급한 디지털 인증서로, 사용자의 컴퓨터와 GitHub.com 같은 두 머신 간에 유효한 연결이 있는지 확인하고 사이트의 소유권을 확인합니다.
- term: 카드
  description: 문제 또는 끌어 오기 요청과 관련된 프로젝트 보드 내의 이동식 상자입니다.
- term: 검사
  description: >-
    검사는 {% data variables.product.product_name %}에 대한 상태 검사 유형입니다. “[상태 검사](#status-checks)”를 참조하세요.
- term: 체크 아웃
  description: >-
    명령줄에서 ‘git 체크 아웃’을 사용하여 새 분기를 만들거나, 현재 작업 분기를 다른 분기로 변경하거나, ‘git 체크 아웃 [분기 이름] [파일 경로]’가 있는 다른 분기에서 다른 버전의 파일로 전환할 수도 있습니다. “체크 아웃” 작업은 작업 트리의 전체 또는 일부를 개체 데이터베이스의 트리 개체 또는 Blob으로 업데이트하고 전체 작업 트리가 새 분기를 가리키는 경우 인덱스 및 HEAD를 업데이트합니다.
- term: cherry-picking
  description: >-
    일련의 변경 내용(일반적으로 커밋)에서 변경 내용의 하위 집합을 선택하고 다른 코드베이스 위에 새 변경 내용으로 기록합니다. Git에서 이는 다른 분기의 기존 커밋에 의해 도입된 변경 내용을 추출하고 현재 분기의 팁을 기준으로 새 커밋으로 기록하기 위해 ‘git cherry-pick’ 명령에 의해 수행됩니다. 자세한 내용은 Git 설명서의 [git-cherry-pick](https://git-scm.com/docs/git-cherry-pick)을 참조하세요.
- term: 자식 팀
  description: >-
    중첩된 팀 내에서 부모 팀의 액세스 권한 및 @멘션을 상속하는 하위 팀입니다.
- term: 클린
  description: >-
    작업 트리가 현재 HEAD에서 참조한 수정 버전에 해당하는 경우 클린 상태입니다. “더티”도 참조하세요.
- term: 복제
  description: >-
    복제는 웹 사이트의 서버가 아닌 컴퓨터에 있는 리포지토리의 복사본이거나 해당 복사본을 만드는 행위입니다. 복제를 만들 때 온라인 상태로 전환하지 않고도 기본 편집기에서 파일을 편집하고 Git을 사용하여 변경 내용을 추적할 수 있습니다. 복제한 리포지토리는 여전히 원격 버전에 연결되어 있으므로 로컬 변경 내용을 원격 버전으로 푸시하여 온라인 상태일 때 동기화 상태로 유지할 수 있습니다.
- term: 클러스터링
  description: >-
    여러 노드에서 GitHub Enterprise 서비스 및 부하 분산 요청을 실행하는 기능입니다.
- term: 코드 주파수 그래프
  description: >-
    리포지토리 기록에서 매주 콘텐츠 추가 및 삭제를 보여 주는 리포지토리 그래프입니다.
- term: 사용 규정
  description: 커뮤니티에 참여하는 방법에 대한 표준을 정의하는 문서입니다.
- term: 코드 소유자
  description: >-
    일부 리포지토리 코드의 소유자로 지정된 사람입니다. 다른 사람이 코드 소유자가 소유한 코드를 변경하는 끌어오기 요청(초안 모드가 아님)을 열면 코드 소유자에게 자동으로 검토를 요청합니다.
- term: 협력자
  description: >-
    협력자는 리포지토리 소유자가 기여하도록 초대받은 리포지토리에 대한 읽기 및 쓰기 권한을 가진 사람입니다.
- term: 커밋(commit)
  description: >-
    커밋 또는 “수정 버전”은 파일(또는 파일 집합)에 대한 개별 변경 내용입니다. 작업을 저장하기로 커밋하는 경우 커밋된 특정 변경 내용을 해당 변경을 수행한 사람 및 시기와 함께 기록할 수 있도록 고유한 ID(즉, “SHA” 또는 “해시”)를 사용합니다. 커밋에는 일반적으로 변경된 내용에 대한 간략한 설명인 커밋 메시지가 포함됩니다.
- term: 커밋 작성자
  description: 커밋을 수행한 사용자입니다.
- term: 커밋 그래프
  description: >-
    지난 한 해 동안 리포지토리에 수행된 모든 커밋을 보여 주는 리포지토리 그래프입니다.
- term: 커밋 ID
  description: SHA라고도 합니다. 커밋을 식별하는 40자 체크섬 해시입니다.
- term: 커밋 메시지
  description: >-
    커밋을 수반하고 커밋이 도입하는 변경 내용을 전달하는 짧은 설명 텍스트입니다.
- term: 비교 분기
  description: >-
    끌어오기 요청을 만드는 데 사용하는 분기입니다. 이 분기는 끌어오기 요청에 대해 선택하는 베이스 분기와 비교되며 변경 내용이 식별됩니다. 끌어오기 요청이 병합되면 베이스 분기가 비교 분기의 변경 내용으로 업데이트됩니다. 끌어오기 요청의 “헤드 분기”라고도 합니다.
- term: 연속 통합
  description: >-
    CI라고도 합니다. 한 사람이 GitHub에 구성된 리포지토리에 대한 변경 내용을 커밋하면 자동화된 빌드를 실행하고 테스트하는 프로세스입니다. CI는 오류를 감지하는 데 도움이 되는 소프트웨어 개발의 일반적인 모범 사례입니다.
- term: 기여 그래프
  description: >-
    최대 1년 동안 매일의 기여도를 보여 주는 사용자 프로필의 일부입니다.
- term: 기여 지침
  description: 사람들이 프로젝트에 어떻게 기여해야 하는지 설명하는 문서입니다.
- term: 기여
  description: >-
    GitHub의 특정 활동: - 사용자의 기여 그래프에 정사각형 추가: “[기여로 간주되는 것](/articles/viewing-contributions-on-your-profile/#what-counts-as-a-contribution)” - 프로필의 사용자 타임라인에 활동 추가: “[기여 활동](/articles/viewing-contributions-on-your-profile/#contribution-activity)”
- term: 기여자
  description: >-
    기여자는 리포지토리에 대한 협력자 액세스 권한이 없지만 프로젝트에 기여했으며 리포지토리에 병합된 끌어오기 요청을 받은 사람입니다.
- term: 기여자 그래프
  description: 리포지토리에 상위 100명의 기여자를 표시하는 리포지토리 그래프입니다.
- term: 쿠폰
  description: >-
    사용자 또는 조직에서 구독의 전부 또는 일부를 지불하는 데 사용할 수 있는 GitHub 제공 코드입니다.
- term: cron
  description: Unix와 같은 컴퓨터 운영 체제의 시간 기반 작업 스케줄러입니다.
- term: cURL
  description: 명령줄 또는 스크립트에서 데이터를 전송하는 데 사용됩니다.
- term: dashboard
  description: >-
    개인 대시보드는 GitHub에 있는 활동의 기본 허브입니다. 개인 대시보드에서 팔로우하거나 작업 중인 이슈 또는 끌어오기 요청을 추적하고, 상위 리포지토리 및 팀 페이지로 이동하고, 보고 있거나 참여하고 있는 리포지토리의 최근 활동에 대해 알아볼 수 있습니다. 팔로우 중인 사용자 및 별표가 표시된 리포지토리에 따라 권장되는 새 리포지토리를 검색할 수도 있습니다. 특정 조직의 활동만 보려면 조직의 대시보드를 방문하세요. 자세한 내용은 “[개인 대시보드 정보](/articles/about-your-personal-dashboard)” 또는 “[조직 대시보드 정보](/articles/about-your-organization-dashboard)”를 참조하세요.
- term: 기본 분기
  description: >-
    리포지토리의 새 끌어오기 요청 및 코드 커밋에 대한 베이스 분기입니다. 각 리포지토리에는 리포지토리를 초기화할 때 Git에서 만드는 최소 한 개의 분기가 있습니다. 첫 번째 분기는 일반적으로 {% ifversion ghes < 3.2 %}’마스터’{% else %}’메인’{% endif %}이라고 하며 종종 기본 분기입니다.
- term: 종속성 그래프
  description: >-
    퍼블릭 리포지토리에 종속된 패키지, 프로젝트, 리포지토리를 표시하는 리포지토리 그래프입니다.
- term: 종속성 그래프
  description: >-
    리포지토리가 종속된 패키지 및 프로젝트를 표시하는 리포지토리 그래프입니다.
- term: 배포 키
  description: >-
    배포 키는 서버에 저장되고 단일 GitHub 리포지토리에 대한 액세스 권한을 부여하는 SSH 키입니다. 이 키는 개인 사용자 계정이 아닌 리포지토리에 직접 연결됩니다.
- term: 분리된 HEAD
  description: >-
    분리된 HEAD에서 작업하는 경우 Git에서 경고합니다. 즉, Git가 분기를 가리키지 않고 수행한 커밋이 커밋 기록에 표시되지 않습니다.  예를 들어 특정 분기의 최신 커밋이 아닌 임의 커밋을 체크 아웃하면 "분리된 HEAD"에서 작업하게 됩니다.
- term: 진단
  description: GitHub Enterprise 인스턴스의 설정 및 환경에 대한 개요입니다.
- term: diff
  description: >-
    diff는 두 커밋 간의 변경 내용 또는 저장된 변경 내용의 차이입니다. diff는 마지막 커밋 이후 파일에서 추가되거나 제거된 내용을 시각적으로 설명합니다.
- term: directory
  description: >-
    하나 이상의 파일 또는 폴더를 포함하는 폴더입니다. 디렉토리를 만들어 리포지토리의 콘텐츠를 구성할 수 있습니다.
- term: 더티
  description: >-
    현재 분기에 커밋되지 않은 수정 사항이 포함된 경우 작업 트리는 “더티”로 간주됩니다.
- term: 메일 알림
  description: 사용자의 메일 주소로 전송된 알림입니다.
- term: 엔터프라이즈 계정
  description: "엔터프라이즈 계정을 사용하면 여러 조직에 대한 정책 및 청구를 중앙집중적으로 관리할 수 있습니다. {% data reusables.gated-features.enterprise-accounts %}"
- term: Explorer
  description: >-
    GraphQL의 인스턴스, 즉 “그래픽 대화형 브라우저 내 GraphQL IDE”입니다.
- term: 빠른 전달
  description: >-
    빠른 전달은 수정 버전이 있고 보유하고 있는 항목의 하위 항목인 다른 분기의 변경 내용을 “병합”하는 특수한 유형의 병합입니다. 이 경우 새 병합 커밋을 수행하지 않고 이 수정 버전으로 업데이트합니다. 이는 원격 리포지토리의 원격 추적 분기에서 자주 발생합니다.
- term: 기능 분기
  description: >-
    새 기능을 실험하거나 프로덕션 환경에 없는 이슈를 해결하는 데 사용되는 분기입니다. 토픽 분기라고도 합니다.
- term: 울타리친 코드 블록
  description: "코드 블록 앞과 뒤의 삼중 역따옴표(\\`\\`\\`)를 사용하여 GitHub Flavored Markdown으로 만들 수 있는 들여쓰기 코드 블록입니다. 이 [예제](/articles/creating-and-highlighting-code-blocks#fence-code-blocks)를 참조하세요."
- term: fetch
  description: >-
    ‘git fetch’를 사용하는 경우 원격 리포지토리의 변경 내용을 커밋하지 않고 로컬 작업 분기에 추가합니다. ‘git pull’과 달리 가져오기를 사용하면 변경 내용을 로컬 분기에 커밋하기 전에 검토할 수 있습니다.
- term: 다음(사용자)
  description: 다른 사용자의 기여 및 활동에 대한 알림을 받는 것입니다.
- term: 강제 푸시
  description: >-
    충돌에 관계없이 로컬 변경 사항으로 원격 리포지토리를 덮어쓰는 Git 푸시입니다.
- term: 포크
  description: >-
    포크는 계정에 있는 다른 사용자 리포지토리의 개인 복사본입니다. 포크를 사용하면 원래 업스트림 리포지토리에 영향을 주지 않고 프로젝트를 자유롭게 변경할 수 있습니다. 또한 두 리포지토리가 여전히 연결되어 있으므로 업스트림 리포지토리에서 끌어오기 요청을 열고 포크를 최신 변경 내용과 동기화 상태로 유지할 수 있습니다.
- term: 무료 요금제
  description: >-
    무료 사용자 계정 청구 플랜입니다. 사용자는 여러 협력자(제한 없음)와 무제한 공개 리포지토리에서 협업할 수 있습니다.
- term: gist
  description: >-
    gist는 GitHub에서 편집, 복제 및 포크할 수 있는 공유 가능한 파일입니다. gist를 {% ifversion ghae %}내부{% else %}공개{% endif %} 또는 비밀로 만들 수 있지만 비밀 gist는 URL을 통해 {% ifversion ghae %}모든 엔터프라이즈 구성원{% else %}모든 사람{% endif %}에게 제공됩니다.
- term: Git
  description: >-
    Git에서는 텍스트 파일의 변경 내용을 추적하기 위한 오픈 소스 프로그램입니다. 이는 Linux 운영 체제의 작성자에 의해 작성되었으며 소셜 및 사용자 인터페이스인 GitHub를 구축하는 기반이 되는 핵심 기술이다.
- term: GitHub 앱
  description: >-
    GitHub 앱은 전체 조직에 서비스를 제공하고 해당 기능을 수행할 때 고유의 ID를 사용합니다. 조직 및 사용자 계정에 직접 설치하고 특정 리포지토리에 대한 액세스 권한을 부여할 수 있습니다. 세분화된 사용 권한과 기본 제공 웹후크가 함께 제공됩니다.
- term: GitHub Flavored Markdown
  description: "GitHub 산문과 코드의 서식을 지정하는 데 사용되는 GitHub 특정 Markdown입니다. [GitHub Flavored Markdown 사양](https://github.github.com/gfm/) 또는 [GitHub에서 쓰기 및 서식 지정 시작하기](/articles/getting-started-with-writing-and-formatting-on-github)를 참조하세요."
- term: GitHub 가져오기 도구
  description: >-
    커밋 및 수정 기록을 포함한 소스 코드 리포지토리를 사용자를 위한 GitHub로 빠르게 가져오는 도구입니다.
- term: GitHub 작업
  description: >-
    고용주가 GitHub 사용자가 관심을 가지고 있는 작업을 게시할 수 있는 GitHub 사이트입니다.
- term: GitHub Marketplace
  description: >-
    GitHub 사용자와 조직에서 워크플로우를 확장하고 보완하는 애플리케이션을 구입하고 설치할 수 있는 하위 사이트입니다.
- term: GitHub Pages
  description: >-
    페이지라고도 합니다. GitHub 리포지토리에서 직접 개인, 조직 또는 프로젝트 페이지를 호스팅하도록 설계된 정적 사이트 호스팅 서비스입니다.
- term: GitHub Wiki
  description: GitHub 리포지토리에서 위키 스타일 문서를 호스팅하기 위한 섹션입니다.
- term: gitfile
  description: >-
    항상 작업 트리의 루트에 있으며 전체 Git 리포지토리와 해당 메타 데이터가 있는 Git 디렉터리를 가리키는 일반 ‘.git’ 파일입니다. 명령줄에서 ‘git rev-parse --git-dir’을 사용하여 리포지토리에 대한 이 파일을 볼 수 있으며, 이는 실제 리포지토리입니다.
- term: GraphQL
  description: >-
    API에 대한 쿼리 언어와 기존 데이터로 해당 쿼리를 수행하기 위한 런타임입니다.
- term: HEAD
  description: "분기에서 정의된 커밋이며, 일반적으로 분기의 끝에 있는 가장 최근의 커밋입니다."
- term: 헤드 분기
  description: 끌어오기 요청을 병합할 때 변경 내용이 베이스 분기에 결합되는 분기입니다. “분기 비교”라고도 합니다.
- term: 'Hello, World'
  description: >-
    “Hello, World!” 프로그램은 “Hello, World!”를 출력하거나 사용자에게 표시하는 컴퓨터 프로그램입니다. 이 프로그램은 일반적으로 매우 간단하기 때문에 프로그래밍 언어의 기본 구문의 예제로 자주 사용되며 새 프로그래밍 언어를 학습하기 위한 일반적인 첫 번째 연습이 됩니다.
- term: 고가용성
  description: >-
    안정적으로 긴 시간 동안 지속적으로 작동하는 시스템 또는 구성 요소입니다.
- term: 후크
  description: >-
    여러 Git 명령을 정상적으로 실행하는 동안 개발자가 기능 또는 검사를 추가할 수 있도록 하는 선택적 스크립트에 대한 호출이 수행됩니다. 일반적으로 후크를 사용하면 명령이 미리 확인되고 잠재적으로 중단될 수 있으며 작업이 완료된 후 사후 알림을 허용합니다.
- term: hostname
  description: >-
    네트워크에 연결된 디바이스의 주소에 해당하는, 사람이 읽을 수 있는 애칭입니다.
- term: 아이덴티콘
  description: >-
    사용자가 GitHub에 등록할 때 기본 프로필 사진으로 사용된 자동 생성 이미지입니다. 사용자는 자신의 아이덴티콘을 자신의 프로필 사진으로 바꿀 수 있습니다.
- term: ID 공급자
  description: >-
    IdP라고도 합니다. SAML SSO(Single Sign-On)를 사용하여 다른 웹 사이트에 액세스할 수 있는 신뢰할 수 있는 공급자입니다.
- term: instance
  description: >-
    조직이 구성하고 제어하는 가상 머신에 포함된 조직의 GitHub 프라이빗 복사본입니다.
- term: 통합
  description: >-
    GitHub와 통합하는 타사 애플리케이션입니다. GitHub 앱, OAuth 앱 또는 웹후크일 수 있습니다.
- term: 이슈
  description: >-
    이슈는 리포지토리와 관련하여 제안된 개선 사항, 작업 또는 질문입니다. 이슈는 누구나(공개 리포지토리의 경우) 만들 수 있으며 리포지토리 협력자가 조정합니다. 각 이슈에는 자체 토론 스레드가 포함됩니다. 레이블 관련 이슈를 분류하고 다른 사람에게 할당할 수도 있습니다.
- term: Jekyll
  description: "개인, 프로젝트 또는 조직 사이트에 대한 정적 사이트 생성기입니다."
- term: Jekyll 테마 선택기
  description: >-
    CSS 파일을 편집하거나 복사하지 않고 Jekyll 사이트의 시각적 테마를 선택하는 자동화된 방식입니다.
- term: 키 지문
  description: 더 긴 퍼블릭 키를 식별하는 데 사용되는 짧은 바이트 시퀀스입니다.
- term: 키체인
  description: macOS의 암호 관리 시스템입니다.
- term: 키워드(keyword)
  description: 끌어오기 요청 내에서 사용할 때 이슈를 닫는 특정 단어입니다.
- term: label
  description: >-
    이슈 또는 끌어오기 요청에 대한 태그입니다. 리포지토리에는 몇 가지 기본 레이블이 제공되지만 사용자는 사용자 지정 레이블을 만들 수 있습니다.
- term: LFS
  description: >-
    Git 대용량 파일 스토리지입니다. 대용량 파일의 버전 관리용 오픈 소스 Git 확장입니다.
- term: license
  description: >-
    프로젝트에 포함할 수 있는 문서로 소스 코드로 수행할 수 있는 작업과 수행할 수 없는 작업을 사람들에게 알릴 수 있습니다.
- term: Linguist
  description: >-
    GitHub에서 Blob 언어를 감지하고, 바이너리 파일 또는 벤더 파일을 무시하며, diff에서 생성된 파일을 억제하고, 언어 분석 그래프를 생성하는 데 사용되는 라이브러리입니다.
- term: 줄 주석
  description: 특정 코드 줄에서 끌어오기 요청 내의 주석입니다.
- term: 줄 끝
  description: >-
    보이지 않는 문자 또는 텍스트 파일에서 줄 끝을 상징하는 문자입니다.
- term: 잠긴 개인 계정
  description: >-
    사용자가 액세스할 수 없는 개인 계정입니다. 사용자가 유료 계정을 무료 계정으로 다운그레이드하거나 유료 계획이 기한이 지난 경우 계정이 잠깁니다.
- term: 관리 콘솔
  description: >-
    관리 기능이 포함된 GitHub Enterprise 인터페이스 내의 섹션입니다.
- term: Markdown
  description: >-
    Markdown은 .doc, .rtf 및 .txt와 크게 다르지 않은 매우 간단한 의미 체계 파일 형식입니다. Markdown을 사용하면 웹 게시 배경이 없는 사용자도 쉽게 산문을 작성하고(링크, 목록, 글머리 기호 등 포함) 웹 사이트처럼 표시할 수 있습니다. GitHub는 Markdown을 지원하고 GitHub Flavored Markdown이라는 특정 형태의 Markdown을 사용합니다. [GitHub Flavored Markdown 사양](https://github.github.com/gfm/) 또는 [GitHub에서 쓰기 및 서식 지정 시작하기](/articles/getting-started-with-writing-and-formatting-on-github)를 참조하세요.
- term: 마크업
  description: 문서에 주석을 달고 서식을 지정하는 시스템입니다.
- term: 기본
  description: >-
    {% ifversion fpt or ghes > 3.1 or ghae %} 기본 개발 분기입니다. Git 리포지토리를 만들 때마다 이름이 ‘main’으로 지정된 분기가 만들어지고 활성 분기가 됩니다. 이는 순전히 규칙에 의한 것이며 필수는 아니지만 대부분의 경우 로컬 개발을 포함합니다.{% else %}리포지토리의 기본 분기에 대한 ‘master’의 대체 이름으로 자주 선택되는 이름입니다.{% endif %}
- term: master
  description: >-
    많은 Git 리포지토리의 기본 분기입니다. 기본적으로 명령줄에 새 Git 리포지토리를 만들 때 ‘master’라는 분기가 만들어집니다. 이제 많은 도구에서 기본 분기에 대체 이름을 사용합니다.{% ifversion fpt or ghes > 3.1 or ghae %}예를 들어 GitHub에 새 리포지토리를 만들 때 기본 분기를 ‘main’이라고 합니다.{ % endif %}
- term: 구성원 그래프
  description: 리포지토리의 모든 포크를 표시하는 리포지토리 그래프입니다.
- term: 멘션
  description: >-
    @ 기호를 사용자 이름 앞에 추가하여 사용자에게 보낸 알림입니다. GitHub에서 조직의 사용자는 언급할 수 있는 팀의 일원이 될 수도 있습니다.
- term: merge
  description: >-
    병합은 한 분기(동일한 리포지토리 또는 포크)에서 변경 내용을 가져와서 다른 분기로 적용합니다. 이는 종종 “끌어오기 요청”(병합 요청으로 간주될 수 있음) 또는 명령줄을 통해 발생합니다. 충돌하는 변경 내용이 없거나 항상 명령줄을 통해 수행할 수 있는 경우 GitHub.com 웹 인터페이스에서 끌어오기 요청을 통해 병합을 수행할 수 있습니다.
- term: 병합 충돌
  description: >-
    병합된 분기 간에 발생하는 차이입니다. 병합 충돌은 사람들이 동일한 파일의 같은 줄을 다르게 변경하거나 한 사람이 파일을 편집하고 다른 사람이 동일한 파일을 삭제할 때 발생합니다. 분기를 병합하려면 먼저 병합 충돌을 해결해야 합니다.
- term: 마일스톤
  description: >-
    리포지토리에서 이슈 그룹 또는 끌어오기 요청의 진행 상황을 추적하는 방법입니다.
- term: 미러
  description: 리포지토리의 새 복사본입니다.
- term: 중첩 팀
  description: >-
    상위 팀의 하위 팀입니다. 여러 하위(또는 중첩) 팀이 있을 수 있습니다.
- term: 네트워크 그래프
  description: >-
    루트 리포지토리의 분기 및 네트워크에 고유한 커밋이 포함된 포크 분기를 포함하여 전체 리포지토리 네트워크의 분기 기록을 보여 주는 리포지토리 그래프입니다.
- term: 뉴스 피드
  description: >-
    관찰하는 리포지토리 또는 사람의 활동 보기입니다. 조직의 뉴스 피드는 조직이 소유한 리포지토리에 대한 활동을 보여줍니다.
- term: 빠르지 않은 전달
  description: >-
    리포지토리의 로컬 복사본이 업스트림 리포지토리와 동기화되지 않으면 로컬 변경 내용을 푸시하기 전에 업스트림 변경 내용을 가져와야 합니다.
- term: 알림
  description: >-
    설정에 따라 웹 또는 이메일로 관심 있는 활동에 대한 정보를 제공하는 업데이트입니다.
- term: OAuth 앱
  description: >-
    암호 대신 액세스 토큰을 사용하여 사용자의 정보에 액세스하는 타사 애플리케이션입니다.
- term: OAuth 토큰
  description: OAuth 앱에서 사용자에 대한 정보에 액세스하는 데 사용되는 액세스 토큰입니다.
- term: 외부 협력자
  description: >-
    조직의 리포지토리 중 하나 이상에 액세스할 수 있지만 조직에 대한 다른 액세스 권한이 없으며 조직의 구성원이 아닌 사용자입니다.
- term: 오픈 소스
  description: >-
    오픈 소스 소프트웨어는 누구나 자유롭게 사용, 수정 및 공유할 수 있는 소프트웨어입니다(수정된 형식과 수정되지 않은 형식 모두). 오늘날 “오픈 소스” 개념은 종종 소프트웨어 이상으로 확장되어 누구나 포크, 수정, 토론 및 기여할 수 있도록 작업 자료를 온라인으로 제공하는 협업 철학을 나타냅니다.
- term: organization
  description: >-
    조직은 일반적으로 실제 조직을 미러링하는 둘 이상의 사용자 그룹입니다. 사용자가 관리하며 리포지토리와 팀을 모두 포함할 수 있습니다.
- term: 조직 소유자
  description: 소유한 조직에 대한 완전한 관리 권한이 있는 사용자입니다.
- term: 원본
  description: >-
    기본 업스트림 리포지토리입니다. 대부분의 프로젝트에는 추적하는 업스트림 프로젝트가 하나 이상 있습니다. 기본적으로 origin이 해당 용도로 사용됩니다.
- term: owner
  description: >-
    조직에 대한 완전한 관리 권한이 있는 조직 구성원입니다.
- term: 부모 팀
  description: >-
    중첩 팀 내에서 하위 팀이 액세스 권한 및 @멘션을 상속하는 주요 팀입니다.
- term: 참여 알림
  description: >-
    사용자 이름이나 팀이 언급되었거나 이전에 주석에 회신했던 이슈 또는 끌어오기 요청의 대화 업데이트에 대한 알림입니다.
- term: 고유 링크
  description: 특정 웹 페이지에 대한 고유 정적 하이퍼링크입니다.
- term: 개인 계정
  description: >-
    개별 사용자에 속한 GitHub 계정입니다.
- term: 기본 메일 주소
  description: >-
    GitHub에서 영수증, 신용 카드 또는 PayPal 요금 및 기타 청구 관련 통신을 보내는 기본 메일 주소입니다.
- term: 고정 리포지토리
  description: >-
    사용자가 프로필에 눈에 띄게 표시하기로 결정한 리포지토리입니다.
- term: 사전 수신 후크
  description: >-
    품질 검사를 구현하는 데 사용할 수 있는 GitHub Enterprise 서버에서 실행되는 스크립트입니다.
- term: 프라이빗 기여도
  description: 프라이빗(대 퍼블릭) 리포지토리에 대한 기여도입니다.
- term: 프라이빗 리포지토리
  description: >-
    프라이빗 리포지토리는 소유자가 지정한 리포지토리 소유자 및 협력자만 볼 수 있습니다.
- term: 생산 분기
  description: >-
    애플리케이션 또는 사이트에 사용하거나 배포할 준비가 된 최종 변경 사항이 있는 분기입니다.
- term: 프로필
  description: GitHub에서 사용자의 활동에 대한 정보를 표시하는 페이지입니다.
- term: 프로필 사진
  description: >-
    사용자가 GitHub에 업로드하여 일반적으로 해당 사용자 이름과 함께 활동을 식별하는 사용자 지정 이미지입니다. 아바타라고도 합니다.
- term: 프로젝트 보드
  description: >-
    이슈, 끌어오기 요청, 열에서 카드로 분류되는 메모로 구성된 GitHub 내의 보드입니다.
- term: 보호된 분기
  description: >-
    보호된 분기는 리포지토리 관리자가 보호하도록 선택하는 분기에서 Git의 여러 기능을 차단합니다. 강제로 푸시하거나, 삭제하거나, 필수 검사를 통과하거나 필수 검토를 승인하지 않고 변경 내용을 병합하거나, GitHub 웹 인터페이스에서 파일을 업로드할 수 없습니다. 보호된 분기는 일반적으로 기본 분기입니다.
- term: 퍼블릭 기여도
  description: 퍼블릭(대 프라이빗) 리포지토리에 대한 기여도입니다.
- term: 퍼블릭 리포지토리
  description: >-
    GitHub 사용자가 아닌 사용자를 포함하여 누구나 퍼블릭 리포지토리를 볼 수 있습니다.
- term: pull
  description: >-
    끌어오기는 변경 내용을 가져오고 병합할 때를 나타냅니다. 예를 들어 작업 중인 원격 파일을 다른 사람이 편집한 경우 최신 상태로 유지하도록 로컬 복사본에 대한 변경 내용을 끌어옵니다. 가져오기도 참조하세요.
- term: 끌어오기 액세스
  description: 읽기 권한의 동의어입니다.
- term: 끌어오기 요청
  description: >-
    끌어오기 요청은 사용자가 제출하고 리포지토리 협력자가 수락하거나 거부하는 리포지토리에 대한 제안된 변경 내용입니다. 이슈와 마찬가지로 끌어오기 요청에는 각각 자체 토론 포럼이 있습니다.
- term: 끌어오기 요청 검토
  description: >-
    끌어오기 요청이 병합되기 전에 변경 내용을 승인하거나 추가 변경을 요청하는 끌어오기 요청에 대한 협력자의 의견입니다.
- term: 펄스 그래프
  description: 리포지토리의 활동에 대한 개요를 제공하는 리포지토리 그래프입니다.
- term: 펀치 그래프
  description: >-
    요일 및 시간을 기준으로 리포지토리에 대한 업데이트 빈도를 보여 주는 리포지토리 그래프입니다.
- term: push
  description: >-
    푸시하려면 커밋된 변경 내용을 GitHub.com의 원격 리포지토리로 보냅니다. 예를 들어 로컬에서 변경하는 경우 다른 사람이 액세스할 수 있도록 해당 변경 내용을 푸시할 수 있습니다.
- term: 분기 푸시
  description: >-
    분기를 원격 리포지토리에 성공적으로 푸시하면 로컬 분기의 변경 내용으로 원격 분기를 업데이트합니다. “분기를 푸시”하면 Git은 원격 리포지토리에서 분기의 HEAD 참조를 검색하고 분기의 로컬 HEAD 참조에 대한 직접적인 상위 요소인지 확인합니다. 확인된 후 Git은 모든 개체(로컬 HEAD ref에서 도달 가능하고 원격 리포지토리에서 누락)를 원격 개체 데이터베이스로 끌어온 다음, 원격 HEAD ref를 업데이트합니다. 원격 HEAD가 로컬 HEAD의 상위 요소가 아니면 푸시가 실패합니다.
- term: 푸시 액세스
  description: 쓰기 권한의 동의어입니다.
- term: 읽기 액세스
  description: >-
    사용자가 리포지토리에서 정보를 가져오거나 읽을 수 있는 리포지토리에 대한 사용 권한 수준입니다. 모든 공개 리포지토리는 모든 GitHub 사용자에게 읽기 권한을 부여합니다. 끌어오기 액세스의 동의어입니다.
- term: 추가 정보
  description: "일반적으로 리포지토리에 대한 방문자가 볼 수 있는 첫 번째 파일인 리포지토리의 파일에 대한 정보가 포함된 텍스트 파일입니다. README 파일은 리포지토리 라이선스, 기여 지침 및 사용 규정과 함께 기대치를 공유하고 프로젝트에 대한 기여도를 관리하는 데 도움이 됩니다."
- term: rebase
  description: >-
    분기에서 다른 베이스로 일련의 변경 내용을 다시 적용하고 해당 분기의 HEAD를 결과로 재설정합니다.
- term: 복구 코드
  description: GitHub 계정에 다시 액세스할 수 있는 코드입니다.
- term: 릴리스
  description: 사용자에게 소프트웨어를 패키징하고 제공하는 GitHub의 방식입니다.
- term: remote
  description: >-
    서버에서 호스팅되는 리포지토리 또는 분기의 버전이며 GitHub.com일 가능성이 높습니다. 원격 버전을 로컬 클론에 연결하여 변경 내용을 동기화할 수 있습니다.
- term: 원격 리포지토리
  description: >-
    동일한 프로젝트를 추적하는 데 사용되지만 다른 곳에 상주하는 리포지토리입니다.
- term: 원격 URL
  description: >-
    코드가 저장되는 장소로, GitHub의 리포지토리, 다른 사용자의 포크 또는 다른 서버입니다.
- term: 복제본(replica)
  description: >-
    기본 GitHub Enterprise 인스턴스에 중복성을 제공하는 GitHub Enterprise 인스턴스입니다.
- term: 리포지토리
  description: >-
    리포지토리는 GitHub의 가장 기본적인 요소입니다. 프로젝트의 폴더로 상상하기가 가장 쉽습니다. 리포지토리는 모든 프로젝트 파일(설명서 포함)을 포함하고 각 파일의 수정 기록을 저장합니다. 리포지토리에는 여러 협력자가 있을 수 있으며 공개 또는 개인 리포지토리일 수 있습니다.
- term: 리포지토리 캐시
  description: >-
    분산 팀과 CI 클라이언트 근처에 있는 GitHub Enterprise 서버 인스턴스에 대한 리포지토리의 읽기 전용 미러입니다.
- term: 리포지토리 그래프
  description: 리포지토리의 데이터를 시각적으로 표현합니다.
- term: 리포지토리 유지 관리자
  description: >-
    리포지토리를 관리하는 사람입니다. 이 사람은 문제를 심사하고 레이블 및 기타 기능을 사용하여 리포지토리의 작업을 관리하는 데 도움을 줄 수 있습니다. 또한 이 사람은 README 및 기여 파일을 최신 상태로 유지할 책임도 있습니다.
- term: 끌어오기 요청 검토 필요
  description: >-
    필수 검토는 협력자가 보호된 분기를 변경하기 전에 끌어오기 요청이 최소 한 개의 승인된 검토가 있는지 확인해야 합니다.
- term: 상태 확인 필요
  description: >-
    협력자가 보호된 분기를 변경하기 전에 필요한 모든 CI 테스트가 통과되었는지 확인하는 끌어오기 요청을 확인합니다.
- term: resolve
  description: 실패한 자동 병합이 남긴 부분을 수동으로 수정하는 작업입니다.
- term: 되돌리기
  description: >-
    GitHub에서 끌어오기 요청을 되돌리면 새 끌어오기 요청이 자동으로 열리며, 이 요청에는 원래 병합된 끌어오기 요청에서 병합 커밋을 되돌리는 커밋이 하나 있습니다. Git에서는 ‘git revert’를 사용하여 커밋을 되돌릴 수 있습니다.
- term: 검토
  description: >-
    검토를 통해 리포지토리에 액세스할 수 있는 다른 사용자가 끌어오기 요청에서 제안된 변경 사항에 대해 의견을 말하고 변경 내용을 승인하거나, 끌어오기 요청이 병합되기 전에 추가 변경을 요청할 수 있습니다.
- term: 루트 디렉터리
  description: 계층 구조의 첫 번째 디렉터리입니다.
- term: 루트 파일 시스템
  description: 기본 운영 체제 및 GitHub 엔터프라이즈 애플리케이션 환경입니다.
- term: 저장된 회신
  description: >-
    GitHub 사용자 계정에 저장하고 추가할 수 있는 주석입니다. 이를 통해 GitHub에서 이슈 및 끌어오기 요청을 사용할 수 있습니다.
- term: scope
  description: >-
    OAuth 앱이 공개 및 비공개 데이터에 모두 액세스하도록 요청할 수 있는 이름을 가진 권한 그룹입니다.
- term: 사용자
  description: >-
    GitHub Enterprise 조직 내의 사용자입니다. 이를 “사용자 수”라고 할 수 있습니다.
- term: 비밀 팀
  description: >-
    팀의 다른 사람과 소유자 권한이 있는 사람만 볼 수 있는 팀입니다.
- term: 보안 로그
  description: >-
    마지막 50개의 작업 또는 지난 90일 이내에 수행된 작업을 나열하는 로그입니다.
- term: 서버 간 요청
  description: >-
    특정 사용자와 독립적으로 봇 역할을 하는 애플리케이션에서 사용하는 API 요청입니다. 예를 들어 일정에 따라 실행되고 오랫동안 활동이 없는 이슈를 닫는 애플리케이션입니다. 해당 유형의 인증을 사용하는 애플리케이션은 사용이 허가된 GitHub 계정을 사용하지 않으므로 특정 수의 라이선스를 사용할 수 있는 청구 플랜이 있는 기업에서는 서버-서버 봇이 GitHub 라이선스 중 하나를 사용하지 않습니다. 서버 간 요청에 사용된 토큰은 [GitHub API](/rest/reference/apps#create-an-installation-access-token-for-an-app)를 통해 프로그래밍 방식으로 획득합니다. “[사용자 간 요청](#user-to-server-request)”도 참조하세요.
- term: 서비스 후크
  description: >-
    “웹후크”라고도 합니다. 웹후크는 리포지토리 또는 조직에서 특정 작업이 발생할 때마다 외부 웹 서버에 알림을 제공할 수 있는 방법을 제공합니다.
- term: Single Sign-On
  description: >-
    SSO라고도 합니다. 사용자가 IdP(ID 공급자)라는 단일 위치에 로그인하여 다른 서비스 공급자에 대한 액세스 권한을 부여할 수 있습니다.
- term: 스냅샷
  description: 특정 시점에서 가상 머신의 검사점입니다.
- term: 스쿼시
  description: 여러 커밋을 단일 커밋으로 결합합니다. 또한 Git 명령입니다.
- term: SSH 키
  description: >-
    SSH 키는 암호화된 메시지를 사용하여 온라인 서버에서 자신을 식별하는 방법입니다. 컴퓨터가 다른 서비스에 고유한 암호를 가지고 있는 것처럼 {% data variables.product.product_name %}은 SSH 키를 사용하여 GitHub.com에서 사용자 컴퓨터로 정보를 안전하게 전송합니다.
- term: 스테이징 인스턴스
  description: >-
    수정 사항이 실제 GitHub Enterprise 인스턴스에 적용되기 전에 수정 사항을 테스트하는 방법입니다.
- term: 상태
  description: >-
    커밋이 기여하는 리포지토리에 대해 설정된 조건을 충족한다는 끌어오기 요청 내의 시각적 표현입니다.
- term: 상태 확인
  description: >-
    상태 검사는 리포지토리에서 만드는 각 커밋에 대해 실행되는 연속 통합 빌드와 같은 외부 프로세스입니다. 자세한 내용은 “[상태 검사 정보](/articles/about-status-checks)”를 참조하세요.
- term: 별표
  description: >-
    리포지토리에 대한 책갈피 또는 감사 표시입니다. 별표는 프로젝트의 인기도를 수동으로 평가하는 방법입니다.
- term: subscription
  description: 사용자 또는 조직의 GitHub 플랜입니다.
- term: 팀
  description: >-
    계단식 액세스 권한 및 멘션을 통해 회사 또는 그룹의 구조를 반영하는 조직 구성원 그룹입니다.
- term: 팀 유지 관리자
  description: >-
    조직 소유자가 팀을 관리할 수 있는 권한의 하위 집합이 있는 조직 구성원입니다.
- term: 팀 플랜
  description: >-
    무제한 퍼블릭 및 프라이빗 리포지토리를 제공하는 조직 청구 플랜입니다.
- term: 타임라인
  description: 끌어오기 요청 또는 사용자 프로필의 일련의 이벤트입니다.
- term: 토픽 분기
  description: >-
    개발자가 개념적 개발 라인을 식별하는 데 사용하는 일반 Git 분기입니다. 분기는 매우 쉽고 비용이 많이 들지 않으므로 각각 매우 잘 정의된 개념 또는 소규모로 증분하지만 관련된 변경 내용을 포함하는 작은 분기를 여러 개 갖는 것이 적합한 경우가 많습니다. 기능 분기라고도 합니다.
- term: topics
  description: >-
    특정 주제 영역의 리포지토리를 탐색하고, 기여할 프로젝트를 찾고, GitHub의 특정 문제에 대한 새로운 해결책을 찾는 방법입니다.
- term: 트래픽 그래프
  description: >-
    전체 클론(가져오기 아님), 지난 14일 동안의 방문자, 참조 사이트, 인기 콘텐츠를 포함하여 리포지토리의 트래픽을 보여 주는 리포지토리 그래프입니다.
- term: 전송
  description: >-
    리포지토리를 전송하려면 리포지토리의 소유자를 변경합니다. 새 소유자는 리포지토리의 콘텐츠, 이슈, 끌어오기 요청, 릴리스 및 설정을 즉시 관리할 수 있습니다.
- term: 업스트림
  description: >-
    분기 또는 포크에 대해 이야기할 때 원래 리포지토리의 주 분기는 다른 변경 내용이 들어오는 기본 위치이기 때문에 종종 “업스트림”이라고 합니다. 작업 중인 분기/포크는 “다운스트림”이라고 합니다. 원본이라고도 합니다.
- term: 업스트림 분기
  description: >-
    해당 분기에 병합되는(또는 해당 분기를 다시 지정하는 기준이 되는) 기본 분기입니다. ‘branch.<name>.remote’ 및 ‘branch.<name>.merge’를 통해 구성됩니다. A의 업스트림 분기가 원본/B인 경우 때때로 “A가 원본/B를 추적하고 있습니다”라고 말합니다.
- term: 사용자
  description: >-
    사용자는 개인 GitHub 계정이 있는 사람입니다. 사용자마다 개인 프로필이 있으며 여러 공개 또는 개인 리포지토리를 소유할 수 있습니다. 조직에 참여하거나 다른 사용자의 리포지토리에서 협업하기 위해 만들거나 초대할 수 있습니다.
- term: 사용자 이름
  description: GitHub에서 사용자의 핸들입니다.
- term: 사용자-서버 요청
  description: >-
    특정 사용자를 대신하여 작업을 수행하는 애플리케이션에서 사용하는 API 요청입니다. 사용자-서버 인증을 사용하여 작업을 수행하는 경우 애플리케이션을 통해 사용자가 수행한 것으로 GitHub에 표시됩니다. 예를 들어 타사 애플리케이션 내에서 이슈를 만들도록 선택할 수 있으며 애플리케이션이 GitHub 대신 이 작업을 수행합니다. 애플리케이션이 사용자-서버 요청을 사용하여 수행할 수 있는 작업의 범위는 앱과 사용자의 사용 권한 및 액세스 모두에 의해 제한됩니다. 사용자-서버 요청에 사용되는 토큰은 OAuth를 통해 획득됩니다. 자세한 내용은 “[GitHub 앱에 대한 사용자 식별 및 권한 부여](/developers/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps)”를 참조하세요. “[서버 간 요청](#server-to-server-request)”도 참조하세요.
- term: 가시적인 팀
  description: 모든 조직 구성원이 보고 @멘션할 수 있는 팀입니다.
- term: 시청
  description: >-
    리포지토리 또는 이슈를 관찰하여 이슈 또는 끌어오기 요청에 대한 업데이트가 있을 때 알림을 받을 수 있습니다.
- term: 시청 알림
  description: 사용자가 구독한 리포지토리의 활동에 대한 알림입니다.
- term: 웹 알림
  description: >-
    GitHub의 웹 인터페이스에 표시되는 알림: https://github.com/notifications
- term: Webhook
  description: >-
    웹후크를 사용하면 GitHub.com에서 특정 이벤트를 구독하는 GitHub 앱을 빌드하거나 설정할 수 있습니다. 웹후크는 리포지토리 또는 조직에서 특정 작업이 발생할 때마다 외부 웹 서버에 알림을 제공할 수 있는 방법을 제공합니다. 서비스 후크라고도 합니다.
- term: 쓰기 권한
  description: >-
    사용자가 리포지토리에 변경 내용을 푸시하거나 쓸 수 있는 리포지토리의 권한 수준입니다.

date: '2022-07-26'
release_candidate: true
deprecated: true
intro: |
  {% note %}
  
  **注:** {% data variables.product.product_location %} でリリース候補ビルドが実行されている場合、ホットパッチでアップグレードすることはできません。リリース候補はテスト環境でのみ実行することをお勧めします。
  
  {% endnote %}
  
  アップグレードの手順については、「[{% data variables.product.prodname_ghe_server %} のアップグレード](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)」を参照してください。
sections:
  features:
    - heading: インフラストラクチャ
      notes:
        # https://github.com/github/releases/issues/2002
        - |リポジトリ キャッシュは一般提供されています。リポジトリ キャッシュは、分散開発者のために Git の読み取りパフォーマンスを向上させ、プッシュ ワークフローに影響を与えることなく geo レプリケーションのデータの局所性と利便性を提供します。一般提供リリースでは、Git と Git LFS の両方のデータが GitHub Enterprise Server によってキャッシュされます。詳しい情報については、「[リポジトリのキャッシュについて](/admin/enterprise-management/caching-repositories/about-repository-caching)」を参照してください。

|
    - heading: インスタンスのセキュリティ
      notes:
        # https://github.com/github/releases/issues/1569
        - |GitHub は、GitHub Enterprise Server へのすべての SSH 接続についてサポートされるアルゴリズムとハッシュ機能を変更し、暗号化と認証が行われない Git プロトコルを無効にし、必要に応じて Ed25519 ホスト キーのアドバタイズを許可しました。詳しくは、[GitHub のブログ](https://github.blog/2022-06-28-improving-git-protocol-security-on-github-enterprise-server/)と以下の記事をご覧ください。



- [インスタンスへの SSH 接続の構成](/admin/configuration/configuring-your-enterprise/configuring-ssh-connections-to-your-instance)

- [Enterprise でリポジトリ管理ポリシーを適用する](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#configuring-anonymous-git-read-access)

- [インスタンスのホスト キーの構成](/admin/configuration/configuring-your-enterprise/configuring-host-keys-for-your-instance)

|
        # https://github.com/github/releases/issues/2341
        - |インスタンスへの着信 SMTP 接続に対して、TLS 暗号化を要求できます。詳しくは、「[通知のためのメール設定](/admin/configuration/configuring-your-enterprise/configuring-email-for-notifications)」をご覧ください。

|
    - heading: 監査ログ
      notes:
        # https://github.com/github/releases/issues/1438
        - |インスタンスに対する監査ログと Git イベントを、Amazon S3、Azure Blob Storage、Azure Event Hubs、Google Cloud Storage、または Splunk にストリーミングできます。監査ログのストリーミングはパブリック ベータ版であり、変更される可能性があります。詳しくは、「[Enterprise の監査ログのストリーミング](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise)」をご覧ください。

|
    - heading: GitHub Connect
      notes:
        # https://github.com/github/releases/issues/2306
        - |Server Statistics が一般提供されるようになりました。Server Statistics は、GitHub Enterprise Server インスタンスから集計された使用状況データを収集します。これを使うと、Organization のニーズをより適切に予測し、チームのしくみを理解し、GitHub Enterprise Server から得られる価値を確認できます。詳しくは、「[Server Statistics について](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics)」をご覧ください。

|
    - heading: 管理者のエクスペリエンス
      notes:
        # https://github.com/github/releases/issues/2351
        - |Enterprise の所有者は、Enterprise アカウントの **[Organization]** ページから、Organization をメンバーまたは所有者としてインスタンスに参加させることができます。詳しくは、「[Enterprise によって所有される Organization のロールを管理する](/admin/user-management/managing-organizations-in-your-enterprise/managing-your-role-in-an-organization-owned-by-your-enterprise)」をご覧ください。

|
        # https://github.com/github/releases/issues/2221
        - |Enterprise の所有者は、構成されているグローバル アナウンス バナーをユーザーが無視することを許可できます。詳しくは、「[Enterprise のユーザメッセージをカスタマイズする](/admin/user-management/managing-users-in-your-enterprise/customizing-user-messages-for-your-enterprise#creating-a-global-announcement-banner)」をご覧ください。

|
    - heading: GitHub Advanced Security
      notes:
        # https://github.com/github/releases/issues/2321
        - |GitHub Advanced Security ライセンスがあるインスタンス上のユーザーは、Organization 所有者またはリポジトリ管理者がコード セキュリティまたは分析機能を有効または無効にするとトリガーする Webhook イベントを受け取ることができます。詳しくは、次のドキュメントを参照してください。



- [Webhook のイベントとペイロード](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#security_and_analysis) (Webhook のドキュメント)

- [Organization のセキュリティおよび分析設定を管理する](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/managing-security-and-analysis-settings-for-your-organization)

- [リポジトリのセキュリティと分析機能を管理する](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository)

|
        # https://github.com/github/releases/issues/2191
        - |GitHub Advanced Security ライセンスがあるインスタンス上のユーザーは、Web UI または REST API でコード スキャン アラートを無視するときに、必要に応じてコメントを追加できます。無視に関するコメントは、イベントのタイムラインに表示されます。ユーザーは、REST API を使って無視に関するコメントを追加または取得することもできます。詳しくは、「[pull request でコード スキャンのアラートをトリアージする](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/triaging-code-scanning-alerts-in-pull-requests#dismissing-an-alert-on-your-pull-request)」と REST API のドキュメントの「[Code Scanning](/rest/code-scanning#update-a-code-scanning-alert)」をご覧ください。

|
        # https://github.com/github/releases/issues/2228
        - |GitHub Advanced Security ライセンスがあるインスタンスでは、シークレット スキャンによって Web エディターでのシークレットのリークが防がれます。詳しくは、「[シークレット スキャンによるプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning#using-secret-scanning-as-a-push-protection-from-the-web-ui)」をご覧ください。

|
        # https://github.com/github/releases/issues/2318
        # https://github.com/github/releases/issues/2277
        - |GitHub Advanced Security ライセンスがあるインスタンス上の Enterprise 所有者とユーザーは、Enterprise と Organization の監査ログを見るか、REST API を使うことで、シークレット スキャンのアラートと、シークレット スキャンのプッシュ保護のバイパスを確認できます。詳しくは、次のドキュメントを参照してください。



- [シークレット スキャンによるプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)

- [Enterprise の監査ログ イベント](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#secret_scanning_push_protection-category-actions)

- [組織の監査ログを確認する](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#secret_scanning_push_protection-category-actions)

- [Secret Scanning](/rest/secret-scanning#list-secret-scanning-alerts-for-an-enterprise) (REST API のドキュメント)

|
        # https://github.com/github/releases/issues/2230
        # https://github.com/github/releases/issues/2317
        - |GitHub Advanced Security ライセンスがあるインスタンス上の Enterprise 所有者は、Enterprise 用のカスタム シークレット スキャン パターンのドライ ランを実行でき、すべてのユーザーはパターンを編集するときにドライ ランを実行できます。ドライ ランを行うと、インスタンス全体へのパターンの影響を理解し、アラートの発行と生成の前にパターンを調整できます。詳しくは、「[シークレット スキャンのカスタム パターンの定義](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)」をご覧ください。

|
        # https://github.com/github/releases/issues/2236
        - |GitHub Advanced Security ライセンスがあるインスタンス上のユーザーは、シークレット スキャン アラートを取得する REST API で `sort` と `direction` パラメーターを使うことができ、アラートの `created` または `updated` フィールドを基にして並べ替えることができます。新しいパラメーターは、インスタンス全体または個別の Organization やリポジトリで利用できます。詳しくは、次のドキュメントを参照してください。



- [Enterprise のシークレット スキャン アラートの一覧を表示する](/rest/secret-scanning#list-secret-scanning-alerts-for-an-enterprise)

- [Organization のシークレット スキャン アラートの一覧を表示する](/rest/secret-scanning#list-secret-scanning-alerts-for-an-organization)

- [リポジトリのシークレット スキャン アラートの一覧を表示する](/rest/secret-scanning#list-secret-scanning-alerts-for-a-repository)

- [Secret Scanning](/rest/secret-scanning) (REST API のドキュメント)

|
        # https://github.com/github/releases/issues/2263
        - |CodeQL でサポートされる他のすべてのプログラミング言語用の同様のライブラリと一緒にするため、`github/codeql-go` リポジトリのコンテンツを `github/codeql` リポジトリに移動しました。GitHub の CodeQL コード分析ツールを使って Go プログラミング言語で書かれたコードベースを分析するためのオープンソースの CodeQL クエリ、ライブラリ、抽出子は、新しい場所で見つかります。既存のワークフローの移行に関するガイダンスなど、詳しくは、[github/codeql-go#741](https://github.com/github/codeql-go/issues/741) をご覧ください。

|
    - heading: Dependabot
      notes:
        # https://github.com/github/releases/issues/2256
        - |GitHub Advanced Security ライセンスがあるインスタンス上の Enterprise 所有者は、インスタンス全体についての Dependabot アラートの概要を見ることができます。アプリケーション セキュリティ リスクのリポジトリ中心のビューや、シークレット スキャンと Dependabot のすべてのアラートのアラート中心のビューなどです。これらのビューはベータ版なので変更される可能性があり、コード スキャンのアラート中心のビューは GitHub Enterprise Server の将来のリリースで計画されています。詳しくは、「[セキュリティの概要の表示](/code-security/security-overview/viewing-the-security-overview#viewing-the-security-overview-for-an-enterprise)」をご覧ください。

|
        # https://github.com/github/releases/issues/2160
        - |ユーザーは、複数の Dependabot アラートを選んで、閉じたり、もう一度開いたりできます。たとえば、**[Closed alerts]\(閉じられたアラート\)** タブで、以前に閉じられた複数のアラートを選んでから、それらをまとめてもう一度開くことができます。詳しくは、「[Dependabot アラートについて](/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-alerts-for-vulnerable-dependencies)」をご覧ください。

|
        # https://github.com/github/releases/issues/2232
        - |Dependabot は、TypeScript プロジェクトの対応するパッケージと共に、`@types` の依存関係を更新します。この変更の前に、パッケージとそれに対応する `@types` パッケージに対する別の pull request が、ユーザーに対して表示されます。この機能は、_package.json_ ファイル内のプロジェクトの `devDependencies` に `@types` パッケージが含まれるリポジトリに対して、自動的に有効にされます。`dependabot.yml` ファイルの [`ignore`](/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#ignore) フィールドを `@types/*` に設定することで、この動作を無効にできます。詳しくは、「[GitHub Dependabot のバージョンアップデートについて](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates)」と「[_dependabot.yml_ ファイルの構成オプション](/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file)」をご覧ください。

|
    - heading: コード セキュリティ
      notes:
        # https://github.com/github/releases/issues/2098
        # https://github.com/github/releases/issues/2282
        - |GitHub Actions は、依存関係をスキャンすることでユーザーの pull request で依存関係レビューを行うことができ、関連するセキュリティの脆弱性についてユーザーに警告します。`dependency-review-action` アクションは、任意の 2 つのリビジョン間で依存関係の差異を調べる新しい API エンドポイントによってサポートされます。詳しくは、「[依存関係の確認について](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement)」をご覧ください。

|
        # https://github.com/github/releases/issues/2243
        - |依存関係グラフは、_Cargo.toml_ と _Cargo.lock_ ファイルで Rust を検出します。これらのファイルは、**[分析情報]** タブの**[Dependency graph]\(依存関係グラフ\)** セクションに表示されます。ユーザーは、Rust の依存関係に関連する脆弱性に関する Dependabot のアラートと更新プログラムを受け取ります。パッケージからリポジトリへのマッピングなど、パッケージのメタデータは後日追加されます。詳しくは、「[依存関係グラフについて](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)」をご覧ください。

|
        # https://github.com/github/releases/issues/1766
        - |インスタンスで GitHub Connect が有効になっている場合、ユーザーは [GitHub Advisory Database](https://github.com/advisories) でのセキュリティ アドバイザリの改善に寄与できます。寄与するには、アドバイザリの詳細を表示している間に、**[Suggest improvements for this vulnerability]\(この脆弱性に対する改善の提案\)** をクリックします。詳細については、次の記事を参照してください。



- [GitHub Connect の管理](/admin/configuration/configuring-github-connect/managing-github-connect)

- [GitHub Advisory Database でのセキュリティの脆弱性の参照](/enterprise-cloud@latest/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/browsing-security-vulnerabilities-in-the-github-advisory-database) (GitHub Enterprise Cloud のドキュメント)

- [リポジトリの GitHub セキュリティ アドバイザリについて](/enterprise-cloud@latest/code-security/repository-security-advisories/about-github-security-advisories-for-repositories) (GitHub Enterprise Cloud のドキュメント)

- [GitHub Advisory Database でのセキュリティ アドバイザリの編集](/enterprise-cloud@latest/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/editing-security-advisories-in-the-github-advisory-database) (GitHub Enterprise Cloud のドキュメント)

|
    - heading: GitHub のアクション
      notes:
        # https://github.com/github/releases/issues/2159
        - |再利用可能なワークフローを呼び出すワークフロー内で、ユーザーは `secrets: inherit` を使って再利用可能なワークフローにシークレットを渡すことができます。詳しくは、「[ワークフローの再利用](/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow)」をご覧ください。

|
        # https://github.com/github/releases/issues/2102
        - |GitHub Actions を使うとき、別のユーザーによってレビューされていない変更が保護されたブランチにマージされるリスクを減らすため、Enterprise 所有者とリポジトリ管理者は、Actions によって pull request が作成されないようにすることができます。これまで、Organization 所有者はこの制限を有効にできました。詳細については、次の記事を参照してください。



- [エンタープライズで GitHub Actions のポリシーを適用する](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#preventing-github-actions-from-creating-or-approving-pull-requests)

- [Organization について GitHub Actions を無効化または制限する](/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-creating-or-approving-pull-requests)

- [リポジトリの GitHub Actions の設定を管理する](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#preventing-github-actions-from-creating-or-approving-pull-requests)

|
        # https://github.com/github/releases/issues/2155
        - |ユーザーは、`workflow_dispatch` と `workflow_call` によってトリガーされる単一のワークフローを作成し、`inputs` コンテキストを使って入力値にアクセスすることができます。これまでは、`workflow_dispatch` の入力はイベント ペイロードの中にあり、再利用可能であると共に手動でトリガーされる 1 つのワークフローを作成しようとするワークフロー作成者にとって、難しさが増していました。`workflow_dispatch` によってトリガーされるワークフローの場合は、互換性を保つため、引き続き `github.event.inputs` コンテキストで入力を利用できます。 詳しくは、「[コンテキスト](/actions/learn-github-actions/contexts#inputs-context)」をご覧ください。

|
        # https://github.com/github/releases/issues/2103
        - |ジョブの結果を要約するため、ユーザーは Markdown を生成し、ジョブの概要として内容を発行できます。たとえば、GitHub Actions でテストを実行した後、合格または不合格になったテストやスキップされたテストの概要を提供でき、完全なログ出力を確認する必要性が減る可能性があります。詳しくは、「[GitHub Actions のワークフロー コマンド](/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary)」をご覧ください。

|
        # https://github.com/github/releases/issues/2161
        - |ワークフローの再実行の間にジョブの実行の失敗をいっそう簡単に診断するため、ユーザーはデバッグ ログを有効にできます。これにより、ジョブの実行と環境に関する情報が出力されます。詳しくは、「[ワークフローとジョブの再実行](/actions/managing-workflow-runs/re-running-workflows-and-jobs)」と「[ワークフロー実行ログの使用](/actions/monitoring-and-troubleshooting-workflows/using-workflow-run-logs#viewing-logs-to-diagnose-failures)」をご覧ください。

|
        # https://github.com/github/releases/issues/2140
        - |GitHub Actions 用のセルフホステッド ランナーを管理する場合、実行するスクリプトを定義することで、ワークフローの実行の前と後に、ランナー自体が一貫した状態であることを確認できます。スクリプトを使うことで、これらの手順をワークフローに手作業で組み込むことをユーザーに求める必要がなくなります。ジョブの前と後のスクリプトはベータ版であり、変更される可能性があります。詳しくは、「[ジョブ前後のスクリプトの実行](/actions/hosting-your-own-runners/running-scripts-before-or-after-a-job)」をご覧ください。

|
    - heading: GitHub Packages
      notes:
        # https://github.com/github/releases/issues/2334
        - |Enterprise 所有者は、コンテナー イメージを GitHub Docker レジストリから GitHub Container レジストリに移行できます。コンテナー レジストリには、次の利点があります。



- Organization 内でのコンテナーの共有を向上させる

- アプリケーションにきめ細かいアクセス許可を付与する

- パブリック コンテナー イメージの匿名共有を許可する

- Docker イメージをホストするための OCI 標準を実装する



コンテナー レジストリはベータ版であり、変更される可能性があります。詳しくは、「[Docker レジストリからコンテナー レジストリへの Enterprise の移行](/admin/packages/migrating-your-enterprise-to-the-container-registry-from-the-docker-registry)」をご覧ください。

|
    - heading: コミュニティ エクスペリエンス
      notes:
        # https://github.com/github/releases/issues/2113
        - |GitHub Discussions は GitHub Enterprise Server で利用できます。GitHub Discussions は、質問し、アイデアを共有し、関係を築くための集まりの場になります。詳しくは、「[GitHub Discussions](/discussions)」をご覧ください。

|
        # https://github.com/github/releases/issues/2259
        - |Enterprise 所有者は、内部リポジトリまたはパブリック リポジトリにユーザーのユーザー名またはフル ネームが表示されるかどうかを制御するためのポリシーを構成できます。詳しくは、「[Enterprise でリポジトリ管理ポリシーを適用する](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-the-display-of-member-names-in-your-repositories)」をご覧ください。

|
    - heading: 組織
      notes:
        # https://github.com/github/releases/issues/2019
        - |ユーザーは、Organization 用にメンバー専用の README を作成できます。詳しくは、「[Organizationのプロフィールのカスタマイズ](/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile)」をご覧ください。

|
        # https://github.com/github/releases/issues/2234
        - |Organization 所有者は、新しい **[Pin repository]\(リポジトリのピン留め\)** ドロップダウンを使って、リポジトリから直接 Organization のプロファイルにリポジトリをピン留めすることができます。ピン留めされたパブリック リポジトリは、インスタンスのすべてのユーザーに表示されます。一方、パブリック、プライベート、内部リポジトリは、Organization のメンバーだけに表示されます。

|
    - heading: リポジトリ
      notes:
        # https://github.com/github/releases/issues/2214
        - |フォークを作成するとき、ユーザーはフォークの名前をカスタマイズできます。詳しくは、「[リポジトリをフォークする](/get-started/quickstart/fork-a-repo)」をご覧ください。

|
        # https://github.com/github/releases/issues/1973
        - |ユーザーは、**[Restrict pushes that create matching branches]\(一致するブランチを作成するプッシュを制限する\)** ブランチ保護ルールを使って、構成されている名前パターンに一致するブランチの作成をブロックできます。たとえば、リポジトリの既定のブランチが `master` から `main` に変わる場合、リポジトリ管理者はそれ以降の `master` ブランチの作成またはプッシュをすべて禁止できます。詳細については、「 

「[保護されたブランチについて](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#restrict-who-can-push-to-matching-branches)」と「[ブランチ保護ルールを管理する](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule#creating-a-branch-protection-rule)」をご覧ください。

|
        # https://github.com/github/releases/issues/2179
        - |ユーザーは、**[新しいブランチ]** をクリックすることで、リポジトリの **[ブランチ]** ページから直接ブランチを作成できます。詳しくは、「[リポジトリ内でブランチを作成および削除する](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository)」をご覧ください。

|
        # https://github.com/github/releases/issues/2220
        - |ユーザーは、開かれた pull request に関連付けられているブランチを削除できます。詳しくは、「[リポジトリ内でブランチを作成および削除する](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository)」をご覧ください。

|
        # https://github.com/github/releases/issues/2118
        - |複数のライセンスがあるリポジトリでは、{% octicon "code" aria-label="The code icon" %} **[コード]** タブの [About]\(バージョン情報\) サイドバーに、すべてのライセンスが表示されます。詳しくは、「[リポジトリのライセンス](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)」をご覧ください。

|
        # https://github.com/github/releases/issues/2233
        - "ユーザーがファイルの名前を変更したり、新しいディレクトリにファイルを移動したりするとき、ファイルの内容の少なくとも半分が同じ場合は、`git log --follow` と同様に、コミット履歴ではファイルの名前が変更されたものとして示されます。詳しくは、[GitHub のブログ](https://github.blog/changelog/2022-06-06-view-commit-history-across-file-renames-and-moves/)をご覧ください。"

        # https://github.com/github/releases/issues/2093
        - |ユーザーは、他のユーザーに、ブランチに関連付けられた pull request をマージする前に、ブランチを正常にデプロイすることを要求できます。詳しくは、「[保護されたブランチについて](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-deployments-to-succeed-before-merging)「と「[ブランチ保護ルールを管理する](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule)」をご覧ください。

|
        # https://github.com/github/releases/issues/2073
        - |Enterprise 所有者は、Organization 所有者がインスタンスのリポジトリにコラボレーターを招待することを禁止できます。詳しくは、「[リポジトリへのコラボレーターの招待に関するポリシーを適用する](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-collaborators-to-repositories)」をご覧ください。

|
        # https://github.com/github/releases/issues/2173
        - |ユーザーは、例外をサポートするブランチ保護ルールについて、GitHub Apps に対する例外を許可できます。詳しくは、「[アプリケーションについて](/developers/apps/getting-started-with-apps/about-apps)」と「[ブランチ保護ルールを管理する](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule)」をご覧ください。

|
    - heading: コミット
      notes:
        # https://github.com/github/releases/issues/2306
        - |期限切れまたは取り消し済みのパブリック GPG 署名キーについて、GitHub Enterprise Server は、Git コミットの署名を検証し、キーがまだ有効な間にユーザーがコミットを行った場合は、コミットを検証済みとして表示します。ユーザーは、期限切れまたは取り消し済みの GPG キーをアップロードすることもできます。詳しくは、「[コミット署名の検証について](/authentication/managing-commit-signature-verification/about-commit-signature-verification)」をご覧ください。

|
        # https://github.com/github/releases/issues/1977
        - |リポジトリを管理するルールとライセンスにコミットが準拠していることを確認するため、Organization 所有者とリポジトリ管理者は、開発者に、Web インターフェイスから行われるコミットにサインオフすることを要求できるようになりました。詳しくは、「[Organization のコミット サインオフ ポリシーの管理](/organizations/managing-organization-settings/managing-the-commit-signoff-policy-for-your-organization)」と「[リポジトリのコミット サインオフ ポリシーの管理](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository)」をご覧ください。

|
    - heading: Pull Request
      notes:
        # https://github.com/github/releases/issues/2261
        - |pull request の **[Files changed]\(変更されたファイル\)** タブにあるファイル ツリーを使って、ユーザーは変更されたファイルの間を移動し、変更のサイズとスコープを理解し、レビューに注目することができます。pull request で少なくとも 2 つのファイルが変更され、ブラウザーのウィンドウに十分な幅がある場合、ファイル ツリーが表示されます。詳しくは、「[pull request で提案された変更をレビューする](/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request)」と「[プルリクエスト内のファイルをフィルタリングする](/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/filtering-files-in-a-pull-request)」をご覧ください。

|
        # https://github.com/github/releases/issues/2167
        - |ユーザーは、すべてのスカッシュ マージに対するコミット メッセージとして、pull request のタイトルを既定で使うことができます。詳しくは、「[プルリクエストにコミットの squash を設定する](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests)」をご覧ください。

|
    - heading: リリース
      notes:
        # https://github.com/github/releases/issues/2281
        - |特定のリリースについての詳細を表示するとき、ユーザーは、各リリース アセットの作成日を見ることができます。詳しくは、「[リポジトリのリリースとタグを表示する](/repositories/releasing-projects-on-github/viewing-your-repositorys-releases-and-tags)」をご覧ください。

|
        # https://github.com/github/releases/issues/2279
        - "自動生成されるリリース ノートを使ってリリースを作成するとき、ユーザーは、以前のリリースとして示されるタグを確認してから、異なるタグを選んで、以前のリリースとして指定することができます。詳しくは、「[自動生成リリース ノート](/repositories/releasing-projects-on-github/automatically-generated-release-notes)」をご覧ください。"

    - heading: Markdown
      notes:
        # https://github.com/github/releases/issues/2260
        - |Web インターフェイスでの Markdown の編集が改善されました。



- ユーザーがテキストを選んで URL を貼り付けた後、選ばれたテキストは、貼り付けられた URL への Markdown リンクになります。

- ユーザーがスプレッドシートのセルまたは HTML のテーブルを貼り付けると、結果のテキストはテーブルとしてレンダリングされます。

- ユーザーがリンクを含むテキストをコピーすると、貼り付けられたテキストに含まれるリンクは Markdown リンクになります。



詳しくは、「[基本的な書き方とフォーマットの構文](/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#links)」をご覧ください。

|
        # https://github.com/github/releases/issues/2258
        - |Markdown ファイルを Web インターフェイスで編集しているとき、**[プレビュー]** タブをクリックすると、編集していた場所にプレビューが自動的にスクロールします。スクロールする場所は、**[プレビュー]** タブをクリックする前のカーソルの位置に基づきます。

|
  changes:
    - Web インターフェイス内のリンクやボタンなどの対話型要素は、キーボードでフォーカスを設定するとアウトラインが表示され、ページ上で現在位置を見つけるのに役立ちます。さらに、フォーカスを設定すると、フォーム フィールドの枠線のコントラストが高くなります。
    - 新しい issue または pull request の作成中にページを最新の情報に更新する場合、担当者、レビュー担当者、ラベル、プロジェクトはすべてそのままになります。

  known_issues:
    - "{% data variables.product.prodname_ghe_server %} インスタンスを設定したばかりでユーザーがいない場合、攻撃者が最初の管理者ユーザーを作成できました。"
    - カスタムのファイアウォール規則は、アップグレード プロセス中に削除されます。
    - "[Web インターフェイスからアップロードされた](https://github.com/blog/2105-upload-files-to-your-repositories) Git LFS 追跡ファイルが誤ってリポジトリに直接追加されます。"
    - 同じリポジトリ内の BLOB への固定リンクが含まれ、その BLOB のファイル パスが 255 文字を超える場合、issue はクローズできません。
    - "GitHub Connect で [Users can search GitHub.com]\\(ユーザーが GitHub.com を検索できる\\) が有効になっている場合、プライベートと内部リポジトリの issue は GitHub.com の検索結果に含まれません。"
    - "{% data variables.product.prodname_registry %} npm レジストリが、メタデータ応答で時刻値を返さなくなります。これは、パフォーマンスの大幅な向上を見込んで行われました。メタデータ応答の一部として時刻値を返すために必要なすべてのデータを引き続き保持します。また、既存のパフォーマンスの問題を解決したら、将来的にはこの値を再び返す予定です。"
    - pre-receive フックの処理に固有のリソース制限が、一部の pre-receive フックのエラーを引き起こす場合があります。
    - 別のホストで作成されたバックアップからインスタンスを復元した後、Actions のサービスを再起動する必要があります。
    - リポジトリの設定で、読み取りアクセス権を持つユーザーにディスカッションの作成を許可するオプションを有効にしても、この機能は有効になりません。
    - ユーザーが既存の issue をディスカッションに変換できない場合があります。
    - "シークレット スキャンのカスタム パターンの末尾の区切り記号は `.*` です (具体的には [After secret]\\(シークレットの後\\) フィールド)。この区切り記号のためにリポジトリ間でのシークレットのスキャンで不整合が発生し、リポジトリの履歴にスキャンが完了していないギャップができる場合があります。増分スキャンも影響を受ける場合があります。スキャンでの問題を避けるには、パターンの末尾を変更して、`.*` 区切り記号を削除します。"
    - '{% data reusables.release-notes.ghas-3.4-secret-scanning-known-issue %}'

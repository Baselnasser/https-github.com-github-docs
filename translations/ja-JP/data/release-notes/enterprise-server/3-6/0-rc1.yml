date: '2022-07-26'
release_candidate: true
deprecated: false
intro: |
  {% note %}

  **ノート:** {% data variables.product.product_location %}がリリース候補ビルドを実行しているなら、ホットパッチでのアップグレードはできません。リリース候補は、テスト環境でのみ実行することをおすすめします。

  {% endnote %}

  アップグレード手順については「[{% data variables.product.prodname_ghe_server %}のアップグレード](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)」を参照してください。
sections:
  features:
    - 
      heading: Infrastructure
      notes:
        - |
          リポジトリキャッシュは一般利用が可能になりました。リポジトリキャッシュは、分散している開発者のGitの読み取りパフォーマンスを向上させ、プッシュのワークフローに影響することなくデータローカリティとGeo-replicationの利便性を提供します。一般利用のリリースで、GitHub Enterprise ServerはGitとGit LFSデータの双方をキャッシュします。詳しい情報については「[リポジトリキャッシュについて](/admin/enterprise-management/caching-repositories/about-repository-caching)」を参照してください。
    - 
      heading: インスタンスのセキュリティ
      notes:
        - |
          GitHubはGitHub Enterprise ServerへのすべてのSSHコネクションのサポートされているアルゴリズムとハッシュ関数を変串、暗号化されていない未認証のGitプロトコルを無効化し、オプションでEd25519干す尾tキーのアドバータイズメントを許可します。詳しい情報については[GitHub Blog](https://github.blog/2022-06-28-improving-git-protocol-security-on-github-enterprise-server/)と以下の記事を参照してください。

          -「[インスタンスへのSSHコネクションの設定](/admin/configuration/configuring-your-enterprise/configuring-ssh-connections-to-your-instance)」
          -「[Enterpriseでのリポジトリ管理ポリシーの施行](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#configuring-anonymous-git-read-access)」
          -「[インスタンスのホストキーの設定](/admin/configuration/configuring-your-enterprise/configuring-host-keys-for-your-instance)」
        - |
          インスタンスに接続してくるSMTPコネクションにTLS暗号化を要求できます。詳しい情報については「[通知のメールの設定](/admin/configuration/configuring-your-enterprise/configuring-email-for-notifications)」を参照してください。
    - 
      heading: 監査ログ
      notes:
        - |
          インスタンスのAudit logとGitイベントを、Amazon S3、Azure Blob Storage、Azure Event Hubs、Google Cloud Storage、Splunkにストリームできます。Audit logのストリーミングはパブリックベータであり、変更されることがあります。詳しい情報については「[EnterpriseのAudit logのストリーミング](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise)」を参照してください。
    - 
      heading: GitHub Connect
      notes:
        - |
          Server Statisticsは一般提供になりました。Server Statisticsは、集計された利用データをGitHub Enterprise Serverインスタンスから収集し、そのデータはOrganizationの要求の予測を向上させ、チームの働きかたを理解し、GitHub Enterprise Serverから得られる価値を示すために利用できます。詳しい情報については「[Server Statisticsについて](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics)」を参照してください。
    - 
      heading: 管理者の体験
      notes:
        - |
          Enterpriseオーナーは、インスタンス上のOrganizationにメンバーあるいはオーナーとして、Enterpriseアカウントの**Organizations**ページから参加できます。詳しい情報については「[Enerpriseが所有するOrganizationでの自分のロールの管理](/admin/user-management/managing-organizations-in-your-enterprise/managing-your-role-in-an-organization-owned-by-your-enterprise)」を参照してください。
        - |
          Enterpriseのオーナーは、設定されたグローバルなアナウンスのバナーの却下をユーザに許可できます。詳しい情報については「[Enterpriseでのユーザメッセージのカスタマイズ](/admin/user-management/managing-users-in-your-enterprise/customizing-user-messages-for-your-enterprise#creating-a-global-announcement-banner)」を参照してください。
    - 
      heading: GitHub Advanced Security
      notes:
        - |
          GitHub Advanced Securityのライセンスがあるインスタンス上のユーザは、Organizationオーナーもしくはリポジトリの管理者がコードセキュリティもしくは分析の機能を有効かあるいは無効化したときにトリガーされるwebbookイベントを受信するよう選択できます。詳しい情報については、以下のドキュメンテーションを参照してください。

          -webhookのドキュメンテーションの「[webhookイベントとペイロード](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#security_and_analysis)」
          -「[Organizationのセキュリティ及び分析設定の管理](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/managing-security-and-analysis-settings-for-your-organization)」
          -「[リポジトリのセキュリティ及び分析機能の管理](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository)」
        - |
          GitHub Advanced Securityのライセンスがあるインスタンス上のユーザは、Web UIから、あるいはREST APIを通じてCode scanningアラートを却下する際に、コメントを追加することもできます。却下のコメントは、イベントタイムラインに表示されます。ユーザは、REST APIを通じて却下のコメントを追加したり取得したりもできます。詳しい情報については「[Pull Request中のCode scanningアラートのトリアージ](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/triaging-code-scanning-alerts-in-pull-requests#dismissing-an-alert-on-your-pull-request)」及びREST APIドキュメンテーションの「[Code scanning](/rest/code-scanning#update-a-code-scanning-alert)」を参照してください。
        - |
          GitHub Advanced Securityのライセンスがあるインスタンスでは、Secret scanningがWebエディタ内でのシークレットの漏洩を防いでくれます。詳しい情報については「[Secret scanningでのプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning#using-secret-scanning-as-a-push-protection-from-the-web-ui)」を参照してください。
        - |
          Enterpriseのオーナーと、GitHub Advanced Securityのライセンスがあるインスタンス上のユーザは、Secret scanningのアラートと、Secret scanningのプッシュ保護のバイパスをEnterpriseとOrganizationのAudit log、そしてREST APIを通じて見ることができます。詳しい情報については以下のドキュメンテーションを参照してください。

          -「[Secret scanningでのプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)」
          -「[EnterpriseのAudit logイベント](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#secret_scanning_push_protection-category-actions)」
          -「[OrganizationのAudit logのレビュー]/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#secret_scanning_push_protection-category-actions)」
          -REST APIドキュメンテーションの「[Secret scanning](/rest/secret-scanning#list-secret-scanning-alerts-for-an-enterprise)」
        - |
          GitHub Advanced Securityのライセンスがあるインスタンス上のEnterpriseのオーナーは、EntepriseのカスタムのSecret scanningパターンのdry runを実行でき、すべてのユーザはパターンを編集する際にdry runを実行できます。dry runを行うことによって、パターンがインスタンス全体に与える影響を理解し、公開してアラートを生成する前にパターンを磨き上げることができます。詳しい情報については「Secret scanningのカスタムパターンの定義](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)」を参照してください。
        - |
          GitHub Advanced Securityのライセンスがあるインスタンス上のユーザは、Secret scanningのアラートを取得する際にREST APIで`sort`及び`direction`パラメータを使い、アラートの`created`あるいは`updated`フィールドに基づいてソートすることができます。この新しいパラメータはインスタンス全体で、あるいは個々のOrganizationあるいはリポジトリで使用できます。詳しい情報については以下のドキュメンテーションを参照してください。

          -「[EntepriseでのSecret scanningアラートのリスト](/rest/secret-scanning#list-secret-scanning-alerts-for-an-enterprise)」
          -「[OrganizationでのSecret scanningアラートのリスト](/rest/secret-scanning#list-secret-scanning-alerts-for-an-organization)」
          -「[リポジトリでのSecret scanningアラートのリスト](/rest/secret-scanning#list-secret-scanning-alerts-for-a-repository)」
          -REST APIドキュメンテーションの「[Secret Scanning](/rest/secret-scanning)」
        - |
          `github/codeql-go`リポジトリの内容は、CodeQLがサポートしている他のすべてのプログラミング言語のための同様のライブラリとともに置くために`github/codeql`リポジトリに移されました。オープンソースのCodeQLクエリ、ライブラリ、GitHubのCodeQLコード分析ツールと合わせてGoプログラミング言語で書かれた分析のコードベースのための抽出ツールは、新しい場所にあります。既存のワークフローの移行のガイダンスを含む詳しい情報については[github/codeql-go#741](https://github.com/github/codeql-go/issues/741)を参照してください。
    - 
      heading: Dependabot
      notes:
        - |
          GitHub Advanced Securityのライセンスがあるインスタンス上のEnterpriseオーナーは、リポジトリ中心のアプリケーションセキュリティリスクのビュー、すべてのSecret scanning及びDependabotアラートのアラート中心のビューを含む、インスタンス全体に対するDependabotアラートの概要を見ることができます。このビューはベータであり、変更されることがあり、アラート中心のCode scanningのビューはGitHub Enterprise Serverの将来のリリースで計画されています。詳しい情報については「[セキュリティの概要の表示](/code-security/security-overview/viewing-the-security-overview#viewing-the-security-overview-for-an-enterprise)」を参照してください。
        - |
          Dependabotアラートは、リポジトリのコードが脆弱性のある関数を呼び出すかをユーザに示します。個々のアラートは"vulnerable call"ラベルとコード片を表示し、ユーザは`has:vulnerable-calls`で検索をすればフィルタリングできます。脆弱性のある関数は、[GitHub Advisory Database](https://github.com/advisories)への公開の間にキュレーションされます。新しくやってくるPythonのアドバイザリはサポートされ、GitHubは過去のPythonのアドバイザリに対する既知の脆弱性のある関数をさかのぼっていきます。Pythonでのベータテストのあと、GitHubは他のエコシステムのサポートを追加していきます。詳しい情報については「[Dependabotアラートの表示と更新](/code-security/dependabot/dependabot-alerts/viewing-and-updating-dependabot-alerts)」を参照してください。
        - |
          ユーザは複数のDependabotアラートを選択し、それらを却下もしくは再オープンできます。たとえば**Closed alerts**タブから以前に却下された複数のアラートを選択し、一度にそれらを再オープンできます。詳しい情報については「[Dependabotアラートについて](/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/about-alerts-for-vulnerable-dependencies)」を参照してください。
        - |
          Dependabotは、TypeScriptプロジェクトにおいて対応するパッケージとともに`@types`依存関係をアップデートします。この変更前は、ユーザはパッケージと対応する`@types`パッケージに対して個別のPull Requestを見ていました。この機能は、_package.json_ファイル中でプロジェクトの`devDependencies`内に`@types`パッケージを含むリポジトリで自動的に有効化されます。この動作は、`dependabot.yml`ファイル中の[`ignore`](/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#ignore)フィールドを`@types/*`に設定することによって無効化できます。詳しい情報については「[Dependabotバージョンアップデートについて](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates)」及び「[_dependabot.yml_ファイルの設定オプション](/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file)」を参照してください。
    - 
      heading: コードセキュリティ
      notes:
        - |
          GitHub Actionsは、依存関係をスキャンすることによってユーザのPull Requestに対して依存関係のレビューを強制でき、関連するセキュリティ脆弱性に対してユーザに警告を発することができます。任意の2つのリビジョン間で依存関係のdiffを取る`dependency-review-action`アクションは、新しいAPIエンドポイントでサポートされています。詳しい除法については「[依存関係レビューについて](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement)」を参照してください。
        - |
          依存関係グラフは、Rustについて_Cargo.toml_及び_Cargo.lock_ファイルを検出します。これらのファイルは**Insights**タブの**Dependency graph**セクションに表示されます。ユーザは、Rustの依存関係に関連する脆弱性について、Dependabotアラートとアップデートを受け取ります。パッケージからリポジトリへのマッピングを含むパッケージのメタデータは、後日追加されます。詳しい情報については「[依存関係グラフについて](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)」を参照してください。
        - |
          インスタンスでGitHub Connectが有効化されているなら、ユーザは[GitHub Advisory Database](https://github.com/advisories)内のセキュリティアドバイザリの改善に貢献できます。貢献するには、アドバイザリの詳細を表示しているときに**Suggest improvements for this vulnerability（この脆弱性に改善を提案）**をクリックしてください。詳しい情報については以下の記事を参照してください。

          - 「[GitHub Connectの管理](/admin/configuration/configuring-github-connect/managing-github-connect)」
          - GitHub Enterprise Cloudのドキュメンテーションの「「GitHub Advisory Database内のセキュリティ脆弱性の閲覧](/enterprise-cloud@latest/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/browsing-security-vulnerabilities-in-the-github-advisory-database)」
          - GitHub Enterprise Cloudのドキュメンテーションの「[リポジトリのGitHub Security Advisoriesについて](/enterprise-cloud@latest/code-security/repository-security-advisories/about-github-security-advisories-for-repositories)」
          - GitHub Enterprise Cloudのドキュメンテーションの「[GitHub Advisory Database中のセキュリティアドバイザリの編集](/enterprise-cloud@latest/code-security/supply-chain-security/managing-vulnerabilities-in-your-projects-dependencies/editing-security-advisories-in-the-github-advisory-database)」
    - 
      heading: GitHub Actions
      notes:
        - |
          再利用可能なワークフローを呼び出すワークフロー内で、ユーザは`secrets: inherit`でシークレットを再利用可能なワークフローに渡すことができます。詳しい情報については「[ワークフローの再利用](/actions/using-workflows/reusing-workflows#using-inputs-and-secrets-in-a-reusable-workflow)」を参照してください。
        - |
          GitHub Actionsを使う際に、他者にレビューされていない変更を保護されたブランチにマージしてしまうリスクを下げるために、Enterpriseのオーナーとリポジトリ管理者は、アクションがPull Requestを作成しないようにすることができます。Organizationオーナーが以前にこの制限を有効化しているかもしれません。詳しい情報については以下の記事を参照してください。

          - 「[EnterpriseでのGitHub Actionsに対するポリシーの施行](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-policies-for-github-actions-in-your-enterprise#preventing-github-actions-from-creating-or-approving-pull-requests)」
          - 「[OrganizationでのGitHub Actionsの無効化もしくは制限](/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-creating-or-approving-pull-requests)」
          - 「[リポジトリでのGitHub Actionsの設定の管理](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#preventing-github-actions-from-creating-or-approving-pull-requests)」
        - |
          ユーザは、`workflow_dispatch`及び`workflow_call`でトリガーされる単一のワークフローを書き、`inputs`コンテキストで入力値にアクセスできます。以前は`workflow_dispatch`の入力はイベントのペイロードで、再利用可能かつ手動でトリガーされる1つのワークフローを書きたいワークフローの作者には困難が増していました。`workflow_dispatch`でトリガーされるワークフローでは、互換性を保つために引き続き`github.event.inputs`コンテキストで入力が利用できます。詳しい情報については「[コンテキスト](/actions/learn-github-actions/contexts#inputs-context)」を参照してください。
        - |
          ジョブの結果をまとめるために、ユーザはMarkdownを生成し、そのコンテンツをジョブのまとめとして公開できます。たとえば、GitHub Actionsでテストを実行したあと、まとめはテストのパス、失敗、スキップの概要を提供でき、ログのアウトプットを完全にレビューする必要を下げてくれるかもしれません。詳しい情報については「[GitHub Actionsのワークフローコマンド](/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary)」を参照してください。
        - |
          ワークフローの再実行の際のジョブの実行の失敗の診断をやりやすくするために、ユーザはジョブの実行と環境に関する情報を出力するデバッグロギングを有効化できます。詳しい情報については「[ワークフローとジョブの再実行](/actions/managing-workflow-runs/re-running-workflows-and-jobs)」及び[ワークフローの実行ログの利用](/actions/monitoring-and-troubleshooting-workflows/using-workflow-run-logs#viewing-logs-to-diagnose-failures)」を参照してください。
        - |
          GitHub Actions用のセルフホストランナーを管理しているなら、実行するスクリプトを定義することによって、ワークフローの実行の前後のランナー自体の一貫した状態を保つことができます。スクリプトを使うことによって、ユーザがこれらのステップをワークフローに手動で取り入れてもらうことが必要なくなります。ジョブの前後のスクリプトはベータであり、変更されることがあります。詳しい情報については「[ジョブの前後でのスクリプトの実行](/actions/hosting-your-own-runners/running-scripts-before-or-after-a-job)」を参照してください。
    - 
      heading: GitHub Packages
      notes:
        - |
          Enterpriseのオーナーは、GitHub DockerレジストリからのコンテナイメージをGitHub Containerレジストリに移行できます。Containerレジストリには以下の利点があります。

          - Organization内でのコンテナの共有を改善します
          - 詳細なアクセス権限の適用が可能です
          - パブリックなコンテナイメージの匿名共有ができます
          - DockerイメージのホストにおいてOCI標準を実装します

          Containerレジストリはベータであり、変更されることがあります。詳しい情報については「[EnterpriseのDockerレジストリからContainerレジストリへの移行](/admin/packages/migrating-your-enterprise-to-the-container-registry-from-the-docker-registry)」を参照してください。
    - 
      heading: コミュニティ体験
      notes:
        - |
          GitHub Discussionsは、GitHub Enterprise Serverで利用できます。GitHub Discussionsは、質問し、発想を共有し、つながりを作るために集まる場所を提供します。詳しい情報については「[GitHub Discussions](/discussions)」を参照してください。
        - |
          Enterpriseのオーナは、ユーザ名あるいはフルネームがインターナルあるいはパブリックなリポジトリに表示されるかを制御するポリシーを設定できます。詳しい情報については「[Enterpriseでのリポジトリ管理の施行](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-the-display-of-member-names-in-your-repositories)」を参照してください。
    - 
      heading: Organization
      notes:
        - |
          ユーザはメンバー専用のRESTMEをOrganizationで作成できます。詳しい情報については「[Organizatonのプロフィールのカスタマイズ](/organizations/collaborating-with-groups-in-organizations/customizing-your-organizations-profile)」を参照してください。
        - |
          Organizationのオーナーは、新しい**Pin repository（リポジトリをピン止め）**ドロップダウンを使ってリポジトリから直接Organizationのプロフィールにリポジトリをピン止めできます。ピン止めされたパブリックリポジトリは、インスタンスのすべてのユーザに表示されますが、パブリック、プライベート、インターナルリポジトリはOrganizationのメンバーだけが見ることができます。
    - 
      heading: リポジトリ
      notes:
        - |
          フォークを作成する際に、ユーザはフォークの名前をカスタマイズできます。詳しい情報については「[リポジトリのフォーク](/get-started/quickstart/fork-a-repo)」を参照してください。
        - |
          ユーザは、**Restrict pushes that create matching branches（マッチするブランチを作成するプッシュの制限）**ブランチ保護ルールで、設定された名前のパターンにマッチするブランチの作成をブロックできます。たとえば、リポジトリのデフォルトブランチを`master`から`main`に変更した場合、リポジトリの管理者はそれ以降`master`ブランチの作成やプッシュを防ぐことができます。詳しい情報については「[保護されたブランチについて](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#restrict-who-can-push-to-matching-branches)」及び[ブランチの保護ルールの管理](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule#creating-a-branch-protection-rule)」を参照してください。
        - |
          ユーザは、リポジトリの**Branches（ブランチ）**ページから、**New branch（新規ブランチ）**をクリックすることで直接ブランチを作成できます。詳しい情報については「[リポジトリ内でのブランチの作成と削除(/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository)」を参照してください。
        - |
          ユーザはオープンなPull Requestに関連づけられたブランチを削除できます。詳しい情報については「[リポジトリ内でのブランチの作成と削除](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository)」を参照してください。
        - |
          複数のライセンスがあるリポジトリは、すべてのライセンスを{% octicon "code" aria-label="The code icon" %}**Code**タブの"About"サイドバーに表示します。詳しい情報については「[リポジトリのライセンス](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)」を参照してください。
        - ユーザがファイルの名前を変更したり、新しいディレクトリに移動させたりした場合、少なくともファイルの内容の半分が同じであれば、コミット履歴は`git log --follow`と同じようにファイルの名前が変更されたことを示します。詳しい情報については[GitHub Blog](https://github.blog/changelog/2022-06-06-view-commit-history-across-file-renames-and-moves/)を参照してください。
        - |
          ユーザは、Pull Requestがマージできるためには、そのPull Requestに関連づけられたブランチのデプロイが成功していることを必要とすることができます。詳しい情報については「[保護されたブランチについて](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-deployments-to-succeed-before-merging)」及び「[ブランチ保護ルールの管理](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule)」を参照してください。
        - |
          Enterpriseのオーナーは、Organizationのオーナーがインスタンスのリポジトリにコラボレータを招待するのを防ぐことができます。詳しい情報については「[リポジトリへのコラボレータの招待に関するポリシーの施行](/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-collaborators-to-repositories)」を参照してください。
        - |
          ユーザは、例外をサポートするブランチ保護ルールに対してGitHub Appに例外を許可できます。詳しい情報については「[アプリケーションについて](/developers/apps/getting-started-with-apps/about-apps)」及び「[ブランチ保護ルールの管理](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule)」を参照してください。
    - 
      heading: コミット
      notes:
        - |
          期限切れになって取り消された公開GPG署名キーについて、ユーザがコミットをキーが有効なうちに行っていれば、GitHub Enterprise ServerはGitコミット署名を検証し、コミットが検証されたと表示します。ユーザは、期限切れあるいは取り消されたGPGキーをアップロードすることもできます。詳しい情報については「[コミット署名の検証について](/authentication/managing-commit-signature-verification/about-commit-signature-verification)」を参照してください。
        - |
          コミットがリポジトリを管理するルールやライセンスの下で編集されたことを確認するために、Organizationオーナー及びリポジトリ管理者は、開発者にWebインターフェースを通じて行ったコミットにサインオフすることを要求できるようになりました。詳しい情報については「[Organizationのコミットサインオフポリシーの管理](/organizations/managing-organization-settings/managing-the-commit-signoff-policy-for-your-organization)」及び「[リポジトリのコミットサインオフポリシーの管理](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/managing-the-commit-signoff-policy-for-your-repository)」を参照してください。
    - 
      heading: プルリクエスト
      notes:
        - |
          Pull Requestの**Files changed（変更されたファイル）**タブにあるファイルツリーを使って、ユーザは変更されたファイルに見ていき、変更のサイズとスコープを理解し、レビューに集中できます。このファイルツリーは、Pull Requestが少なくとも2つのファイルを変更しており、ブラウザのウィンドウが十分に広いときに表示されます。詳しい情報については「[Pull Requestで提案された変更のレビュー(/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-proposed-changes-in-a-pull-request)」及び「[Pull Requestのファイルのフィルタリング](/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/filtering-files-in-a-pull-request)」を参照してください。
        - |
          ユーザは、すべてのsquashマージでPull Requestのタイトルをコミットメッセージとして使うことをデフォルトにできます。詳しい情報については「[Pull Requestのコミットsquashの設定](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests)」を参照してください。
    - 
      heading: リリース
      notes:
        - |
          特定のリリースの詳細を表示させるとき、ユーザは各リリースのアセットの作成日を見ることができます。詳しい情報については「[リポジトリのリリースとタグの表示](/repositories/releasing-projects-on-github/viewing-your-repositorys-releases-and-tags)」を参照してください。
        - 自動的にリリースされたリリースノート付きでリリースを作成する場合、ユーザは以前のリリースとして識別されるタグを見ることができ、そして以前のリリースとして指定する異なるタグを選択できます。詳しい情報については「[自動的に生成されるリリースノート](/repositories/releasing-projects-on-github/automatically-generated-release-notes)」を参照してください。
    - 
      heading: Markdown
      notes:
        - |
          WebインターフェースでのMarkdownの編集が改善されました。

          - ユーザがテキストを選択してURLを貼り付けると、選択されたテキストは貼り付けられたURLへのMarkdownリンクになります。
          - ユーザがスプレッドシートのセルもしくはHTMLテーブルを貼り付けると、その結果のテキストは表として描画されます。
          - ユーザがリンクを含むテキストをコピーすると、貼り付けられたテキストはそのリンクをMarkdownのリンクとして含みます。

          詳しい情報については「[基本的な書き方とフォーマットの構文](/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#links)」を参照してください。
        - |
          MarkdownのファイルをWebインターフェースで編集する場合、**Preview（プレビュー）**タブをクリックすると自動的に編集中のプレビューの場所までスクロールします。スクロールの場所は、**Preview（プレビュー）**タブをクリックする前のカーソルの場所に基づきます。
  changes:
    - リンクやボタンなどのWebインターフェースにおけるインタラクティブな要素は、キーボードでフォーカスされたときに視覚的なアウトラインを表示し、ユーザがページ上の現在の場所を見つけやすくします。加えて、フォームのフィールドはフォーカスされたときに、高コントラストのアウトラインを持つようになります。
    - 新しいIssueやPull Requestを作成する際にユーザがページを更新した場合、アサインされた人、レビュー担当者、ラベル、プロジェクトはすべて保持されます。
  known_issues:
    - 新しくセットアップされたユーザを持たない{% data variables.product.prodname_ghe_server %}インスタンスで、攻撃者が最初の管理ユーザを作成できました。
    - アップグレードの過程で、カスタムのファイアウォールのルールが削除されます。
    - Git LFSが追跡するファイル[Webインターフェースからアップロードされたもの](https://github.com/blog/2105-upload-files-to-your-repositories)が、不正にリポジトリに直接追加されてしまいます。
    - 同じリポジトリ内のファイルパスが255文字を超えるblobへのパーマリンクを含むIssueをクローズできませんでした。
    - GitHub Connectで"Users can search GitHub.com"が有効化されている場合、GitHub.comの検索結果にプライベート及びインターナルリポジトリのIssueが含まれません。
    - '{% data variables.product.prodname_registry %}のnpmレジストリは、メタデータのレスポンス中で時間の値を返さなくなります。これは、大きなパフォーマンス改善のために行われました。メタデータレスポンスの一部として時間の値を返すために必要なすべてのデータは保持し続け、既存のパフォーマンスの問題を解決した将来に、この値を返すことを再開します。'
    - pre-receive フックの処理に固有のリソース制限によって、pre-receive フックに失敗するものが生じることがあります。
    - 他のホストで取られたバックアップからインスタンスを復元したあと、Actionsサービスは再起動する必要があります。
    - リポジトリの設定で、読み取りアクセスを持つユーザにディスカッションの作成を許可するオプションを有効化しても、この機能は有効化されません。
    - ユーザが既存のIssueをディスカッションに変換できないことがあります。
    - Secret scanningのカスタムパターンは、特に"After secret"パターンにおいて`.*`を終了の区切り文字として持ちます。この区切り文字は、リポジトリにまたがるシークレットのスキャンにおいて矛盾を生じさせ、スキャンがまったく完了していないというリポジトリの履歴のギャップに気づくかもしれません。インクリメンタルなスキャンにも影響があるかもしれません。スキャンの問題を回避するために、パターンの終わりから`.*`という区切り文字を取り除く修正をしてください。

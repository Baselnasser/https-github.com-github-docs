date: '2021-12-07'
intro: "アップグレードの手順については、「[{% data variables.product.prodname_ghe_server %} のアップグレード](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)」を参照してください。<br><br>**注:** {% data variables.product.prodname_ghe_server %} 3.3 にアップグレードした後に、{% data variables.product.prodname_actions %} の自動起動に失敗することがあるという issue を認識しています。解決するには、SSH を使ってアプライアンスに接続し、`ghe-actions-start` コマンドを実行してください。"
sections:
  features:
    - heading: セキュリティ マネージャー ロール
      notes:
        # https://github.com/github/releases/issues/1610
        - |Organization のオーナーは、リポジトリのセキュリティ アラートと設定を管理するためのアクセス権をチームに付与できるようになりました。"セキュリティ マネージャー" ロールは、どのチームにも適用でき、チームのメンバーに次のアクセス権を付与します。



- Organization 内のすべてのリポジトリに対する読み取りアクセス。

- Organization 内のすべてのセキュリティ アラートに対する書き込みアクセス。

- Organization レベルのセキュリティ タブへのアクセス。

- 組織レベルのセキュリティ設定に対する書き込みアクセス。

- リポジトリ レベルのセキュリティ設定に対する書き込みアクセス。



セキュリティ マネージャーロールはパブリック ベータ版として使用可能であり、変更される可能性があります。詳細については、「[Organization でのセキュリティ マネージャーの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)」を参照してください。[2022-07-29 更新]

|
    - heading: 'GitHub Actions 用のエフェメラル セルフホステッド ランナーと自動スケーリング用の新しい Webhook'
      notes:
        # https://github.com/github/releases/issues/1378
        - |{% data variables.product.prodname_actions %} は、エフェメラル (単一ジョブの) セルフホステッド ランナーと新しい [`workflow_job`](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_job) Webhook をサポートし、ランナーの自動スケーリングが簡単になりました。



エフェメラル ランナーは、各ジョブをクリーンなイメージで実行する必要がある自己管理環境に適しています。ジョブが実行されると、エフェメラル ランナーは {% data variables.product.product_location %} から登録が自動的に解除され、ジョブ後の管理を実行できます。



エフェメラル ランナーを新しい `workflow_job` Webhook と組み合わせて、{% data variables.product.prodname_actions %} ジョブの要求に応じてセルフホステッド ランナーを自動的にスケーリングできます。



詳細については、「[セルフホステッド ランナーでの自動スケーリング](/actions/hosting-your-own-runners/autoscaling-with-self-hosted-runners)」と「[Webhook イベントとペイロード](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_job)」を参照してください。

|
    - heading: 'ダーク ハイ コントラスト テーマ'
      notes:
        # https://github.com/github/releases/issues/1539
        - |{% data variables.product.prodname_ghe_server %} 3.3 で、前景と背景の要素の間のコントラストがより大きいダーク ハイ コントラスト テーマが利用可能になりました。このリリースでは、すべての {% data variables.product.company_short %} テーマでカラー システムの改善も行われています。



![外観設定ページで既定のダーク テーマとダーク ハイ コントラストを切り替えるアニメーション イメージ](https://user-images.githubusercontent.com/334891/123645834-ad096c00-d7f4-11eb-85c9-b2c92b00d70a.gif)



テーマの変更の詳細については、「[テーマ設定を管理する](/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/managing-your-theme-settings)」を参照してください。

|
  changes:
    - heading: 管理の変更
      notes:
        # https://github.com/github/releases/issues/1666
        - '{% data variables.product.prodname_ghe_server %} 3.3 では、リポジトリのメンテナンス、特に到達不能なオブジェクトを多く含むリポジトリのメンテナンスが改善されました。{% data variables.product.prodname_ghe_server %} 3.3 にアップグレードした後の最初のメンテナンス サイクルは、完了するまでに通常よりも時間がかかる場合があることに注意してください。'

        # https://github.com/github/releases/issues/1533
        - '{% data variables.product.prodname_ghe_server %} 3.3 には、地理的に分散したチームと CI インフラストラクチャ用のリポジトリ キャッシュのパブリック ベータ版が含まれています。リポジトリ キャッシュで、追加地域で利用できるリポジトリの読み取り専用コピーが保持され、クライアントがプライマリ インスタンスから重複した Git コンテンツをダウンロードするのを防ぎます。詳細については、「[リポジトリのキャッシュについて](/admin/enterprise-management/caching-repositories/about-repository-caching)」を参照してください。'

        # https://github.com/github/releases/issues/1616
        - '{% data variables.product.prodname_ghe_server %} 3.3 では、ユーザー偽装プロセスが改善されました。偽装セッションで偽装の正当な理由が必要となり、アクションは、偽装されたユーザーとして実行されたものとして監査ログに記録され、偽装されたユーザーは、エンタープライズ管理者から、偽装されているというメール通知を受け取るようになりました。詳細については、「[ユーザーの偽装](/enterprise-server@3.3/admin/user-management/managing-users-in-your-enterprise/impersonating-a-user)」を参照してください。'

        # https://github.com/github/releases/issues/1609
        - "Git および {% data variables.product.prodname_actions %} アクティビティに関連するイベントなど、監査ログに公開される一連のイベントの増加を促進するために、新しいストリーム処理サービスが追加されました。"

        # https://github.com/github/docs-content/issues/5801
        - "{% data variables.product.prodname_github_connect %} のデータ接続レコードに、有効になっている {% data variables.product.prodname_github_connect %} 機能のリストが含まれるようになりました。[2021-12-09 更新]"

    - heading: トークンの変更
      notes:
        # https://github.com/github/releases/issues/1390
        - |新規および既存の個人用アクセス トークンに有効期限を設定できるようになりました。古いトークンが漏洩してセキュリティが侵害されるのを防ぐために、個人用アクセス トークンに有効期限を設定することを強くお勧めします。トークンの所有者は、有効期限が近づいているトークンを更新する時期になるとメールを受け取ります。有効期限が切れたトークンを再生成して、元のトークンとプロパティが同じ複製トークンをユーザーに提供します。



{% data variables.product.company_short %} API で個人用アクセス トークンを使うと、新しい `GitHub-Authentication-Token-Expiration` ヘッダーが応答に含まれ、トークンの有効期限が示されます。詳細については、「[個人用アクセス トークンの作成](/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token)」を参照してください。

|
    - heading: '通知の変更'
      notes:
        # https://github.com/github/releases/issues/1625
        - 'ディスカッションからの通知メールの件名に `(Discussion #xx)` が含まれるようになり、ディスカッションを参照するメールを認識してフィルター処理できます。'

    - heading: 'リポジトリの変更'
      notes:
        # https://github.com/github/releases/issues/1735
        - プライベート リポジトリやインターナル リポジトリと同様に、パブリック リポジトリの名前の横に `Public` ラベルが表示されるようになりました。この変更により、パブリック リポジトリの識別が容易になり、プライベート コードの誤ったコミットを防ぎます。

        # https://github.com/github/releases/issues/1733
        - ブランチ セレクター メニューを使う際にブランチ名を正確に指定すると、一致したブランチのリストの一番上に結果が表示されるようになりました。従来は、正確なブランチ名の一致がリストの一番下に表示されることがありました。

        # https://github.com/github/releases/issues/1673
        - "対応するオープン状態の pull request があるブランチを表示する場合、{% data variables.product.prodname_ghe_server %} から pull request に直接リンクするようになりました。従来は、ブランチ比較を使ってコントリビュートするか、新しい pull request を開くように求めるプロンプトが表示されました。"

        # https://github.com/github/releases/issues/1670
        - "ボタンをクリックして、ファイルの生の内容全体をクリップボードにコピーできるようになりました。従来は、生ファイルを開き、すべて選んでからコピーする必要がありました。ファイルの内容をコピーするには、ファイルに移動して、ツール バーの {% octicon \"copy\" aria-label=\"The copy icon\" %} をクリックします。この機能は現在、一部のブラウザーでのみ使用できることに注意してください。"

        # https://github.com/github/releases/issues/1571
        - "新しいリリースを作成するときに、テキスト フィールドでタグを指定するのではなく、ドロップダウン セレクターを使ってタグを選択または作成できるようになりました。詳細については、「[リポジトリのリリースを管理する](/repositories/releasing-projects-on-github/managing-releases-in-a-repository)」を参照してください。"

        # https://github.com/github/releases/issues/1752
        - "双方向の Unicode テキストが含まれるファイルを表示すると、警告が表示されるようになりました。双方向の Unicode テキストは、ユーザー インターフェイスの表示とは異なるように解釈またはコンパイルできます。たとえば、非表示で双方向の Unicode 文字列を使って、ファイル内のテキスト セグメントを入れ替えることができます。これらの文字列の置換の詳細については、[{% data variables.product.prodname_dotcom %} の変更ログ](https://github.blog/changelog/2021-10-31-warning-about-bidirectional-unicode-text/)を参照してください。"

        # https://github.com/github/releases/issues/1416
        - "`CITATION.cff` ファイルを使って、作業を引用する方法を他のユーザーに知らせることができるようになりました。`CITATION.cff` ファイルは、人間と機械が読み取り可能な引用情報を含むプレーンテキスト ファイルです。この情報は、{% data variables.product.prodname_ghe_server %} によって、[APA](https://apastyle.apa.org) や [BibTeX](https://ja.wikipedia.org/wiki/BibTeX) などの一般的な引用形式に解析されます。詳細については、「[CITATION ファイルについて](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-citation-files)」を参照してください。"

    - heading: 'Markdown の変更'
      notes:
        # https://github.com/github/releases/issues/1645
        - |Markdown ファイル、issue、pull request、コメントの引用とリストに新しいキーボード ショートカットを使うことができます。



* 引用符を追加するには、Mac では <kbd>cmd shift .</kbd>、Windows と Linux では <kbd>ctrl shift .</kbd> を使います。

* 順序指定済みリストを追加するには、Mac では <kbd>cmd shift 7</kbd>、Windows と Linux では <kbd>ctrl shift 7</kbd> を使います。

* 順序なしリストを追加するには、Mac では <kbd>cmd shift 8</kbd>、Windows と Linux では <kbd>ctrl shift 8</kbd> を使います。



使用可能なショートカットの完全なリストについては、「[キーボード ショートカット](/get-started/using-github/keyboard-shortcuts)」を参照してください。

|
        # https://github.com/github/releases/issues/1684
        - "任意の Markdown フィールドで脚注構文を使えるようになりました。脚注は上付きリンクとして表示され、クリックすると、参照先の情報にジャンプします。これは、ドキュメントの下部にある新しいセクションに表示されます。構文の詳細については、「[基本的な書き方と書式設定の構文](/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#footnotes)」を参照してください。"

        # https://github.com/github/releases/issues/1647
        - "Markdown ファイルを表示するときに、ツール バーの {% octicon \"code\" aria-label=\"The code icon\" %} をクリックして、Markdown ファイルのソースを表示できるようになりました。従来は、変更履歴ビューを使って、Markdown ファイルのソース内の特定の行番号にリンクする必要がありました。"

        # https://github.com/github/releases/issues/1600
        - "画像や動画は、Markdown 本文に貼り付けるか、Markdown ファイルの下部にあるダイアログから選ぶことで、gist で Markdown ファイルに追加できるようになりました。サポート対象ファイルの種類の詳しい情報については、「[ファイルの添付](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/attaching-files)」を参照してください。"

        # https://github.com/github/releases/issues/1523
        - 'Wiki の目次は、{% data variables.product.prodname_ghe_server %} によって、見出しに基づいて自動的に生成されるようになりました。'

        # https://github.com/github/releases/issues/1626
        - "画像や動画などのファイルを Markdown エディターにドラッグ アンド ドロップした場合、ファイルの配置は、{% data variables.product.prodname_ghe_server %} によって、カーソルの位置ではなく、マウス ポインターの位置が使用されるようになりました。"

    - heading: 'issue と pull request の変更'
      notes:
        # https://github.com/github/releases/issues/1504
        - "論理 OR 演算子を使ってラベルで issue を検索できるようになりました。論理 OR を使って issue をフィルター処理するには、コンマ構文を使います。たとえば、`label:\"good first issue\",\"bug\"` と指定すると、ラベルが `good first issue` または `bug` のすべての issue が一覧表示されます。詳細については、「[issue と pull request のフィルター処理と検索](/issues/tracking-your-work-with-issues/filtering-and-searching-issues-and-pull-requests#about-search-terms)」を参照してください。"

        # https://github.com/github/releases/issues/1685
        - |コード レビューの割り当てをチームで管理しやすくする改善が行われました。次のことが可能になりました。



- 割り当てをチームの直接メンバーのみに制限します。

- 1 人以上のチーム メンバーが既に要求されている場合でも、自動割り当てを続けます。

- 1 人以上のメンバーが新たに割り当てられた場合でも、チームをレビューに割り当てたままにします。



pull request ページのタイムラインとレビューアー サイドバーに、レビュー要求が 1 人以上のチーム メンバーに自動的に割り当てられたかどうかが示されるようになりました。



詳細については、[{% data variables.product.prodname_dotcom %} の変更ログ](https://github.blog/changelog/2021-09-29-new-code-review-assignment-settings-and-team-filtering-improvements/)を参照してください。

|
        - pull request 検索をフィルター処理して、レビューを直接要求された pull request のみを含めることができるようになりました。
        # https://github.com/github/releases/issues/1683
        - "pull request でフィルタリングされたファイルは完全に非表示になり、[Files Changed]\\(変更されたファイル\\) タブに折りたたまれた状態で表示されなくなりました。[File Filter]\\(ファイル フィルター\\) メニューも簡素化されました。詳細については、「[pull request 内のファイルをフィルタリングする](/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/filtering-files-in-a-pull-request)」を参照してください。"

    - heading: 'GitHub Actions の変更'
      notes:
        # https://github.com/github/releases/issues/1593
        - "複数のワークフロー ステップを 1 つのアクションに結合し、他のアクションを参照する機能を含む \"複合アクション\" を作成できるようになりました。これにより、ワークフロー内の重複を減らしやすくなります。従来は、アクションはその YAML 定義内でのみスクリプトを使うことができました。詳細については、「[複合アクションを作成する](/actions/creating-actions/creating-a-composite-action)」を参照してください。"

        # https://github.com/github/releases/issues/1694
        - "エンタープライ ズレベルでセルフホステッド ランナーを管理する場合、`admin:enterprise` スコープで個人用アクセス トークンを使う必要がなくなりました。代わりに、新しい `manage_runners:enterprise` スコープを使って、トークンのアクセス許可を制限できます。このスコープを持つトークンは、[多くの REST API エンドポイント](/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise)に対して認証を行い、企業のセルフホストテッド ランナーを管理できます。"

        # https://github.com/github/releases/issues/1157
        - |監査ログに {% data variables.product.prodname_actions %} の新しいイベントが追加されました。次のイベントの監査ログ エントリが記録されるようになりました。



* セルフホステッド ランナーが登録または削除された。

* セルフホステッド ランナーがランナー グループに追加されたか、ランナー グループから削除された。

* ランナー グループが作成または削除された。

* ワークフローの実行が作成または完了した。

* ワークフロー ジョブの準備が整った。重要なのは、このログに、ランナーに提供されたシークレットのリストが含まれていることです。



詳細については、「[{% data variables.product.prodname_actions %} のセキュリティ強化](/actions/security-guides/security-hardening-for-github-actions#auditing-github-actions-events)」を参照してください。

|
        # https://github.com/github/releases/issues/1588
        - '{% data variables.product.prodname_ghe_server %} 3.3 では、{% data variables.product.prodname_actions %} を使用したジョブのコンカレンシーに関するパフォーマンスが改善されています。CPU とメモリ構成の範囲に関する新しいパフォーマンス目標の詳細については、「[{% data variables.product.prodname_ghe_server %} での {% data variables.product.prodname_actions %} の概要](/admin/github-actions/enabling-github-actions-for-github-enterprise-server/getting-started-with-github-actions-for-github-enterprise-server#review-hardware-considerations)」を参照してください。'

        # https://github.com/github/releases/issues/1556
        - "{% data variables.product.prodname_github_connect %} を介して {% data variables.product.prodname_ghe_server %} から {% data variables.product.prodname_dotcom_the_website %} に解決されるアクションを使うときのインサイダー中間者攻撃を軽減するために、使用時のアクションの名前空間 (`owner/name`) は廃止されました。名前空間の廃止により、その名前空間はお客様の {% data variables.product.prodname_ghe_server %} インスタンスに作成されなくなり、アクションを参照しているすべてのワークフローが {% data variables.product.prodname_dotcom_the_website %} からダウンロードされるようになります。"

    - heading: 'GitHub Packages の変更'
      notes:
        # https://github.com/github/docs-content/issues/5554
        - "リポジトリが削除されると、関連するパッケージ ファイルが {% data variables.product.prodname_registry %} の外部ストレージから即座に削除されるようになりました。"

    - heading: 'Dependabot と依存関係グラフの変更'
      notes:
        # https://github.com/github/releases/issues/1141
        - "依存関係レビューはベータ版ではなくなり、{% data variables.product.prodname_GH_advanced_security %} のお客様に一般提供されました。依存関係レビューでは、依存関係の変更と、そのセキュリティへの影響が、pull request の [Files changed]\\(変更されたファイル\\) タブにわかりやすく表示されます。どの依存関係が追加、削除、または更新されたか、および脆弱性情報を把握できます。詳細については、「[pull request 内の依存関係の変更をレビューする](/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/reviewing-dependency-changes-in-a-pull-request)」を参照してください。"

        # https://github.com/github/releases/issues/1630
        - '{% data variables.product.prodname_dependabot %} は現在、プライベート ベータ版として利用でき、いくつかの人気のあるエコシステムのバージョン更新プログラムとセキュリティ更新プログラムの両方が提供されています。{% data variables.product.prodname_ghe_server %} の {% data variables.product.prodname_dependabot %} は、{% data variables.product.prodname_actions %} と、{% data variables.product.prodname_dependabot %} の使用のために構成されたセルフホステッド ランナーのプールが必要です。また、{% data variables.product.prodname_ghe_server %} の {% data variables.product.prodname_dependabot %} は、{% data variables.product.prodname_github_connect %} を有効にする必要があります。ベータ版の詳細とサインアップについては、GitHub セールス チームにご連絡ください。'

    - heading: 'コード スキャンとシークレット スキャンの変更'
      notes:
        # https://github.com/github/releases/issues/1724
        - "より多くの[ライブラリとフレームワーク](https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/)のサポートを追加し、既存のライブラリとフレームワーク モデルの範囲を拡大することで、{% data variables.product.prodname_codeql %} の分析の深​​さが改善されました。[JavaScript](https://github.com/github/codeql/tree/main/javascript) 分析は、最も一般的なテンプレート言語をサポートするようになり、[Java](https://github.com/github/codeql/tree/main/java) は {% data variables.product.prodname_codeql %} の旧バージョンの 3 倍以上のエンドポイントをカバーするようになりました。結果として、{% data variables.product.prodname_codeql %} は信頼できないユーザー データの潜在的なソース、そのデータが流れるステップ、そしてデータが行き着く危険なシンクをさらに検出できるようになりました。この結果、{% data variables.product.prodname_code_scanning %} アラートの品質が全体的に向上しました。"

        # https://github.com/github/releases/issues/1639
        - '{% data variables.product.prodname_codeql %} は、レコードやパターン マッチングなど、Java 16 の標準言語機能のスキャンをサポートするようになりました。{% data variables.product.prodname_codeql %} は、Java バージョン 7 から 16 で記述されたコードを分析できます。サポートされている言語とフレームワークの詳細については、[{% data variables.product.prodname_codeql %} のドキュメント](https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/#id5)を参照してください。'

        # https://github.com/github/releases/issues/1655
        - |コードが pull request にプッシュされたときの {% data variables.product.prodname_code_scanning %} `on:push` トリガーが改善されました。`on:push` スキャンから pull request に関連付けられた結果が返されると、{% data variables.product.prodname_code_scanning %} によって、pull request でこれらのアラートが表示されるようになりました。



他の一部の CI/CD システムは、コードがブランチにプッシュされたときにパイプラインをトリガーするように、またはコミットごとに排他的に構成することさえできます。このような分析パイプラインがトリガーされ、結果が SARIF API にアップロードされるたびに、{% data variables.product.prodname_code_scanning %} によって、分析結果とオープン状態の pull request の照合も試行されます。オープン状態の pull request が見つかった場合、結果が上記のように公開されます。詳細については、[{% data variables.product.prodname_dotcom %} の変更ログ](https://github.blog/changelog/2021-09-27-showing-code-scanning-alerts-on-pull-requests/)を参照してください。

|
        # https://github.com/github/releases/issues/1546
        - "{% data variables.product.prodname_code_scanning %} アラート ページで新しい pull request フィルターを使って、pull request に関連付けられたすべての {% data variables.product.prodname_code_scanning %} アラートを見つけることができるようになりました。pull request の [チェック] タブにある新しい [すべてのブランチ アラートを見る] リンクから、特定の pull request フィルターが既に適用されている {% data variables.product.prodname_code_scanning %} アラートを直接参照できます。詳細については、[{% data variables.product.prodname_dotcom %} の変更ログ](https://github.blog/changelog/2021-08-23-pull-request-filter-for-code-scanning-alerts/)を参照してください。"

        # https://github.com/github/releases/issues/1562
        - "{% data variables.product.prodname_secret_scanning %} のユーザー定義パターンはベータ版ではなくなり、{% data variables.product.prodname_GH_advanced_security %} のお客様に一般提供されました。また、このリリースでは、リポジトリ、Organization、およびエンタープライズ レベルで定義されたカスタム パターンを編集する機能も新たに追加されました。パターンを編集して保存した後、{% data variables.product.prodname_secret_scanning %} によって、リポジトリの Git 履歴すべてと新しいコミットの両方で一致するものが検索されます。パターンを編集することで、更新されたバージョンに一致しなくなると、そのパターンに以前関連付けられていたアラートが閉じられます。今後のリリースでは、ドライランなど、その他の改善が予定されています。詳細については、「[Secret Scanning のカスタム パターンの定義](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)」を参照してください。"

    - heading: API と Webhook の変更
      notes:
        # https://github.com/github/releases/issues/1744
        - "REST API のほとんどのプレビュー段階が終了して、正式に API に含まれるようになりました。プレビュー ヘッダーはほとんどの REST API エンドポイントで不要になりましたが、プレビュー段階の終了を要求の `Accept` ヘッダーに指定することで、引き続き期待どおりに動作します。要求の `Accept` ヘッダー内で引き続きプレビューを必要とするプレビューについては、「[API プレビュー](/rest/overview/api-previews)」を参照してください。"

        # https://github.com/github/releases/issues/1513
        - "REST API を使って、外部リソースへのカスタム自動リンクを構成できるようになりました。REST API で、ベータ版の `GET`/`POST`/`DELETE` エンドポイントが提供されるようになりました。これを使って、リポジトリに関連付けられたカスタム自動リンクを表示、追加、または削除できます。詳細については、「[自動リンク](/rest/reference/repos#autolinks)」を参照してください。"

        # https://github.com/github/releases/issues/1578
        - "REST API を使って、フォークされたリポジトリをそのアップストリーム リポジトリと同期できるようになりました。詳細については、REST API ドキュメントの「[ブランチ](/rest/reference/branches#sync-a-fork-branch-with-the-upstream-repository)」を参照してください。"

        # https://github.com/github/releases/issues/1527
        - "GitHub Enterprise Server のエンタープライズ管理者は、REST API を使ってリポジトリの Git LFS を有効または無効にできるようになりました。詳細については、「[リポジトリ](/rest/reference/repos#git-lfs)」を参照してください。"

        # https://github.com/github/releases/issues/1476
        - "REST API を使って、エンタープライズの監査ログのクエリを実行できるようになりました。監査ログの転送には、独自のツールキットを使ってデータを保持および分析し、時間の経過に伴うパターンを特定する機能が用意されていますが、新しいエンドポイントは、最近のイベントに対して限定的な分析を実行するのに役立ちます。詳細については、REST API ドキュメントの「[{% data variables.product.prodname_enterprise %} の管理](/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise)」を参照してください。"

        # https://github.com/github/releases/issues/1485
        - GitHub App のユーザーからサーバーへの API 要求で、REST API を使ってパブリック リソースを読み取ることができるようになりました。これには、たとえば、パブリック リポジトリの issue や pull request のリストを表示する、パブリック リポジトリのコメントとコンテンツにアクセスする機能が含まれます。

        # https://github.com/github/releases/issues/1734
        - "リポジトリを作成または更新するときに、REST および GraphQL API を使ってフォークを許可するかどうかを構成できるようになりました。従来は、リポジトリを作成および更新するための API に、フィールド `allow_forking` (REST) または `forkingAllowed` (GraphQL) が含まれていませんでした。詳細については、REST API ドキュメントの「[リポジトリ](/rest/reference/repos)」と GraphQL API ドキュメントの「[リポジトリ](/graphql/reference/objects#repository)」を参照してください。"

        # https://github.com/github/releases/issues/1637
        - |新しい GraphQL ミューテーション [`createCommitOnBranch`](/graphql/reference/mutations#createcommitonbranch) により、リポジトリのブランチ内のファイルの追加、更新、削除が容易になります。REST API と比較して、コミットを作成する前に手動で BLOB とツリーを作成する必要がありません。これにより、1 回の API 呼び出しで複数のファイルを追加、更新、または削除できます。



新しい API を使って作成されたコミットは自動的に GPG 署名され、{% data variables.product.prodname_ghe_server %} UI で [検証済みとしてマーク](/github/authenticating-to-github/managing-commit-signature-verification/about-commit-signature-verification) されます。GitHub App では、ミューテーションを使って直接または [ユーザーに代わって](/developers/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) コミットを作成できます。

|
        # https://github.com/github/releases/issues/1665
        - "新しいタグが作成されるとき、[プッシュ](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push) Webhook ペイロードに `head_commit` オブジェクトが常に包含され、この中に、この新しいタグが指すコミットのデータが含まれるようになりました。その結果、`head_commit` オブジェクトには常にペイロードの `after` コミットのコミット データが含まれるようになります。"

    - heading: 'パフォーマンスの変更'
      notes:
        # https://github.com/github/releases/issues/1823
        - Git 参照が多いリポジトリに対するページ読み込みとジョブが大幅に高速化されました。

  # No security/bug fixes for the RC release
  # security_fixes:
  #   - PLACEHOLDER

  # bugs:
  #   - PLACEHOLDER

  known_issues:
    - "{% data variables.product.prodname_ghe_server %} 3.3 にアップグレードした後、{% data variables.product.prodname_actions %} が自動的に開始しないことがあります。この問題を解決するには、SSH を使ってアプライアンスに接続し、`ghe-actions-start` コマンドを実行します。"
    - "{% data variables.product.prodname_ghe_server %} インスタンスをセットアップしたばかりでユーザーがいない場合、攻撃者が最初の管理者ユーザーを作成できました。"
    - カスタムのファイアウォール規則は、アップグレード プロセス中に削除されます。
    - "[Web インターフェイスからアップロードされた](https://github.com/blog/2105-upload-files-to-your-repositories) Git LFS 追跡ファイルが誤ってリポジトリに直接追加されます。"
    - issue に同じリポジトリ内の BLOB への固定リンクが含まれ、その BLOB のファイル パスが 255 文字を超える場合、その issue をクローズできません。
    - "GitHub Connect で [Users can search GitHub.com]\\(ユーザーが GitHub.com を検索できる\\) が有効になっている場合、プライベートと内部リポジトリの issue は GitHub.com の検索結果に含まれません。"
    - "{% data variables.product.prodname_registry %} npm レジストリが、メタデータ応答で時刻値を返さなくなります。これは、パフォーマンスの大幅な向上を可能にするために行われました。メタデータ応答の一部として時刻値を返すために必要なすべてのデータを保持し続け、既存のパフォーマンスの問題を解決したら、将来的にこの値を返すことを再開します。"
    - pre-receive フックの処理に固有のリソース制限により、一部の pre-receive フックが失敗する場合があります。
    - '[Force Path Style]\(パス スタイルの強制\) がオンになっていると、{% data variables.product.prodname_actions %} のストレージ設定を検証して {% data variables.enterprise.management_console %} に保存することができず、代わりに `ghe-actions-precheck` コマンド ライン ユーティリティで構成する必要があります。'
    - '{% data variables.product.prodname_ghe_server %} 3.3 のインスタンスを Azure にインストールし、32 個以上の CPU コアでプロビジョニングすると、現在の Linux カーネルに存在するバグのため、起動しませんでした。 [更新日: 2022-04-08]'
    - '{% data reusables.release-notes.ghas-3.4-secret-scanning-known-issue %}'
  deprecations:
    - heading: GitHub Enterprise Server 2.22 の非推奨化
      notes:
        - '**{% data variables.product.prodname_ghe_server %} 2.22 は 2021 年 9 月 23 日に廃止されました**。これは、この日以降、重大なセキュリティの問題があってもパッチ リリースが作成されないことを意味します。より優れたパフォーマンス、改善されたセキュリティ、新機能のために、[{% data variables.product.prodname_ghe_server %} の最新バージョンへのアップグレード](/enterprise-server@3.3/admin/enterprise-management/upgrading-github-enterprise-server) をできるだけ早く行ってください。'
    - heading: GitHub Enterprise Server 3.0 の非推奨化
      notes:
        - '**{% data variables.product.prodname_ghe_server %} 3.0 は 2022 年 2 月 16 日に廃止されました**。これは、この日以降、重大なセキュリティの問題があってもパッチ リリースが作成されないことを意味します。より優れたパフォーマンス、改善されたセキュリティ、新機能のために、[{% data variables.product.prodname_ghe_server %} の最新バージョンへのアップグレード](/enterprise-server@3.3/admin/enterprise-management/upgrading-github-enterprise-server) をできるだけ早く行ってください。'

    - heading: XenServer Hypervisor サポートの非推奨化
      notes:
        # https://github.com/github/docs-content/issues/4439
        - "{% data variables.product.prodname_ghe_server %} 3.3 以降、XenServer 上の {% data variables.product.prodname_ghe_server %} は非推奨になり、サポートされなくなりました。ご質問やご不明な点がございましたら、[GitHub サポート](https://support.github.com) にお問い合わせください。"

    - heading: クエリ パラメーターを使った OAuth Application API エンドポイントと API 認証の非推奨化
      notes:
        # https://github.com/github/releases/issues/1316
        - |`access_tokens` の予期しないログまたは露出を防ぐため、OAuth Application API エンドポイントの使用やクエリ パラメーターを使った API 認証の使用はお勧めしません。次の投稿を参照して、置換案を確認してください。



* [OAuth Application API エンドポイントの置換](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/#changes-to-make)

* [クエリ パラメーターの代わりにヘッダーを使った置換認証](https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/#changes-to-make)



これらのエンドポイントと認証ルートは、{% data variables.product.prodname_ghe_server %} 3.4 で {% data variables.product.prodname_ghe_server %} から削除される予定です。

|
    - heading: CodeQL ランナーの非推奨化
      notes:
        # https://github.com/github/releases/issues/1632
        - "{% data variables.product.prodname_codeql %} ランナーは非推奨になります。{% data variables.product.prodname_ghe_server %} 3.3 は、{% data variables.product.prodname_codeql %} ランナーをサポートする最後のリリース シリーズになります。{% data variables.product.prodname_ghe_server %} 3.4 以降、{% data variables.product.prodname_codeql %} は削除され、サポートされなくなります。{% data variables.product.prodname_codeql %} CLI バージョン 2.6.2 以降は、{% data variables.product.prodname_codeql %} ランナーのフィーチャーコンプリート置換です。詳細については、[{% data variables.product.prodname_dotcom %} の変更ログ](https://github.blog/changelog/2021-09-21-codeql-runner-deprecation/)を参照してください。"

    - heading: カスタム ビット キャッシュ拡張機能の非推奨化
      notes:
        # https://github.com/github/releases/issues/1415
        - |{% data variables.product.prodname_ghe_server %} 3.1 から、{% data variables.product.company_short %} の独自のビットキャッシュ拡張機能のサポートの段階的な廃止が始まりました。これらの拡張機能は、{% data variables.product.prodname_ghe_server %} 3.3 で非推奨になりました。



バージョン 3.1 または 3.2 を実行している {% data variables.product.product_location %} に既に存在し、アクティブであったリポジトリはすべて自動的に更新されるようになります。



{% data variables.product.prodname_ghe_server %} 3.3 にアップグレードする前に存在せずアクティブでなかったリポジトリは、リポジトリのメンテナンス タスクが実行され正常に完了するまで、最適なパフォーマンスが得られない可能性があります。



リポジトリのメンテナンス タスクを手動で開始するには、影響を受ける各リポジトリの `https://<hostname>/stafftools/repositories/<owner>/<repository>/network` を参照し、**[スケジュール]** ボタンをクリックします。

|
    - heading: 認証トークンの形式を変更すると GitHub Connect に影響がある
      notes:
        # https://github.com/github/releases/issues/1235
        - |GitHub 認証トークンの形式が変更されるため、6 月 3 日を過ぎると、GitHub Enterprise Server 3.1 以前を実行するインスタンスでは、GitHub Connect が動作しなくなります。引き続き GitHub Connect を使うには、GitHub Enterprise Server 3.2 以降にアップグレードしてください。詳細については、[GitHub のブログ](https://github.blog/2022-05-20-action-needed-by-github-connect-customers-using-ghes-3-1-and-older-to-adopt-new-authentication-token-format-updates/)を参照してください。[更新日: 2022-06-14]

|
  backups:
    - '{% data variables.product.prodname_ghe_server %} 3.3 は、[バックアップとディザスター リカバリー](/admin/configuration/configuring-your-enterprise/configuring-backups-on-your-appliance) のために、最低でも [GitHub Enterprise Backup Utilities 3.3.0](https://github.com/github/backup-utils) が必要です。'

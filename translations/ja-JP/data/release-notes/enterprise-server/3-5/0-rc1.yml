date: '2022-05-10'
release_candidate: true
deprecated: true
intro: |
  {% note %}
  
  **注:** {% data variables.product.product_location %} でリリース候補ビルドが実行されている場合、ホットパッチでアップグレードすることはできません。リリース候補は、テスト環境でのみ実行することをお勧めします。
  
  {% endnote %}
  
  アップグレードの手順については、「[{% data variables.product.prodname_ghe_server %} のアップグレード](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)」を参照してください。
sections:
  features:
    - heading: メンテナンス後の検証テストのための IP 例外一覧
      notes:
        # https://github.com/github/releases/issues/2109
        - |メンテナンス モードが有効になっている間に GitHub Enterprise Server インスタンス上のアプリケーション サービスにアクセスできる IP アドレスの許可リストを構成できるようになりました。許可された IP アドレスからインスタンスの Web インターフェイスにアクセスする管理者は、メンテナンスの後、メンテナンス モードを無効にする前に、インスタンスの機能を検証できます。詳しくは、「[メンテナンス モードの有効化とスケジューリング](/admin/configuration/configuring-your-enterprise/enabling-and-scheduling-maintenance-mode#validating-changes-in-maintenance-mode-using-the-ip-exception-list)」をご覧ください。

|
    - heading: カスタム リポジトリ ロールが一般提供されるようになる
      notes:
        # https://github.com/github/releases/issues/1945
        - |Organization は、カスタム リポジトリ ロールを使うことで、ユーザーに付与できるリポジトリのアクセス許可を、より細かく制御できます。詳しくは、「[Organization のカスタム リポジトリ ロールの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)」をご覧ください。



カスタム リポジトリ ロールは、Organization の所有者によって作成され、その Organization 内のすべてのリポジトリで使用できます。ロールごとに、カスタム名と説明を指定できます。40 より多くのきめ細かいアクセス許可のセットから構成できます。作成した後、リポジトリ管理者は、リポジトリ内のユーザー、チーム、または外部コラボレーターに、カスタム ロールを割り当てることができます。



カスタム リポジトリ ロールは、Organization の設定の新しい **[リポジトリ ロール]** タブで作成、表示、編集、削除することができます。1 つの Organization 内に、最大 3 個のカスタム ロールを作成できます。



カスタム リポジトリ ロールは、GitHub Enterprise Server REST API でも完全にサポートされます。Organizations API を使うと、Organization 内のすべてのカスタム リポジトリ ロールの一覧を表示できます。また、個人やチームにリポジトリへのアクセスを許可する既存の API は、カスタム リポジトリ ロールをサポートするように拡張されています。詳しくは、REST API のドキュメントの「[組織](/rest/reference/orgs#list-custom-repository-roles-in-an-organization)」をご覧ください。

|
    - heading: パブリック ベータになった GitHub Container Registry 
      notes: 
        # https://github.com/github/releases/issues/2005
         - |GitHub Enterprise Server 3.5 でパブリック ベータとして利用できるようになった GitHub Container Registry (GHCR) は、コンテナーを発行、ダウンロード、管理する機能を開発者に提供します。GitHub Packages のコンテナー サポートでは、Docker イメージをホストするための OCI 標準が実装されます。詳しくは、[GitHub Container Registry](/packages/working-with-a-github-packages-registry/working-with-the-container-registry) に関する記事をご覧ください。

|
    - heading: Dependabot 更新が一般提供されるようになる
      notes:
       # https://github.com/github/releases/issues/2089
        - |Dependabot のバージョンとセキュリティの更新が、GitHub Enterprise Server 3.5 で一般提供されるようになりました。GitHub.com リポジトリで動作する人気のあるすべてのエコシステムと機能を、GitHub Enterprise Server インスタンスでセットアップできるようになりました。GitHub Enterprise Server 上の Dependabot には、GitHub Actions およびセルフホステッド Dependabot ランナーのプールが必要で、GitHub Connect と Dependabot を管理者が有効にする必要があります。詳しくは、[Dependabot 更新の設定](https://docs.github.com/en/enterprise-server@3.5/admin/github-actions/enabling-github-actions-for-github-enterprise-server/setting-up-dependabot-updates)に関する記事をご覧ください。

|
    - heading: パブリック ベータの Server Statistics
      notes:
        # https://github.com/github/releases/issues/2183
        - |インスタンスの使用状況データをレビューし、集計データを GitHub と共有することで、チームの作業状況を分析し、GitHub Enterprise Server から取得した値を理解し、製品の向上に役立てることができるようになりました。データを CSV または JSON ファイルでダウンロードするか、REST API を使ってデータにアクセスすることで、独自のツールを使って使用状況を経時的に分析できます。収集される集計メトリックの一覧を見るには、「[Server Statistics について](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics#server-statistics-data-collected)」をご覧ください。 Server Statistics のデータには、個人データも、コード、issue、コメント、pull request の内容などの GitHub のコンテンツも含まれません。 Server Statistics のデータが格納およびセキュリティ保護される方法について詳しくは、[GitHub のセキュリティ](https://github.com/security)に関する記事をご覧ください。  Server Statistics について詳しくは、「[チームがサーバー統計と連携する方法の分析](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics)」をご覧ください。 この機能はパブリック ベータ版で利用できます。

|
    - heading: GitHub Actions のレート制限が構成できるようになった
      notes:
        # https://github.com/github/releases/issues/2123
        - |サイト管理者は、GitHub Actions のレート制限を有効にして構成できるようになりました。既定では、レート制限は無効です。使用可能なランナーにワークフロー ジョブをすぐに割り当てることができない場合、ジョブはランナーが使用可能になるまでキューで待機します。ただし、GitHub Actions の負荷が常に高い場合、キューからの流出よりキューへの流入の方が速くなり、GitHub Enterprise Server インスタンスのパフォーマンスが低下する可能性があります。これを避けるため、管理者はレート制限を構成することができます。レート制限を超えると、それ以上のワークフロー実行は、キューに入れられるのではなく、すぐに失敗します。レートがしきい値より低下して安定したら、新しい実行を再びキューに入れられるようになります。詳しくは、[レート制限の構成](/admin/configuration/configuring-your-enterprise/configuring-rate-limits#configuring-rate-limits-for-github-actions)に関する記事をご覧ください。

|
    - heading: GitHub Actions での安全なデプロイのための OpenID Connect (OIDC)
      notes:
        # https://github.com/github/releases/issues/2066
        - |GitHub Enterprise Server 上の GitHub Actions で、クラウド プロバイダーへの安全なデプロイのために OIDC がサポートされるようになりました。この機能では、デプロイのたびに自動的にローテーションされる、有効期間の短いトークンが使われます。OIDC により次の機能が有効になります。



- クラウド プロバイダーと GitHub Enterprise Server の間のシームレスな認証。有効期間の長いクラウド シークレットをインスタンスに格納する必要はありません

- クラウド管理者は、特定のクラウド プロバイダーのセキュリティ メカニズムに依存して、GitHub Actions のワークフローによるクラウド リソースへのアクセスを最小限にできます。GitHub Enterprise Server とクラウドの間にシークレット管理の重複はありません。



詳しくは、「[デプロイのセキュリティ強化](/actions/deployment/security-hardening-your-deployments)」をご覧ください。

|
    - heading: Enterprise 内での GitHub Actions の共有が一般提供されるようになる
      notes:
        # https://github.com/github/releases/issues/2085
        - |内部リポジトリでの GitHub Actions のサポートが、GitHub Enterprise Server インスタンス上の Organization で一般提供されるようになりました。内部リポジトリでアクションを共有することにより、オートメーションを内部ソーシングできます。リポジトリの設定を管理したり、REST API を使って、Organization 内またはインスタンス上の任意の Organization の他のリポジトリのワークフローへのアクセスを許可したりできます。詳しくは、「[アクションとワークフローを企業と共有する](/actions/creating-actions/sharing-actions-and-workflows-with-your-enterprise)」、「[リポジトリの GitHub Actions の設定を管理する](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)」、および REST API ドキュメントの [Actions のアクセス許可](/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)に関する記事をご覧ください。

|
    - heading: GitHub Enterprise Server 上の GitHub Actions に対するキャッシュのサポートが一般提供されるようになった
      notes:
        # https://github.com/github/releases/issues/2110
        - |依存関係キャッシュを使って、GitHub Actions のワークフローを高速化できるようになりました。ジョブの依存関係をキャッシュするには、[actions/cache](https://github.com/actions/cache) アクションを組み込み、一意のキーを使ってキャッシュを作成できます。同じリポジトリ内のすべてのワークフローの間で、キャッシュを共有できます。その後、これらのワークフローでキャッシュを復元し、実行速度を上げることができます。



Actions のユーザーは、キャッシュ API を使って次のこともできます。



- リポジトリごとに許容されるキャッシュ サイズの範囲に関する Enterprise ポリシーを定義します。

- 各リポジトリ内のキャッシュの使用に関するクエリを実行し、すべてのキャッシュの合計サイズが上限に達しているかどうかを監視します。

- リポジトリのキャッシュ要件に基づいて、Enterprise で許容される制限内でリポジトリの最大キャッシュ サイズを増やします。

- Organization レベルまたは Enterprise レベルで集計されたキャッシュの使用状況を監視します。



Enterprise アカウント内で構成されている外部 BLOB ストレージを、ワークフローの成果物、ログ、キャッシュの間で共有できるようになります。詳しくは、「[依存関係をキャッシュしてワークフローのスピードを上げる](/actions/using-workflows/caching-dependencies-to-speed-up-workflows)」をご覧ください。

|
    - heading: Web UI で行われたコミットに自動的に署名する
      notes:
        # https://github.com/github/releases/issues/1963
        - |Web インターフェイスのファイルの編集や pull request のマージなどから行われたコミットに自動的に署名するように、GitHub Enterprise Server を構成できるようになりました。コミットが署名されていると、変更が信頼できるソースからのものであることを、いっそう強く確信できます。この機能を使うと、[署名済みコミットの必須化](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-signed-commits)のブランチ保護設定により、署名されていないコミットがリポジトリに入るのを防ぎながら、署名されたコミットが (Web インターフェイスで行われたものであっても) 入るのを許可できます。詳しくは、「[Web コミット署名を構成する](/admin/configuration/configuring-your-enterprise/configuring-web-commit-signing)」をご覧ください。

|
    - heading: ライセンスの利用状況をいつでも同期する
      notes:
        # https://github.com/github/releases/issues/2201
        - |ライセンスの利用状況を GitHub Enterprise Server と GitHub Enterprise Cloud の間で GitHub Connect を使って自動的に同期しているお客様は、毎週の自動同期とは関係なく、ライセンスの利用状況を同期できるようになりました。この機能では、同期ジョブの状態も報告されます。詳しくは、「[GitHub Enterprise Server と GitHub Enterprise Cloud とのライセンス利用状況の同期](/billing/managing-your-license-for-github-enterprise/syncing-license-usage-between-github-enterprise-server-and-github-enterprise-cloud#manually-syncing-license-usage)」をご覧ください。

|
    - heading: GitHub Actions の再利用可能なワークフローが一般提供されるようになる
      notes:
        # https://github.com/github/releases/issues/1767
        # https://github.com/github/releases/issues/1950
        # https://github.com/github/releases/issues/2114
          - |再利用可能なワークフローが一般提供されるようになりました。再利用可能なワークフローは、ワークフロー全体を 1 つのアクションであるかのように再利用できるので、重複を減らすのに役立ちます。一般提供リリースには、GitHub Enterprise Server で利用できるようになった機能強化がいくつかあります。詳しくは、「[ワークフローの再利用](/actions/using-workflows/reusing-workflows)」をご覧ください。



- 出力を利用して、再利用可能なワークフローから呼び出し元ワークフローの他のジョブに、データを渡すことができます。

- 環境のシークレットを再利用可能なワークフローに渡すことができます。

- 監査ログには、使われた再利用可能なワークフローに関する情報が含まれます。

- 呼び出し元リポジトリと同じリポジトリ内の再利用可能なワークフローは、パスとファイル名 (`PATH/FILENAME`) だけで参照できます。呼び出されるワークフローは、呼び出し元ワークフローと同じコミットのものです。

|
    - heading: GitHub Actions 用のセルフホステッド ランナーで自動更新を無効にできるようになった
      notes:
        # https://github.com/github/releases/issues/2014
        - |セルフホステッド ランナーがソフトウェア更新を実行するタイミングを、いっそうきめ細かに制御できるようになりました。ランナーに `--disableupdate` フラグを指定すると、より新しいバージョンのランナーを利用できる場合は、自動ソフトウェア更新の実行が試みられません。これにより、セルフホステッド ランナーを独自のスケジュールで更新でき、セルフホステッド ランナーがコンテナー内にある場合に特に便利です。



 GitHub Actions サービスとの互換性のため、ランナーの新しいバージョンが利用できるようになってから 30 日以内に、ランナーを手動で更新する必要があります。 ランナーの最新バージョンをインストールする方法については、[ランナーのリポジトリで最新リリース](https://github.com/actions/runner/releases)のインストール手順をご覧ください。

|
    - heading: ワークフローを制限することで GitHub Actions 用のセルフホステッド ランナーをセキュリティ保護する
      notes:
        # https://github.com/github/releases/issues/2013
        - |Organization の所有者は、ランナー グループにアクセスできるワークフローを選ぶことで、セルフホステッド ランナー上の CI/CD ワークフローのセキュリティを強化できるようになりました。これまでは、issue ラベラーなど、リポジトリ内の任意のワークフローが、Organization で利用できるセルフホステッド ランナーにアクセスできました。詳しくは、「[グループを使用してセルフホスト ランナーへのアクセスを管理する](/actions/hosting-your-own-runners/managing-access-to-self-hosted-runners-using-groups#changing-what-workflows-can-access-a-runner-group)」と [GitHub のブログ](https://github.blog/2022-03-23-github-actions-secure-self-hosted-runners-specific-workflows/)をご覧ください。

|
    - heading: GitHub Actions によって pull request が承認されないようにする
      notes:
        # https://github.com/github/releases/issues/1959
        - |GitHub Actions で pull request を承認できるかどうかを制御できるようになりました。この機能は、GitHub Actions を使うユーザーが、"必要な承認" ブランチ保護要件を満たして、別のユーザーによってレビューされていない変更をマージするのを防ぎます。既存のワークフローが壊れないように、**[GitHub Actions のレビューを必要な承認にカウントできるようにする]** は既定で有効になります。Organization の所有者は、Organization の GitHub Actions の設定で、この機能を無効にできます。詳しくは、「[Organization について GitHub Actions を無効化または制限する](/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-approving-pull-requests)」をご覧ください。

|
    - heading: 失敗した、または個別の GitHub Actions ジョブを再実行する
      notes:
        # https://github.com/github/releases/issues/1503
        - |GitHub Actions ワークフローの実行の失敗したジョブまたは個別のジョブだけを、再実行できるようになりました。詳しくは、「[ワークフローとジョブの再実行](/actions/managing-workflow-runs/re-running-workflows-and-jobs)」をご覧ください。

|
    - heading: 依存関係グラフが GitHub Actions をサポートする
      notes:
        # https://github.com/github/releases/issues/1913
        - |依存関係グラフで、GitHub Actions ワークフロー用の YAML ファイルが検出されるようになりました。GitHub Enterprise Server の **[分析情報]** タブの依存関係グラフ セクション内に、ワークフローのファイルが表示されます。アクションを発行するリポジトリのホーム ページの "[使用元]" コントロールでは、そのアクションに依存するリポジトリの数を見ることもできます。詳しくは、「[依存関係グラフについて](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)」をご覧ください。

|
    - heading: パブリック ベータ版での Enterprise に関するセキュリティの概要
      notes:
        # https://github.com/github/releases/issues/2040
        - |GitHub Advanced Security のお客様は、Enterprise レベルでセキュリティ アラートの概要を見ることができるようになりました。Enterprise レベルの新しい **[セキュリティ]** タブでは、アプリケーションのセキュリティ リスクのリポジトリ中心のビューと、すべてのシークレット スキャン アラートのアラート中心のビューが提供されます。詳しくは、「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。

|
    - heading: Organization のセキュリティ ビューが一般提供されるようになる
      notes:
        # https://github.com/github/releases/issues/2096
        - |Organization レベルでのセキュリティ アラートの概要が、一般提供されるようになりました。GitHub Advanced Security のお客様は、セキュリティの概要を使って、Organization 内のすべてのリポジトリについて、アプリケーションのセキュリティ リスクのリポジトリ中心のビュー、またはすべてのコード スキャン、Dependabot、シークレット スキャンのアラートのアラート中心のビューを、見ることができます。詳しくは、「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。

|
    - heading: コード スキャンで、検出されるセキュリティの問題が増え、新しい言語バージョンがサポートされる
      notes:
        # https://github.com/github/releases/issues/2097
        - |コード スキャンでいっそう多くの CWE が検出されるようになり、CodeQL のコード スキャンで次の言語リリースの標準言語機能がサポートされるようになりました。



- C# 10、.NET 6

- Python 3.10

- Java 17

- TypeScript 4.5



詳しくは、[GitHub のブログ](https://github.blog/changelog/2022-02-25-code-scanning-detects-more-security-issues-supports-new-language-versions/)をご覧ください。

|
    - heading: Organization 全体のコード スキャンのアラートを表示する
      notes:
        # https://github.com/github/releases/issues/1792
        - |GitHub Advanced Security のお客様は、Organization の **[セキュリティ]** タブでコード スキャンのアラートを見ることができるようになりました。このビューを利用できるのは、Organization の所有者と、[セキュリティ マネージャー ロール](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)を持つチームのメンバーです。詳しくは、「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。

|
        # https://github.com/github/releases/issues/1763
        - |ユーザーは、GitHub Enterprise Server インスタンス上の Organization に対するコード スキャンのアラートを、REST API で取得できるようになりました。この新しい API エンドポイントは、既存の[リポジトリに対するエンドポイント](/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)を補完します。詳しくは、REST API ドキュメントの「[Code Scanning](/rest/code-scanning)」をご覧ください。

|
    - heading: プッシュ保護として利用できるシークレット スキャン
      notes:
        # 
        - |GitHub Enterprise Server は、高い確度でトークンが検出されるプッシュをブロックできるようになりました。開発者は、Web UI を通してシークレットをコミットする必要がある詳細な理由を提供することで、ブロックをバイパスできます。詳しくは、「[シークレット スキャンによるプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)」をご覧ください。

|
    - heading: シークレット スキャンでのカスタム パターンに対するドライ ラン
      notes:
        # https://github.com/github/releases/issues/1703
        # https://github.com/github/releases/issues/2084
        - |GitHub Advanced Security のお客様は、Organization またはリポジトリのレベルでカスタム シークレット スキャン パターンのドライ ランを実行できるようになりました。所有者または管理者のアクセス権を持つユーザーは、パターンを発行してアラートを生成する前に、ドライ ランを行うことで、パターンを確認して調整できます。パターンを作成した後、**[保存してドライ ラン]** を使って結果を取得できます。通常、スキャンにかかる時間はほんの数秒ですが、ドライ ランの結果の準備ができると、GitHub Enterprise Server から Organization 所有者またはリポジトリ管理者にメールでも通知されます。詳しくは、「[シークレット スキャンについて](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)」と「[シークレット スキャンのカスタム パターンの定義](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)」をご覧ください。

|
    - heading: シークレット スキャンのカスタム パターン イベントが監査ログに含まれるようになる
      notes:
        # https://github.com/github/releases/issues/2154
        - |監査ログに、シークレット スキャンのカスタム パターンに関連付けられたイベントが含まれるようになりました。このデータは、GitHub Advanced Security のお客様が、セキュリティとコンプライアンスの監査のために、[リポジトリ](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#repository_secret_scanning_custom_pattern-category-actions)、[Organization](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#org_secret_scanning_custom_pattern-category-actions)、または [Enterprise](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_custom_pattern-category-actions) のレベルのカスタム パターンで行われたアクションを理解するのに役立ちます。詳しくは、「[Organization の Audit log をレビューする](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization)」または「[企業の監査ログ レビュー](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise)」をご覧ください。

|
    - heading: カスタム リポジトリ ロールでシークレット スキャンのためのアクセス許可を構成する
      notes:
        # https://github.com/github/releases/issues/1909
        - |カスタム リポジトリ ロールを管理するとき、シークレット スキャンのために 2 つの新しいアクセス許可を構成できるようになりました。



- シークレット スキャンの結果を表示する

- シークレット スキャンの結果を閉じるか、もう一度開く



詳しくは、「[Organization のカスタム リポジトリ ロールの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)」をご覧ください。

|
    - heading: シークレット スキャンがアーカイブされたリポジトリをサポートするようになる
      notes:
        # https://github.com/github/releases/issues/2076
        - |GitHub Advanced Security のお客様は、UI と API から、アーカイブされたリポジトリのシークレット スキャンを有効にできるようになりました。詳しくは、「[シークレット スキャンについて](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)」、[アーカイブされたリポジトリ](/repositories/archiving-a-github-repository/archiving-repositories)に関する記事、および REST API のドキュメントの「[リポジトリ](/rest/repos/repos#update-a-repository)」をご覧ください。

|
    - heading: アラートの場所に関するシークレット スキャンの Webhook
      notes:
        # https://github.com/github/releases/issues/2149
        - |シークレット スキャンを使っている GitHub Advanced Security のお客様は、新しい場所でシークレットが検出されるたびに Webhook を受け取れるようになりました。`secret_scanning_alert_location` Webhook イベントには、コミット SHA のような場所の詳細と、検出の関連アラートが含まれます。検出されたシークレットを含むすべての新しいファイル パスに対して場所が作成されます。詳しくは、「[Webhook のイベントとペイロード](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret_scanning_alert_location)」をご覧ください。

|
    - heading: Organization 全体の Dependabot アラートを表示する
      notes:
        # https://github.com/github/releases/issues/1992
        - |GitHub Advanced Security のお客様は、Organization の **[セキュリティ]** タブで Dependabot のアラートを見ることができるようになりました。このビューを利用できるのは、Organization の所有者と、[セキュリティ マネージャー ロール](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)を持つチームのメンバーです。詳しくは、「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。

|
    - heading: カスタム リポジトリ ロールで Dependabot アラートのためのアクセス許可を構成する
      notes:
        # https://github.com/github/releases/issues/1958
        - |カスタム リポジトリ ロールを管理するとき、Dependabot アラートのために 2 つの新しいアクセス許可を構成できるようになりました。



- Dependabot アラートを表示する

- Dependabot アラートを閉じるか、もう一度開く



詳しくは、「[Organization のカスタム リポジトリ ロールの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)」をご覧ください。

|
    - heading: 閉じられた Dependabot アラートをもう一度開く
      notes:
        # https://github.com/github/releases/issues/1923
        - |閉じられたアラートの UI ページを使って、閉じられた Dependabot アラートをもう一度開くことができるようになりました。これにより、Dependabot の pull request または GraphQL API への影響はありません。詳しくは、「[Dependabot アラートについて](/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)」をご覧ください。

|
    - heading: Dependabot バージョン更新の Pub サポートがパブリック ベータになる
      notes:
        # https://github.com/github/releases/issues/2086
        - |Dependabot バージョン更新のユーザーは、Pub パッケージ マネージャーを使う Flutter または Dart プロジェクトの依存関係を、プロアクティブに更新できるようになりました。 



自分の Dart または Flutter リポジトリで[バージョン更新](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates)をテストするには、<code>[.github/dependabot.yaml](/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates#enabling-dependabot-version-updates)</code> に次の構成ファイルを追加します。`package-ecosystem: "pub"` と `enable-beta-ecosystems: true` フラグに注意してください。

```yaml

version: 2

enable-beta-ecosystems: true

updates:

  - package-ecosystem: "pub"

    directory: "/"

    schedule:

      interval: "weekly"

```

|
    - heading: GraphQL API を使ってリポジトリの Dependabot アラートに関連付けられている pull request を表示する
      notes:
        # https://github.com/github/releases/issues/2088
        - |新しい `DependabotUpdate` GraphQL オブジェクトを使うと、リポジトリのセキュリティ更新に対して行われることに関する情報を表示できます。リポジトリ内の依存関係が脆弱であることを GitHub Enterprise Server が検出すると、Dependabot は pull request を開いて、その依存関係を脆弱ではないバージョンに更新しようとします。脆弱性を修正する pull request を見ることができるようになりました。Dependabot が pull request を開けないことがあります。これまでは、**[セキュリティ]** タブの [Dependabot Alerts]\(Dependabot アラート\) セクションで、Dependabot が生成したエラー メッセージを見ることだけができました。今は、Dependabot がセキュリティ アラートに関する pull request を開こうとしてエラー状態になった場合、GraphQL API を使ってその理由を特定できます。詳しくは、GraphQL API のドキュメントの「[オブジェクト](/graphql/reference/objects#dependabotupdate)」をご覧ください。

|
    - heading: GraphQL API でアクセスできる Dependabot アラートに関する情報が増える
      notes:
        # https://github.com/github/releases/issues/1922
        - |GraphQL API を使って、Dependabot の修正済みアラートを表示できるようになります。また、アクセスして状態や一意の数値識別子でフィルター処理したり、脆弱性アラート オブジェクトの状態でフィルター処理したりすることもできます。`RepositoryVulnerabilityAlert` に次のフィールドが存在するようになります。



- `number`

- `fixed_at`

- `fix_reason`

- `state`



詳しくは、GraphQL API のドキュメントの「[オブジェクト](/graphql/reference/objects#repositoryvulnerabilityalert)」をご覧ください。

|
    - heading: Enterprise 監査ログの Git イベント
      notes:
        # https://github.com/github/releases/issues/2205
        - |次の Git 関連イベントを、Enterprise 監査ログに記録できるようになりました。この機能を有効にして、監査ログの保持期間を設定した場合、新しいイベントを、UI や API を使って検索したり、JSON または CSV でエクスポートしたりできるようになります。



- `git.clone`

- `git.fetch`

- `git.push`



ログされる Git イベントの数が多いため、インスタンスのファイル ストレージを監視し、関連するアラート構成を確認することをお勧めします。詳しくは、「[エンタープライズの監査ログの構成](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/configuring-the-audit-log-for-your-enterprise#managing-git-events-in-the-audit-log)」をご覧ください。

|
    - heading: CODEOWNERS の機能強化
      notes:
        # https://github.com/github/releases/issues/1994
        - |このリリースには、CODEOWNERS の機能強化が含まれます。



- Web から CODEOWNERS ファイルを表示すると、構文エラーが示されるようになりました。これまでは、CODEOWNERS ファイルの行に構文エラーがあると、エラーが無視されたり、場合によっては CODEOWNERS ファイル全体が読み込まれなかったりしました。新しい REST と GraphQL API を使うと、GitHub Apps と Actions で同じエラー リストにアクセスできます。詳しくは、REST API のドキュメントの「[リポジトリ](/rest/repos/repos#list-codeowners-errors)」または GraphQL API のドキュメントの「[オブジェクト](/graphql/reference/objects#repositorycodeowners)」をご覧ください。

- 誰かが新しい pull request を作成したり、ドラフトの pull request に新しい変更をプッシュしたりした後、レビューを要求されるコード所有者が、pull request の [Reviewers]\(レビュー担当者\) の一覧に表示されるようになります。この機能を使うと、pull request がレビューできる状態になった後で、そのレビューを要求されるユーザーを早期に確認できます。

- CODEOWNERS ファイルのコメントを、それ専用の行だけでなく、行の末尾に表示できるようになります。



詳しくは、「[コードの所有者について](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)」をご覧ください。

|
    - heading: pull request のトピック ブランチを最新の状態に維持する方法が増える
      notes:
        # https://github.com/github/releases/issues/1566
        - |pull request ページの **[Update branch]\(ブランチの更新\)** ボタンを使うと、pull request のブランチを、ベース ブランチからの最新の変更で更新できます。これは、マージする前に、変更がベース ブランチの現在のバージョンと互換性があることを確認するのに便利です。2 つの機能強化により、さらに多くの方法で、ブランチを最新の状態に維持できます。



- pull request のトピック ブランチがベース ブランチより古くなったら、ベース ブランチの最新バージョンにリベースすることにより更新できるようになりました。リベースでは、自分のブランチの変更がベース ブランチの最新バージョンに適用され、マージ コミットが作成されないので、結果は線形履歴を持つブランチになります。リベースで更新するには、**[Update branch]\(ブランチの更新\)** ボタンの隣にあるドロップダウン メニューをクリックし、**[Update with rebase]\(リベースで更新\)** をクリックしてから、**[Rebase branch]\(ブランチのリベース\)** をクリックします。これまでの **[Update branch]\(ブランチの更新\)** では、常に pull request ブランチのマージ コミットになる従来のマージが実行されました。このオプションはまだ使用できますが、選択するようになりました。詳しくは、「[ベース ブランチと pull request の同期の維持](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/keeping-your-pull-request-in-sync-with-the-base-branch)」をご覧ください。



- リポジトリの新しい設定では、pull request のトピック ブランチがベース ブランチに対して最新でないときは常に、**[Update branch]\(ブランチの更新\)** ボタンを使用できます。これまで、このボタンは、**[Require branches to be up to date before merging]\(マージする前にブランチを最新にする必要がある\)** ブランチ保護設定が有効になっているときにのみ使用できました。管理者または保守管理者のアクセス権を持つユーザーは、リポジトリの設定の **[Pull Request]** セクションから **[Always suggest updating pull request branches]\(pull request ブランチの更新を常に推奨する\)** の設定を管理できます。詳しくは、「[プルリクエスト ブランチを更新する提案の管理](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-suggestions-to-update-pull-request-branches)」をご覧ください。

|
    - heading: GitHub Pages サイト用のカスタム HTTP ヘッダーを構成する
      notes: 
        # https://github.com/github/releases/issues/2124
        - |GitHub Enterprise Server インスタンスから提供されるすべての GitHub Pages サイトに適用されるカスタム HTTP ヘッダーを構成できるようになりました。詳しくは、「[Enterprise 向けの GitHub Pages を設定する](/admin/configuration/configuring-your-enterprise/configuring-github-pages-for-your-enterprise#configuring-github-pages-response-headers-for-your-enterprise)」をご覧ください。

|
    - heading: 変更履歴ビューでコミットを無視する
      notes:
        # https://github.com/github/releases/issues/2090
        - |リポジトリのルートに _.git-blame-ignore-revs_ ファイルを作成することにより、変更履歴ビューでリビジョンを無視できるようになりました。詳しくは、「[ファイルの表示](/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view)」をご覧ください。

|
    - heading: 明るいハイ コントラスト テーマが一般提供されるようになる
      notes:
        # https://github.com/github/releases/issues/2011
        - |前景と背景の要素の間のコントラストがより大きい明るいハイ コントラスト テーマが、一般提供されるようになりました。詳しくは、「[テーマ設定を管理する](/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/managing-your-theme-settings)」をご覧ください。

|
    - heading: タグ保護ルール
      notes:
        # https://github.com/github/releases/issues/1793
        - |リポジトリ所有者は、タグ保護ルールを構成してリポジトリのタグを保護できるようになりました。タグ保護ルールで保護すると、指定した名前パターンに一致するタグは、リポジトリの保守管理者または管理者ロールを持つユーザーだけが、作成および削除できるようになります。詳しくは、「[タグ保護ルールの構成](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-tag-protection-rules)」をご覧ください。

|
  bugs:
    # https://github.com/github/releases/issues/1934
    - |GitHub Apps でリリース アセットをアップロードできるようになりました。

|
  changes:
    # https://github.com/github/releases/issues/2063
    - |OAuth と GitHub Apps でデバイス認可フローを使うには、機能を手動で有効にする必要があります。この変更により、インテグレーターはリスクを認識し、この形式の認証をサポートすることを意識的に選択するようになるため、GitHub Enterprise Server ユーザーに対するフィッシング攻撃にアプリが使われる可能性が減ります。OAuth App または GitHub App を所有または管理していて、デバイス フローを使いたい場合は、アプリの設定ページでアプリに対してそれを有効にできます。デバイス フロー API エンドポイントは、この機能が有効になっていないアプリには、状態コード `400` で応答します。詳しくは、「[OAuth アプリの承認](/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow)」をご覧ください。

|
    # https://github.com/github/releases/issues/2049
    - |コード スキャン アラートのページに、既定のブランチのアラート状態と情報が常に表示されるようになりました。サイドバーにある新しい [Affected branches]\(影響を受けるブランチ\) パネルでは、他のブランチでのアラートの状態を確認できます。既定のブランチにアラートが存在しない場合、アラート ページの状態では、アラートが最後に検出された場所が [In branch]\(ブランチ内\) または [In pull request]\(pull request 内\) と表示されます。この改善により、コード ベースに取り込まれたアラートの状態をより簡単に把握できます。詳しくは、「[Code scanning アラートについて](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-alert-details)」をご覧ください。



アラート リスト ページは変更されておらず、`branch` でフィルター処理できます。コード スキャン API を使って、アラートに関するさらに詳細なブランチの情報を取得できます。詳しくは、REST API ドキュメントの「[Code Scanning](/rest/code-scanning)」をご覧ください。

|
    # https://github.com/github/releases/issues/2050
    - |コード スキャンでアラートの分析元の詳細が示されるようになりました。アラートに複数の分析元がある場合は、[Affected branches]\(影響を受けるブランチ\) サイドバーとアラート タイムラインに表示されます。[Affected branches]\(影響を受けるブランチ\) サイドバーの分析元アイコンをポイントすると、各分析元でのアラートの状態を確認できます。アラートの分析元が 1 つだけの場合は、アラート ページに分析元に関する情報は表示されません。これらの改善により、アラートの把握がいっそう簡単になります。特に、分析元が複数あるアラートの理解に役立ちます。これは、モノリポなど、複数の分析構成がある設定の場合に特に便利です。詳しくは、「[Code scanning アラートについて](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-analysis-origins)」をご覧ください。

|
    # https://github.com/github/releases/issues/2071
    - |ユーザーまたは Organization によって所有されるリポジトリのリストに追加されたフィルター オプション [テンプレート] を使うと、いっそう簡単にテンプレート リポジトリを検索できます。

|
    # https://github.com/github/releases/issues/1947
    - |GitHub Enterprise Server では、一般的な複数の画像形式 (PNG、JPG、GIF、PSD、SVG など) を表示でき、バージョン間の差異を比較する複数の方法が用意されています。pull request で追加または変更された画像をレビューするとき、それらの画像のプレビューが既定で表示されるようになりました。以前は、バイナリ ファイルは表示できないことを示すメッセージが表示され、[Display rich diff]\(リッチな差異の表示\) オプションを切り替える必要がありました。詳しくは、「[非コードファイルでの作業](/repositories/working-with-files/using-files/working-with-non-code-files)」をご覧ください。

|
    # https://github.com/github/releases/issues/2054
    - |新しい gist が、既定のブランチ名 `main` またはユーザー設定で定義されている代替の既定ブランチ名で作成されるようになりました。これは、GitHub Enterprise Server での他のリポジトリの作成方法と一致します。詳しくは、「[ブランチについて](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#about-the-default-branch)」と「[リポジトリのデフォルト ブランチ名を管理する](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-personal-account-settings/managing-the-default-branch-name-for-your-repositories)」をご覧ください。

|
    # https://github.com/github/releases/issues/2028
    - |gist の初期表示では、最新の 30 個のコメントだけが表示されるようになりました。**[Load earlier comments...]\(さらに前のコメントを読み込む...\)** をクリックしてさらに表示できます。これにより、多くのコメントが含まれる gist の表示が速くなります。詳しくは、「[Gist でコンテンツを編集・共有する](/get-started/writing-on-github/editing-and-sharing-content-with-gists)」をご覧ください。

|
    # https://github.com/github/releases/issues/2036
    - |ユーザー、Organization、リポジトリ、チームの設定ページのデザインが変更され、情報の構造と見つけやすさが向上するように、似た設定ページがセクションにまとめられました。詳しくは、[GitHub の変更ログ](https://github.blog/changelog/2022-02-02-redesign-of-githubs-settings-pages/)に関するページをご覧ください。

|
    # https://github.com/github/releases/issues/2129
    - |ラベルにフォーカスを設定するか、ラベルをポイントすると、ツールヒントにラベルの説明が表示されるようになりました。

|
    # https://github.com/github/releases/issues/1983
    - |リポジトリの招待の作成と削除が、API または Web インターフェイスのどちらを使って行われる場合でも、GitHub Enterprise Server インスタンスで有効にできるレート制限の対象になりました。レート制限について詳しくは、[レート制限の構成](/admin/configuration/configuring-your-enterprise/configuring-rate-limits)に関する記事をご覧ください。

|
    # https://github.com/github/releases/issues/2291
    - |MinIO から、2022 年 6 月 1 日以降、MinIO Gateway が削除されることが発表されています。MinIO Gateway for NAS は引き続きストレージ プロバイダーの 1 つとして Github Actions と Github Packages によってサポートされますが、MinIO からのサポートとバグ修正を受けられるよう、MinIO LTS のサポートに移行することをお勧めします。詳しくは、[minio/minio リポジトリでの GCS、Azure、HDFS に対する MinIO Gateway の削除のスケジュール](https://github.com/minio/minio/issues/14331)に関する記事をご覧ください。

|
  deprecations:
    - heading: 認証トークンの形式に対する変更
      notes:
        # https://github.com/github/releases/issues/1235
        - |GitHub 認証トークンの形式が変更されるため、6 月 3 日を過ぎると、GitHub Enterprise Server 3.1 以前を実行するインスタンスでは、GitHub Connect が動作しなくなります。詳しくは、[GitHub の変更ログ](https://github.blog/changelog/2021-03-31-authentication-token-format-updates-are-generally-available/)に関するページをご覧ください。

|
    - heading: 非推奨になった CodeQL ランナーではなく CodeQL CLI を使用する
      notes:
        # https://github.com/github/releases/issues/1632
        - |CodeQL ランナーは非推奨になったので、CodeQL CLI をお勧めします。GitHub Enterprise Server 3.4 以降には、CodeQL ランナーは含まれなくなります。この非推奨は、サード パーティの CI/CD システムで CodeQL のコード スキャンを使用するユーザーにのみ影響します。GitHub Actions のユーザーには影響ありません。お客様には、CodeQL ランナーのフィーチャー コンプリート置換であり、多くの機能が追加されている、CodeQL CLI に移行することを強くお勧めします。詳しくは、「[CodeQL ランナーから CodeQL CLI への移行](/code-security/code-scanning/using-codeql-code-scanning-with-your-existing-ci-system/migrating-from-the-codeql-runner-to-codeql-cli)」をご覧ください。

|
    - heading: GitHub Pages 用のテーマ ピッカーが削除された
      notes:
        - |GitHub Pages 用のテーマ ピッカーは、Pages の設定から削除されました。GitHub Pages 用のテーマの構成について詳しくは、「[Jekyll を使用して GitHub Pages サイトにテーマを追加する](/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll)」をご覧ください。

|
  known_issues:
      - "{% data variables.product.prodname_ghe_server %} インスタンスを設定したばかりでユーザーがいない場合、攻撃者が最初の管理者ユーザーを作成できました。"
      - カスタムのファイアウォール規則は、アップグレード プロセス中に削除されます。
      - "[Web インターフェイスからアップロードされた](https://github.com/blog/2105-upload-files-to-your-repositories) Git LFS 追跡ファイルが誤ってリポジトリに直接追加されます。"
      - 同じリポジトリ内の BLOB への固定リンクが含まれ、その BLOB のファイル パスが 255 文字を超える場合、issue はクローズできません。
      - "GitHub Connect で [ユーザーが GitHub.com を検索できる] が有効になっている場合、プライベートと内部リポジトリの issue は GitHub.com の検索結果に含まれません。"
      - "{% data variables.product.prodname_registry %} npm レジストリが、メタデータ応答で時刻値を返さなくなります。これは、パフォーマンスの大幅な向上を見込んで行われました。メタデータ応答の一部として時刻値を返すために必要なすべてのデータを引き続き保持します。また、既存のパフォーマンスの問題を解決したら、将来的にはこの値を再び返す予定です。"
      - pre-receive フックの処理に固有のリソース制限により、一部の pre-receive フックが失敗する場合があります。
      - 別のホストで作成されたバックアップからアプライアンスを復元した後、Actions のサービスを再起動する必要があります。

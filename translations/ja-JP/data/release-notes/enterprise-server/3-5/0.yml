---
date: '2022-05-31'
intro: |

  For upgrade instructions, see "[Upgrading {% data variables.product.prodname_ghe_server %}](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)."
sections:
  features:
    - 
      heading: メンテナンス後の検証テストのためのIP例外リスト
      notes:
        - |
          メンテナンスモードが有効化されている間に、GitHub Enterprise Serverインスタンス上のアプリケーションサービスにアクセスできるIPアドレスの許可リストを設定できるようになりました。許可されたIPアドレスからインスタンスのWebインターフェースにアクセスする管理者は、メンテナンス後及びメンテナンスモードを無効化する前にインスタンスの機能を検証できます。詳しい情報については「[メンテナンスモードの有効化とスケジューリング](/admin/configuration/configuring-your-enterprise/enabling-and-scheduling-maintenance-mode#validating-changes-in-maintenance-mode-using-the-ip-exception-list)」を参照してください。
    - 
      heading: カスタムリポジトリロールの一般提供
      notes:
        - |
          Organizationは、カスタムリポジトリロールを使用してユーザに付与するリポジトリへのアクセス権限をより細かく制御できるようになりました。詳しい情報については「[Organizationのカスタムリポジトリロールの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)」を参照してください。

          カスタムリポジトリロールはOrganizationのオーナーによって作成され、そのOrganization内のすべてのリポジトリに渡って利用できます。それぞれのロールにはカスタムの名前と説明が与えられます。ロールは、40以上の細かな権限のセットから設定できます。いったん作成されると、リポジトリの管理者は自分のリポジトリでカスタムロールを任意のユーザ、Team、外部のコラボレータに割り当てることができます。

          カスタムリポジトリロールは、Organizationの設定の新しい**Repository roles（リポジトリロール）**タブから作成、表示、編集、削除できます。

          カスタムリポジトリロールは、GitHub Enterprise ServerのREST APIでも完全にサポートされています。Organization APIを使ってOrganization内のすべてのカスタムリポジトリロールをリストでき、個人やTeamにリポジトリへのアクセスを付与するための既存のAPIは、カスタムリポジトリロールをサポートするために拡張されました。詳しい情報については、REST APIドキュメンテーションの「[Organizations](/rest/reference/orgs#list-custom-repository-roles-in-an-organization)」を参照してください。
    - 
      heading: GitHubコンテナレジストリのパブリックベータ
      notes:
        - |
          GitHubコンテナレジストリ（GHCR）はGitHub Enterprise Server 3.5でパブリックベータとして利用できるようになり、開発者はコンテナを公開、ダウンロード、管理できるようになりました。GitHub Packagesコンテナは、DockerイメージのホストのOCI標準の実装をサポートしています。詳しい情報については「[GitHubコンテナレジストリ](/packages/working-with-a-github-packages-registry/working-with-the-container-registry)」を参照してください。
    - 
      heading: Depandabotアップデートの一般提供
      notes:
        - |
          Dependabotバージョン及びセキュリティアップデートは、GitHub Enterprise Server 3.5で一般提供になりました。GitHub.comリポジトリで動作する一般的なすべてのエコシステムと機能は、GitHub Enterprise Serverインスタンスでセットアップできます。GitHub Enterprise Server上のDependabotにはGitHub ActionsとセルフホストのDependabotランナーのプール、GitHub Connectの有効化、管理者によるDependabotの有効化が必要です。

          パブリックベータでのリリース以降、Kubernetes環境でホストされたGitHub Actionsランナーの利用がサポートされます。

          詳しい情報については「[Dependabotアップデートのセットアップ](https://docs.github.com/en/enterprise-server@3.5/admin/github-actions/enabling-github-actions-for-github-enterprise-server/setting-up-dependabot-updates)」を参照してください。
    - 
      heading: Server Statisticsのパブリックベータ
      notes:
        - |
          インスタンスの利用状況のデータをレビューし、その集約データをGitHubと共有することによって、チームの作業の様子を分析し、GitHub Enterprise Serverから得ている価値を理解し、弊社が製品を改善するのを支援していただけるようになりました。データをCSVもしくはJSONファイルとしてダウンロードするか、REST APIを使ってデータにアクセスすることによって、時間の経過に伴う利用状況の分析に独自のツールを使うことができます。収集された集約メトリクスのリストを見るには、「[Server Statisticsについて](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics#server-statistics-data-collected)」を参照してください。Server Statisticsのデータには、個人情報や、コード、Issue、コメント、Pull Requestの内容といったGitHubの内容は含まれません。弊社がどのようにServer Statisticsのデータを保存し、保護しているかをよく理解していただくには、「[GitHubセキュリティ](https://github.com/security)」を参照してください。Server Statisticsに関する詳しい情報については「[Server StatisticsでのTeamの作業の分析](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics)」を参照してください。この機能はパブリックベータとして利用できます。
    - 
      heading: GitHub Actionsのレート制限が設定可能に
      notes:
        - |
          サイト管理者は、GitHub Actionsのレート制限を有効化し、設定できるようになりました。デフォルトでは、レート制限は無効化されています。ワークフローのジョブが利用可能なランナーにすぐに割り当てできない場合、そのジョブはランナーが利用可能になるまでキューで待ちます。しかし、もしもGitHub Actionsが継続的に高負荷になり続けているなら、キューは消費されるよりも早く積み上がっていくことになり、GitHub Enterprise Serverインスタンスのパフォーマンスは低下してしまうかもしれません。これを避けるために、管理者はレート制限を設定できます。レート制限を超えると、追加のワークフローの実行はキューに置かれるのではなく、即座に失敗するようになります。レートが閾値以下で安定すれば、新しい実行は再びキューイングできるようになります。詳しい情報については「[レート制限の設定](/admin/configuration/configuring-your-enterprise/configuring-rate-limits#configuring-rate-limits-for-github-actions)」を参照してください。
    - 
      heading: GitHub ActionsでのセキュアなデプロイメントのためのOpenID Connect (OIDC)
      notes:
        - |
          GitHub Enterprise Server上のGitHub Actionsは、クラウドプロバイダへのセキュアなデプロイメントのためのOIDCをサポートしました。これは、デプロイメントのたびに自動的にローテートされる短期間有効なトークンを使います。OIDCは、以下の機能を有効化します。

          - 長期間有効なクラウドのシークレットをインスタンスに保存する必要のない、クラウドプロバイダとGitHub Enterprise Server間のシームレスな認証
          - クラウドの管理者は、GitHub Actionsのワークフローがクラウドのリソースに最小限のアクセスだけを持つことを保証する、特定のクラウドプロバイダのセキュリティメカニズムに依存可能GitHub Enterprise Serverとクラウド間で、重複するシークレットの管理はない

          詳しい情報については「[デプロイメントのセキュリティ強化](/actions/deployment/security-hardening-your-deployments)」を参照してください。
    - 
      heading: Enterprise内でのGitHub Actionsの共有の一般提供
      notes:
        - |
          インターナルリポジトリでのGitHub Actionsのサポートが、GitHub Enterprise Serverインスタンス上のOrganizationで一般提供になりました。インターナルリポジトリでアクションを共有することで、自動化をインナーソースできます。Organization内、あるいはインスタンス上の任意のOrganization内の他のリポジトリのワークフローへのアクセス許可を、リポジトリの設定で管理したり、REST APIを使って許可したりできます。詳しい情報については「[EnterpriseでのActionsとワークフローの共有](/actions/creating-actions/sharing-actions-and-workflows-with-your-enterprise)」、「[リポジトリのGitHub Actionsの設定の管理](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)」、REST APIドキュメンテーションの「[Actionsの権限](/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)」を参照してください。
    - 
      heading: GitHub Enterprise Server上のGitHub Actionsのキャッシュサポートを一般提供
      notes:
        - |
          GitHub Actionsのワークフローを高速化するために依存関係のキャッシングが利用できるようになりました。ジョブの依存関係をキャッシュするには、[actions/cache](https://github.com/actions/cache)アクションを含めて一意のキーと合わせてキャッシュを生成できます。キャッシュは同じリポジトリ内のすべてのワークフロー間で共有できます。そしてそれらのワークフローは、キャッシュを復元して高速に動作できます。

          Actionsのユーザは、キャッシュAPIを使って以下のこともできます。

          - リポジトリごとに許可されるキャッシュサイズの範囲に関するEnterpriseポリシーの定義
          - 各リポジトリ内のキャッシュの利用状況を問い合わせ、すべてのキャッシュの合計サイズが上限に達していないかをモニタリング
          - リポジトリにおけるキャッシュの要求に基づき、Entepriseの制限内でリポジトリの最大キャッシュサイズを増やす
          - OrganizationレベルもしくはEnterpriseレベルで集約されたキャッシュの利用状況のモニタリング

          Enterpriseアカウント内で設定された外部blobストレージは、ワークフローの成果物、ログ、そしてキャッシュ間で共有されるようになりました。詳しい情報については「[ワークフローの高速化のための依存関係のキャッシュ](/actions/using-workflows/caching-dependencies-to-speed-up-workflows)」を参照してください。
    - 
      heading: Web UIで作成されたコミットへの自動署名
      notes:
        - |
          ファイルを編集したり、Pull Requestをマージしたりといった、Webインターフェースで作成されたコミットに自動的に署名するよう、GitHub Enterprise Serverを設定できるようになりました。署名されたコミットは、変更が信頼できるソースから来たものであるという確信を増してくれます。この機能によって、[コミットの署名を必須にする](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-signed-commits)ブランチ保護設定がWebインターフェースで作成されたものも含めて署名されたコミットが入ってくるのを許しながら、署名されていないコミットがリポジトリに入り込むのをブロックするようにできます。詳しい情報については「[Webのコミット署名の設定](/admin/configuration/configuring-your-enterprise/configuring-web-commit-signing)」を参照してください。
    - 
      heading: いつでもライセンスの利用状況を同期
      notes:
        - |
          GitHub Connectを使ってGitHub Enterprise ServerとGitHub Enterprise Cloudの間でライセンスの使用状況を自動的に同期しているお客様は、自動的な週次の同期とは独立してライセンスの使用状況を同期できるようになりました。この機能は同期ジョブのステータスも報告します。詳しい情報については「[GitHub Enterprise ServerとGitHub Enterprise Cloud間のライセンス使用状況の同期](/billing/managing-your-license-for-github-enterprise/syncing-license-usage-between-github-enterprise-server-and-github-enterprise-cloud#manually-syncing-license-usage)」を参照してください。
    - 
      heading: GitHub Actionsのための再利用可能なワークフローの一般提供
      notes:
        - |
          再利用可能なワークフローが一般提供になりました。再利用可能なワークフローは、ワークフロー全体を1つのアクションであるかのように再利用できるようにすることで、重複を減らすための役に立ちます。一般提供リリースで、GitHub Enterprise Serverには多くの改善が利用可能になりました。詳しい情報については「[ワークフローの再利用](/actions/using-workflows/reusing-workflows)」を参照してください。

          - 出力を使って、データを再利用可能なワークフローから呼び出し側のワークフロー内の他のジョブに渡すことができます。
          - 環境のシークレットを再利用可能なワークフローに渡すことができます。
          - Audit logにはどの再利用可能なワークフローが使われたのかということに関する情報が含まれます。
          - 呼び出し元のリポジトリと同じリポジトリ内にある再利用可能なワークフローは、パスとファイル名だけで参照できます（`PATH/FILENAME`）。呼び出されたワークフローは、呼び出し元のワークフローと同じコミットからのものになります。
    - 
      heading: GitHub Actionsのセルフホストランナーは自動アップデートを無効化可能に
      notes:
        - |
          セルフホストランナーがソフトウェアアップデートをいつ行うかを、これまでよりも制御できるようになりました。ランナーに`--disableupdate`フラグを指定すれば、新しいバージョンのランナーが利用可能であっても、自動的なソフトウェアアップデートを行おうとはしなくなります。こうすることで、独自のスケジュールの下でセルフホストランナーを更新できるようになり、特にセルフホストランナーがコンテナ内にある場合に便利です。

          GitHub Actionsサービスとの互換性のために、ランナーは新しいバージョンが利用可能になってから30日以内に手動でアップデートする必要があります。最新のランナーバージョンのインストール方法については、[ランナーリポジトリの最新リリース](https://github.com/actions/runner/releases)のインストール手順を参照してください。
    - 
      heading: ワークフローに制限によるGitHub Actionsのためのセルフホストランナーの保護
      notes:
        - |
          Organizationのオーナーは、セルフホストランナー上のCI/CDワークフローのセキュリティを、ランナーグループにアクセスできるワークフローを選択することによって向上させられるようになりました。以前は、Issueへのラベル付けなど、リポジトリ内の任意のワークフローがOrganizationで利用できるセルフホストランナーにアクセスできました。詳しい情報については「[グループを使ったセルフホストランナーへのアクセスの管理](/actions/hosting-your-own-runners/managing-access-to-self-hosted-runners-using-groups#changing-what-workflows-can-access-a-runner-group)」及び[GitHub Blog](https://github.blog/2022-03-23-github-actions-secure-self-hosted-runners-specific-workflows/)を参照してください。
    - 
      heading: GitHub ActionsによるPull Requestの承認の回避
      notes:
        - |
          GitHub ActionsがPull Requestを承認できるかを制御できるようになりました。この機能は、ユーザがGitHub Actionsを使って"Required approvals（必須の承認）"ブランチ保護要求を満たし、他のユーザがレビューしてない変更をマージしてしまうことに対する保護になります。既存のワークフローを壊してしまわないように、**Allow GitHub Actions reviews to count towards required approval　（GitHub Actionsレビューを必須の承認に対してカウントすることの許可）**はデフォルトで有効になっています。Organizationのオーナーはこの機能をOrganizationのGitHub Actions設定で無効化できます。詳しい情報については「[OrganizationでのGitHub Actionsの無効化もしくは制限(/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-approving-pull-requests)」を参照してください。
    - 
      heading: 失敗もしくは個々のGitHub Actionsのジョブの再実行
      notes:
        - |
          失敗したジョブ、あるいはGitHub Actionsワークフローの実行中の個別のジョブだけを再実行できるようになりました。詳しい情報については「[ワークフローとジョブの再実行](/actions/managing-workflow-runs/re-running-workflows-and-jobs)」を参照してください。
    - 
      heading: 依存関係グラフによるGitHub Actionsのサポート
      notes:
        - |
          依存関係グラフは、GitHub ActionsワークフローのYAMLファイルを検出するようになりました。GitHub Enterprise Serverは、**Insights**タブの依存関係グラフセクションの中にワークフローファイルを表示します。アクションを公開するリポジトリは、リポジトリのホームページの"Used By（利用先）"コントロールからそのアクションに依存しているリポジトリ数を見ることができるようにもなりました。詳しい情報については「[依存関係グラフについて](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)」を参照してください。
    - 
      heading: Enterpriseのセキュリティ概要のパブリックベータ
      notes:
        - |
          GitHub Advanced Securityのお客様は、Enterpriseレベルでセキュリティアラートの概要を見ることができるようになりました。Enterpriseレベルの新たな**Security**タブは、アプリケーションのセキュリティリスクのリポジトリ中心のビューとともに、すべてのSecret scanningアラートのアラート中心のビューを提供します。詳しい情報については「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。
    - 
      heading: Organizationのセキュリティビューの一般提供
      notes:
        - |
          Organizationレベルのセキュリティアラートの概要が、一般提供になりました。GitHub Advanced Securityのお客様は、セキュリティの概要を使ってアプリケーションのセキュリティリスクのリポジトリ中心のビューを見たり、Organization内のすべてのリポジトリに対するCode scanning、Dependabot、Secret scanningのすべてのアラートのアラート中心のビューを見たりすることができます。詳しい情報については「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。
    - 
      heading: Code scanningはより多くのセキュリティの問題を検出し、新しい言語のバージョンをサポート
      notes:
        - |
          Code scanningは多くのCWEを検出するようになり、CodeQLによるコードスキャンニングは以下の言語のリリースの標準的な言語機能を完全にサポートします。

          - C# 10 / .NET 6
          - Python 3.10
          - Java 17
          - TypeScript 4.5

          詳しい情報については[GitHub Blog](https://github.blog/changelog/2022-02-25-code-scanning-detects-more-security-issues-supports-new-language-versions/)を参照してください。
    - 
      heading: Organization全体のコードスキャンニングアラートの表示
      notes:
        - |
          GitHub Advanced Securityのお客様は、Organizationの**Security*タブでコードスキャンニングアラートを見ることができるようになりました。このビューは、Organizationのオーナーと、[セキュリティ管理者のロール](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)を持つTeamのメンバーが利用できます。詳しい情報については「[セキュリティの概要について](/code-security/security-overview/about-the-security-overview)」を参照してください。
        - |
          ユーザは、REST APIを通じてGitHub Enterprise Serverインスタンス上のOrganizationのコードスキャンニングアラートを取得できるようになりました。この新しいAPIエンドポイントは、既存の[リポジトリのエンドポイント](/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)を補完するものです。詳しい情報については、REST APIドキュメンテーションの[Code scanning](/rest/code-scanning)を参照してください。
    - 
      heading: プッシュ保護としてSecret scanningが利用可能
      notes:
        - |
          GitHub Enterprise Serverは、高い信頼度でトークンが検出されたプッシュをブロックできるようになりました。開発者は、シークレットをコミットしなければならない理由ｍの詳細をWeb UIから提供することによって、このブロックをバイパスできます。詳しい情報については「[Secret scanningでのプッシュの保護](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)」を参照してください。
    - 
      heading: Secret Scanningのカスタムパターンのdry run
      notes:
        - |
          GitHub Advanced Securityのお客様は、Organizationあるいはリポジトリレベルのカスタムのシークレットスキャンニングパターンをdry runできるようになりました。dry runを行うことで、オーナーもしくは管理アクセスを持つ人は、パターンを公開してアラートを発生させる前に、そのパターンをレビューして磨きあげることができます。パターンを作成し、**Save and dry run（保存してdry run）**を使って結果を取得してください。スキャンには通常数秒しかかかりませんが、GitHub Enterprise Serverはdry runの結果が準備できればメールでOrganizationのオーナーもしくはリポジトリ管理者に通知も行います。詳しい情報については「[Secret scanningについて](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)」及び「[Secret scanningのカスタムパターンの定義](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)」を参照してください。
    - 
      heading: Secret scanningのカスタムパターンイベントがAudit logに記録されるようになりました
      notes:
        - |
          Audit logには、シークレットスキャンニングのカスタムパターンに関連するイベントが含まれるようになりました。このデータは、GitHub Advanced Securityのお客様がセキュリティ及びコンプライアンスの監査のために[リポジトリ](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#repository_secret_scanning_custom_pattern-category-actions)、[Organization](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#org_secret_scanning_custom_pattern-category-actions)、[Enterprise](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_custom_pattern-category-actions)レベルのカスタムパターンに対して行われたアクションを理解するための役に立ちます。詳しい情報については「[OrganizationのAudit logのレビュー](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization)」あるいは「[EnterpriseのAudit logのレビュー](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise)」を参照してください。
    - 
      heading: カスタムリポジトリロールでのSecret scanningの権限設定
      notes:
        - |
          カスタムリポジトリロールを管理する際に、Secret scanningのための2つの新たな権限を設定できるようになりました。

          - Secret scanningの結果表示
          - Secret scanningの結果の却下もしくは再オープン

          詳しい情報については「[Organizationのカスタムリポジトリロールの管理](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)」を参照してください。
    - 
      heading: Secret scanningはアーカイブされたリポジトリをサポートしました
      notes:
        - |
          GitHub Advanced Securityのお客様は、UI及びAPIを通じてアーカイブされたリポジトリのSecret scanningを有効化できるようになりました。詳しい情報については「[Secret scanningについて](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)」、「[アーカイブされたリポジトリについて](/repositories/archiving-a-github-repository/archiving-repositories)」、REST APIドキュメンテーションの「[リポジトリ](/rest/repos/repos#update-a-repository)」を参照してください。
    - 
      heading: アラートの場所に関するSecret scanningのwebhook
      notes:
        - |
          GitHub Advanced Security customers using secret scanning can now opt to receive a webhook each time a secret is detected in a new location. The `secret_scanning_alert_location` webhook event includes location details, like the commit SHA, and the associated alert for the detection. A location is created for every new file path containing the detected secret. For more information, see "[Webhook events and payloads](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret_scanning_alert_location)."
    - 
      heading: View Dependabot alerts across an organization
      notes:
        - |
          GitHub Advanced Security customers can now view Dependabot alerts in in an organization's **Security** tab. This view is available to organization owners and members of teams with the [security manager role](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization). For more information, see "[About the security overview](/code-security/security-overview/about-the-security-overview)."
    - 
      heading: Configure permissions for Dependabot alerts with custom repository roles
      notes:
        - |
          You can now configure two new permissions for Dependabot alerts when managing custom repository roles.

          - View Dependabot alerts
          - Dismiss or reopen Dependabot alerts

          For more information, see  "[Managing custom repository roles for an organization](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)."
    - 
      heading: Reopen dismissed Dependabot alerts
      notes:
        - |
          You can now reopen dismissed Dependabot alerts through the UI page for a closed alert. This does not affect Dependabot pull requests or the GraphQL API. For more information, see "[About Dependabot alerts](/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)."
    - 
      heading: Pub support for Dependabot version updates is in public beta
      notes:
        - |
          Users of Dependabot version updates can now proactively update dependencies for Flutter or Dart projects that use the Pub package manager.

          To test [version updates](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates) on your own Dart or Flutter repository, add the following configuration file in <code>[.github/dependabot.yaml](/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates#enabling-dependabot-version-updates)</code>. Note the `package-ecosystem: "pub"` and `enable-beta-ecosystems: true` flags.
          ```yaml
          version: 2
          enable-beta-ecosystems: true
          updates:
            - package-ecosystem: "pub"
              directory: "/"
              schedule:
                interval: "weekly"
          ```
    - 
      heading: See pull request associated with a repository's Dependabot alerts via GraphQL API
      notes:
        - |
          The new `DependabotUpdate` GraphQL object lets you view information about what happens to your repository's security updates. When GitHub Enterprise Server detects that a dependency in your repository is vulnerable, Dependabot will attempt to open a pull request to update that dependency to a non-vulnerable version. You can now see the pull request that fixes the vulnerability. In some cases, Dependabot fails to open a pull request. Previously, the error message that Dependabot generated was only visible in the "Dependabot Alerts" section of the **Security** tab. Now, if Dependabot runs into an error when trying to open a pull request for a security alert, you can determine the reason using the GraphQL API. For more information, see "[Objects](/graphql/reference/objects#dependabotupdate)" in the GraphQL API documentation.
    - 
      heading: Access more information about Dependabot alerts via GraphQL API
      notes:
        - |
          You can now view fixed alerts from Dependabot with the GraphQL API. You can also access and filter by state, as well as by unique numeric identifier, and you can filter by state on the vulnerability alert object. The following fields now exist for a `RepositoryVulnerabilityAlert`.

          - `number`
          - `fixed_at`
          - `fix_reason`
          - `state`

          For more information, see "[Objects](/graphql/reference/objects#repositoryvulnerabilityalert)" in the GraphQL API documentation.
    - 
      heading: Git events in the enterprise audit log
      notes:
        - |
          The following Git-related events can now appear in the enterprise audit log. If you enable the feature and set an audit log retention period, the new events will be available for search via the UI and API, or export via JSON or CSV.

          - `git.clone`
          - `git.fetch`
          - `git.push`

          Due to the large number of Git events logged, we recommend you monitor your instance's file storage and review your related alert configurations. For more information, see "[Audit log events for your enterprise](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#git-category-actions)" and "[Monitoring storage](/admin/enterprise-management/monitoring-your-appliance/recommended-alert-thresholds#monitoring-storage)."
    - 
      heading: Improvements to CODEOWNERS
      notes:
        - |
          This release includes improvements to CODEOWNERS.

          - Syntax errors are now surfaced when viewing a CODEOWNERS file from the web. Previously, when a line in a CODEOWNERS file had a syntax error, the error would be ignored or in some cases cause the entire CODEOWNERS file to not load. GitHub Apps and Actions can access the same list of errors using new REST and GraphQL APIs. For more information, see "[Repositories](/rest/repos/repos#list-codeowners-errors)" in the REST API documentation or "[Objects](/graphql/reference/objects#repositorycodeowners)" in the GraphQL API documentation.
          - After someone creates a new pull request or pushes new changes to a draft pull request, any code owners that will be requested for review are now listed in the pull request under "Reviewers". This feature gives you an early look at who will be requested to review once the pull request is marked ready for review.
          - Comments in CODEOWNERS files can now appear at the end of a line, not just on dedicated lines.

          For more information, see "[About code owners](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
    - 
      heading: More ways to keep a pull request's topic branch up to date
      notes:
        - |
          The **Update branch** button on the pull request page lets you update your pull request's branch with the latest changes from the base branch. This is useful for verifying your changes are compatible with the current version of the base branch before you merge. Two enhancements now give you more ways to keep your branch up-to-date.

          - When your pull request's topic branch is out of date with the base branch, you now have the option to update it by rebasing on the latest version of the base branch. Rebasing applies the changes from your branch onto the latest version of the base branch, resulting in a branch with a linear history since no merge commit is created. To update by rebasing, click the drop down menu next to the **Update Branch** button, click **Update with rebase**, and then click **Rebase branch**. Previously, **Update branch** performed a traditional merge that always resulted in a merge commit in your pull request branch. This option is still available, but now you have the choice. For more information, see "[Keeping your pull request in sync with the base branch](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/keeping-your-pull-request-in-sync-with-the-base-branch)."

          - A new repository setting allows the **Update branch** button to always be available when a pull request's topic branch is not up to date with the base branch. Previously, this button was only available when the **Require branches to be up to date before merging** branch protection setting was enabled. People with admin or maintainer access can manage the **Always suggest updating pull request branches** setting from the **Pull Requests** section in repository settings. For more information, see "[Managing suggestions to update pull request branches](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-suggestions-to-update-pull-request-branches)."
    - 
      heading: Configure custom HTTP headers for GitHub Pages sites
      notes:
        - |
          You can now configure custom HTTP headers that apply to all GitHub Pages sites served from your GitHub Enterprise Server instance. For more information, see "[Configuring GitHub Pages for your enterprise](/admin/configuration/configuring-your-enterprise/configuring-github-pages-for-your-enterprise#configuring-github-pages-response-headers-for-your-enterprise)."
    - 
      heading: Ignore commits in blame view
      notes:
        - |
          It's now possible to ignore revisions in the blame view by creating a _.git-blame-ignore-revs_ file in the root of your repository. For more information, see "[Viewing a file](/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view)."
    - 
      heading: Light high contrast theme is generally available
      notes:
        - |
          A light high contrast theme, with greater contrast between foreground and background elements, is now generally available. For more information, see "[Managing your theme settings](/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/managing-your-theme-settings)."
    - 
      heading: Tag protection rules
      notes:
        - |
          Repository owners can now configure tag protection rules to protect a repository's tags. Once protected by a tag protection rule, tags matching a specified name pattern can only be created and deleted by users with the Maintain or Admin role in the repository. For more information, see "[Configuring tag protection rules](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-tag-protection-rules)."
  bugs:
    - |
      It is now possible for GitHub Apps to upload release assets.
  changes:
    - |
      To use the device authorization flow for OAuth and GitHub Apps, you must manually enable the feature. This change reduces the likelihood of apps being used in phishing attacks against GitHub Enterprise Server users by ensuring integrators are aware of the risks and make a conscious choice to support this form of authentication. If you own or manage an OAuth App or GitHub App and you want to use the device flow, you can enable it for your app via the app's settings page. The device flow API endpoints will respond with status code `400` to apps that have not enabled this feature. For more information, see "[Authorizing OAuth Apps](/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow)."
    - |
      The code scanning alert page now always shows the alert status and information for the default branch. There is a new "Affected branches" panel in the sidebar where you can see the status of the alert in other branches. If the alert does not exist in your default branch, the alert page will show the status as "In branch" or "In pull request" for the location where the alert was last seen. This improvement makes it easier to understand the status of alerts which have been introduced into your code base. For more information, see "[About code scanning alerts](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-alert-details)."

      The alert list page is not changed and can be filtered by `branch`. You can use the code scanning API to retrieve more detailed branch information for alerts. For more information, see "[Code Scanning](/rest/code-scanning)" in the REST API documentation.
    - |
      Code scanning now shows the details of the analysis origin of an alert. If an alert has more than one analysis origin, it is shown in the "Affected branches" sidebar and in the alert timeline. You can hover over the analysis origin icon in the "Affected branches" sidebar to see the alert status in each analysis origin. If an alert only has a single analysis origin, no information about analysis origins is displayed on the alert page. These improvements will make it easier to understand your alerts. In particular, it will help you understand those that have multiple analysis origins. This is especially useful for setups with multiple analysis configurations, such as monorepos. For more information, see "[About code scanning alerts](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-analysis-origins)."
    - |
      Lists of repositories owned by a user or organization now have an additional filter option, "Templates", making it easier to find template repositories.
    - |
      GitHub Enterprise Server can display several common image formats, including PNG, JPG, GIF, PSD, and SVG, and provides several ways to compare differences between versions. Now when reviewing added or changed images in a pull request, previews of those images are shown by default. Previously, you would see a message indicating that binary files could not be shown and you would need to toggle the "Display rich diff" option. For more information, see  "[Working with non-code files](/repositories/working-with-files/using-files/working-with-non-code-files)."
    - |
      New gists are now created with a default branch name of either `main` or the alternative default branch name defined in your user settings. This matches how other repositories are created on GitHub Enterprise Server. For more information, see "[About branches](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#about-the-default-branch)" and "[Managing the default branch name for your repositories](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-personal-account-settings/managing-the-default-branch-name-for-your-repositories)."
    - |
      Gists now only show the 30 most recent comments when first displayed. You can click **Load earlier comments...** to view more. This allows gists that have many comments to appear more quickly. For more information, see "[Editing and sharing content with gists](/get-started/writing-on-github/editing-and-sharing-content-with-gists)."
    - |
      Settings pages for users, organizations, repositories, and teams have been redesigned, grouping similar settings pages into sections for improved information architecture and discoverability. For more information, see the [GitHub changelog](https://github.blog/changelog/2022-02-02-redesign-of-githubs-settings-pages/).
    - |
      Focusing or hovering over a label now displays the label description in a tooltip.
    - |
      Creating and removing repository invitations, whether done through the API or web interface, are now subject to rate limits that may be enabled on your GitHub Enterprise Server instance. For more information about rate limits, see "[Configuring rate limits](/admin/configuration/configuring-your-enterprise/configuring-rate-limits)."
    - |
      MinIO has announced the removal of the MinIO Gateways starting June 1st, 2022. While MinIO Gateway for NAS continues to be one of the supported storage providers for Github Actions and Github Packages, we recommend moving to MinIO LTS support to avail support and bug fixes from MinIO. For more information about rate limits, see "[Scheduled removal of MinIO Gateway for GCS, Azure, HDFS in the minio/minio repository](https://github.com/minio/minio/issues/14331)."
  deprecations:
    - 
      heading: Change to the format of authentication tokens
      notes:
        - |
          GitHub Connect will no longer work after June 3rd for instances running GitHub Enterprise Server 3.1 or older, due to the format of GitHub authentication tokens changing. For more information, see the [GitHub changelog](https://github.blog/changelog/2021-03-31-authentication-token-format-updates-are-generally-available/).
    - 
      heading: CodeQL runner deprecated in favor of CodeQL CLI
      notes:
        - |
          The CodeQL runner is deprecated in favor of the CodeQL CLI. GitHub Enterprise Server 3.4 and later no longer include the CodeQL runner. This deprecation only affects users who use CodeQL code scanning in 3rd party CI/CD systems. GitHub Actions users are not affected. GitHub strongly recommends that customers migrate to the CodeQL CLI, which is a feature-complete replacement for the CodeQL runner and has many additional features. For more information, see "[Migrating from the CodeQL runner to CodeQL CLI](/code-security/code-scanning/using-codeql-code-scanning-with-your-existing-ci-system/migrating-from-the-codeql-runner-to-codeql-cli)."
    - 
      heading: GitHub Pagesのテーマピッカーの削除
      notes:
        - |
          GitHub Pagesのテーマピッカーは、Pagesの設定から削除されました。GitHub Pagesのテーマ設定に関する詳しい情報については「[Jekyllを使ったGitHub Pagesサイトへのテーマの追加(/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll)を参照してください。
  known_issues:
    - 新しくセットアップされたユーザを持たない{% data variables.product.prodname_ghe_server %}インスタンスで、攻撃者が最初の管理ユーザを作成できました。
    - アップグレードの過程で、カスタムのファイアウォールのルールが削除されます。
    - Git LFSが追跡するファイル[Webインターフェースからアップロードされたもの](https://github.com/blog/2105-upload-files-to-your-repositories)が、不正にリポジトリに直接追加されてしまいます。
    - 同じリポジトリ内のファイルパスが255文字を超えるblobへのパーマリンクを含むIssueをクローズできませんでした。
    - GitHub Connectで"Users can search GitHub.com"が有効化されている場合、GitHub.comの検索結果にプライベート及びインターナルリポジトリのIssueが含まれません。
    - '{% data variables.product.prodname_registry %}のnpmレジストリは、メタデータのレスポンス中で時間の値を返さなくなります。これは、大きなパフォーマンス改善のために行われました。メタデータレスポンスの一部として時間の値を返すために必要なすべてのデータは保持し続け、既存のパフォーマンスの問題を解決した将来に、この値を返すことを再開します。'
    - pre-receive フックの処理に固有のリソース制限によって、pre-receive フックに失敗するものが生じることがあります。
    - Actions services need to be restarted after restoring an appliance from a backup taken on a different host.
    - 'Deleted repositories will not be purged from disk automatically after the 90-day retention period ends. [Updated: 2022-06-08]'

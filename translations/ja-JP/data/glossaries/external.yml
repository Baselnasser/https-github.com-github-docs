- term: '@メンション'
  description:
    "GitHub のユーザーに通知するには、ユーザー名の前に \"@\" を付けます。GitHub の Organization のユーザーも、メンションされるチームの一員にすることができます。"
- term: アクセス トークン
  description: >-
    コマンド ラインと API のどちらで Git を使っても、HTTPS 経由で Git 操作を実行するときにパスワードの代わりに使用されるトークン。個人用アクセス トークンとも呼ばれます。
- term: API プレビュー
  description: >-
    新しい API や、既存の API メソッドに対する変更を、公式 GitHub API の一部となる前に試す方法。
- term: アプライアンス
  description: >-
    Just Enough Operating System (JeOS) と結合して、業界標準ハードウェア (通常はサーバー) または仮想マシンで最適に動作するソフトウェア アプリケーション。
- term: assignee
  description: issue に割り当てられたユーザー。
- term: 認証コード
  description: >-
    ブラウザーから 2FA でサインインするときに、GitHub パスワードの他に入力するコード。このコードは、アプリケーションによって生成されるか、お使いのスマートフォンにテキスト メッセージで送信されます。"2FA 認証コード" とも呼ばれます。
- term: ベース ブランチ
  description:
    pull request をマージするときに変更の組み込み先となるブランチ。必要な場合は、pull request を作成するときに、ベース ブランチをリポジトリの既定のブランチから別のブランチに変更できます。
- term: Basic 認証
  description: >-
    資格情報が暗号化されていないテキストとして送信される場合の認証の方法。
- term: 略歴
  description: >-
    プロフィールに記載されている、ユーザーが作成した説明 ([プロフィールに略歴を追加する](/articles/adding-a-bio-to-your-profile))
- term: 支払いサイクル
  description: 特定の支払いプランの時間間隔。
- term: 支払い請求先メール アドレス
  description: >-
    領収書や、クレジットカードまたは PayPal の支払いなど、GitHub からの支払い関連の連絡の送信先となる Organization のメール アドレス。
- term: 支払いマネージャー
  description: Organization の支払い設定を管理する Organization メンバー。
- term: お支払いプラン
  description: >-
    ユーザーと Organization 向けのお支払いプラン。プランの各タイプのセット機能が含まれています。
- term: blame
  description: >-
    Git の "blame" 機能は、ファイルの各行に対して最後に行われた変更を説明するものであり、通常は、リビジョン、作成者、時刻が表示されます。これは、機能が追加された日時や、特定のバグを引き起こしたコミットを追跡する場合などに役立ちます。
- term: block
  description: >-
    ユーザーが Organization のリポジトリでコラボレーションできないようにすること。
- term: 分岐
  description: >-
    ブランチとは、リポジトリのパラレル バージョンです。これは、リポジトリに含まれていますが、プライマリ ブランチや main ブランチに影響を与えることはなく、"ライブ" バージョンに混乱をもたらさずに自由に作業できるものです。必要な変更を行ったら、ブランチを main ブランチにマージし直して、変更を公開できます。
- term: ブランチ制限
  description: >-
    特定のユーザーまたはチームのみが、プッシュしたり、ブランチに対して変更を行ったりすることができるように、リポジトリ管理者が有効化できる制限。
- term: Business プラン
  description: >-
    Organization の支払いプラン。無制限のパブリック リポジトリやプライベート リポジトリでコラボレーションしたり、SAML SSO を使った GitHub に対する認証を Organization メンバーに許可または要求したり、SAML または SCIM を使ってアクセスをプロビジョニングまたはプロビジョニング解除したりすることができます。
- term: CA 証明書
  description: >-
    証明機関 (CA) から発行されるデジタル証明書。これによって、2 つのマシン (ユーザーのコンピューターと GitHub.com など) の間で有効な接続が確保され、サイトの所有権が検証されます。
- term: カード
  description: Issue または pull request に関連付けられたプロジェクト ボード内にある移動可能な正方形。
- term: チェック
  description: >-
    チェックは、{% data variables.product.product_name %} でのステータス チェックのタイプの 1 つです。「[ステータス チェック](#status-checks)」を参照してください。
- term: チェックアウト
  description: >-
    "git checkout" は、コマンド ラインで使うと、新しいブランチを作成できます。また、"git checkout" によって、作業中のブランチを、別のブランチに変更するだけではなく、"git checkout [branchname] [path to file]" を指定した別のブランチの別のバージョンのファイルに切り替えることもできます。"checkout" アクションを使うと、オブジェクト データベースのツリー オブジェクトや BLOB でワーキング ツリー全体または一部を更新できます。また、ワーキングツリー全体が新しいブランチをポイントしている場合は、インデックスと HEAD を更新できます。
- term: チェリーピック
  description: >-
    変更のサブセットを一連の変更 (通常はコミット) から選び、新しい一連の変更を別の codebase 上に記録すること。Git では、別のブランチの既存のコミットによって導入された変更を抽出したり、それを現在のブランチのヒントに基づいて新しいコミットとして記録したりするために、"git cherry-pick" コマンドを使ってこれを実行します。詳しくは、Git ドキュメントで [git-cherry-pick](https://git-scm.com/docs/git-cherry-pick) に関するページを参照してください。
- term: 子チーム
  description: >-
    入れ子チーム内で、親チームのアクセス権限と @メンションを継承するサブチーム。
- term: クリーン
  description: >-
    ワーキング ツリーが現在の HEAD によって参照されているリビジョンに対応している場合、そのワーキング ツリーはクリーンです。「ダーティ」も参照してください。
- term: 複製
  description: >-
    クローンとは、Web サイトのサーバー上ではなく、ユーザーのコンピューターに存在するリポジトリのコピーのことです。または、そのコピーを作成する操作を指します。クローンを作成すると、好きなエディターでファイルを編集したり、オンラインでなくても、Git を使って変更を記録したりすることができます。クローンしたリポジトリは、リモート バージョンには接続されたままなので、オンラインになったときに、ローカルで行った変更をリモート バージョンにプッシュすれば同期させることができます。
- term: クラスターリング
  description: >-
    複数のノードにわたって、またこれらのノード間の負荷分散リクエストにわたって、GitHub Enterprise サービスを実行する機能。
- term: コードの更新頻度のグラフ
  description: >-
    各週のコンテンツの追加と削除の回数をリポジトリの履歴に示すリポジトリ グラフ。
- term: 行動規範
  description: コミュニティへの参加方法の基準を定義したドキュメント。
- term: コード オーナー
  description: >-
    リポジトリのコードがある部分のオーナーに指名されたユーザー。コード オーナーが所有するコードを変更する pull request を他のユーザーが開くと、コード オーナーに対してレビューが自動的にリクエストされます。
- term: コラボレーター
  description: >-
    コラボレーターとは、リポジトリへの読み取りアクセスと書き込みアクセスを持ち、コントリビューションするようにリポジトリ オーナーが招待したユーザーのことです。
- term: コミット (commit)
  description: >-
    コミットは、ファイル (またはファイルのセット) に対する個別の変更のことであり、"リビジョン" とも呼ばれます。コミットして作業内容を保存すると、Git によって一意の ID ("SHA" や "ハッシュ" とも呼ばれます) が作成されます。この ID で、コミットした特定の変更や、作成したユーザーや日時の記録を保持することができます。通常、コミットには、変更の内容について簡潔に記述されたコミット メッセージが含まれています。
- term: コミット作者
  description: コミットを行うユーザー。
- term: コミット グラフ
  description: >-
    1 つのリポジトリに対して過去 1 年間で行われたすべてのコミットを示すリポジトリ グラフ。
- term: コミット ID
  description: SHA とも呼ばれます。コミットを識別する 40 文字のチェックサム ハッシュ。
- term: コミット メッセージ
  description: >-
    コミットに付ける短い説明テキスト。コミットによって行われる変更について伝えます。
- term: 比較ブランチ
  description: >-
    pull request の作成に使うブランチ。このブランチは、pull request で選んだベース ブランチと比較されて、変更内容が特定されます。pull request がマージされると、このベース ブランチは、比較ブランチからの変更を使って更新されます。pull request の "ヘッド ブランチ" とも呼ばれます。
- term: 継続的インテグレーション
  description: >-
    CI とも呼ばれます。GitHub 上に構成されたリポジトリに対してユーザーが変更をコミットすると、自動化されたビルドとテストを実行するプロセス。CI は、ソフトウェア開発の一般的なベスト プラクティスであり、エラーの検出に役立ちます。
- term: コントリビューション グラフ
  description: >-
    ユーザーのプロファイルの一部であり、過去最大 1 年間の 1 日ごとのコントリビューションを示します。
- term: コントリビューション ガイドライン
  description: ユーザーがプロジェクトにコントリビューションする方法を説明したドキュメント。
- term: コントリビューション
  description: >-
    ユーザーのコントリビューション グラフに正方形を追加 (「[コントリビューションとして何がカウントされるか](/articles/viewing-contributions-on-your-profile/#what-counts-as-a-contribution)」) したり、ユーザーのプロファイルでユーザーのタイムラインにアクティビティを追加 (「[コントリビューション アクティビティ](/articles/viewing-contributions-on-your-profile/#contribution-activity)」) したりする、GitHub での特定のアクティビティ。
- term: 共同作成者
  description: >-
    共同作成者とは、リポジトリへのコラボレーター アクセスはないものの、プロジェクトに対してコントリビューションを行い、オープンした pull request をリポジトリにマージさせたユーザーのことです。
- term: 共同作成者グラフ
  description: リポジトリの共同作成者上位 100 人を表示するリポジトリ グラフ。
- term: クーポン
  description: >-
    ユーザーや Organization がサブスクリプション全体または一部の支払いに使うことができる、GitHub が指定したコード。
- term: cron
  description: Unix のようなコンピューター オペレーティング システムでの、時間ベースのジョブ スケジューラ。
- term: cURL
  description: データを転送するためにコマンド ラインまたはスクリプトで使用されます。
- term: dashboard
  description: >-
    パーソナル ダッシュボードは、GitHub でのアクティビティのメイン ハブです。パーソナル ダッシュボードでは、フォロー中または作業中の issue や pull request を記録したり、トップ リポジトリやチームのページにアクセスしたり、watch 中または参加中のリポジトリの最近のアクティビティについて把握したりすることができます。また、フォロー中のユーザーや、Star を付けたリポジトリに基づいた、お勧めの新しいリポジトリを見つけることもできます。特定の Organization でのアクティビティのみを表示するには、Organization のダッシュボードにアクセスしてください。詳しくは、「[パーソナル ダッシュボードについて](/articles/about-your-personal-dashboard)」または「[Organization ダッシュボードについて](/articles/about-your-organization-dashboard)」を参照してください。
- term: 既定のブランチ
  description: >-
    リポジトリ内の新しい pull request とコードのコミットのためのベース ブランチです。それぞれのリポジトリには、ブランチが 1 つ以上ありますが、これは、リポジトリを初期化すると Git によって作成されるものです。通常、最初のブランチは {% ifversion ghes < 3.2 %}"master"{% else %}"main"{% endif %} という名前のものですが、たいていは既定のブランチです。
- term: 依存グラフ
  description: >-
    パブリック リポジトリに依存するパッケージ、プロジェクト、リポジトリを示すリポジトリ グラフ。
- term: 依存関係グラフ
  description: >-
    リポジトリが依存するパッケージとプロジェクトを示すリポジトリ グラフ。
- term: デプロイ キー
  description: >-
    デプロイ キーは、サーバー上に格納されている SSH キーのことで、単一の GitHub リポジトリへのアクセス権の付与に使います。このキーは、個人用ユーザー アカウントにアタッチされるのではなく、リポジトリに直接アタッチされます。
- term: デタッチされた HEAD
  description: >-
    Git では、デタッチされた HEAD で作業しようとすると、Git によってブランチがポイントされていないという警告や、ユーザーが行ったコミットがコミット履歴に表示されないという警告が表示されます。 たとえば、チェックアウトした任意のコミットが、特定のブランチの最新のコミットではない場合、"デタッチされた HEAD" で作業をしていることになります。
- term: 診断
  description: GitHub Enterprise インスタンスの設定と環境の概要。
- term: diff
  description: >-
    diff とは、2 つのコミットまたは保存された変更間の差異のことです。diff では、最後のコミット以降にファイルに追加されたかファイルから削除されたものを視覚的に説明します。
- term: directory
  description: >-
    1 つ以上のファイルまたはフォルダーを含むフォルダー。ディレクトリを作成すると、リポジトリの内容を整理できます。
- term: ダーティ
  description: >-
    ワーキング ツリーは、現在のブランチにコミットされていない修正が含まれている場合は、"ダーティ" と見なされます。
- term: 電子メール通知
  description: ユーザーのメール アドレスに送信される通知。
- term: Enterprise アカウント
  description: "Enterprise アカウントでは、複数の Organization のポリシーと支払いを一元管理できます。{% data reusables.gated-features.enterprise-accounts %}"
- term: エクスプローラー
  description: >-
    GraphiQL のインスタンスであり、"グラフィカルな対話型ブラウザー内 GraphQL IDE" です。
- term: fast-forward
  description: >-
    fast-forward とは、リビジョンがあり、かつ別のブランチでの変更を "マージしている" が、その変更が偶然にもそのリビジョンの子孫である場合の、特別なタイプのマージのことです。そのような場合は、新しいマージ コミットを行いませんが、代わりに、このリビジョンに対して更新を行います。これは、リモート リポジトリのリモート追跡ブランチで頻繁に起こります。
- term: 機能ブランチ
  description: >-
    新しい機能の実験や、本番には存在しない issue の修正に使うブランチ。トピック ブランチとも呼ばれます。
- term: フェンスされたコード ブロック
  description: "コード ブロックの前後に 3 つのバックティック (\\ \\ \\) を使って、GitHub Flavored Markdown で作成できるコードのインデント付きブロック。こちらの[例](/articles/creating-and-highlighting-code-blocks#fenced-code-blocks)を参照してください。"
- term: fetch
  description: >-
    "git fetch" は、変更をコミットせずに、リモート リポジトリからローカルで作業中のブランチに追加する場合に使います。"git pull" とは異なり、変更を、ローカル ブランチにコミットする前にレビューできます。
- term: フォロー (ユーザー)
  description: 別のユーザーのコントリビューションとアクティビティについて通知を受けること。
- term: フォース プッシュ
  description: >-
    競合を考慮することなく、リモート リポジトリをローカルな変更で上書きする Git プッシュ。
- term: フォーク
  description: >-
    フォークとは、自分のアカウントに存在する別のユーザーのリポジトリの個人用のコピーのことです。フォークすると、元の上流リポジトリに影響を与えることなく、プロジェクトに対して自由に変更を加えることができます。また、上流リポジトリで pull request を開いたり、両方のリポジトリが接続されたままなので、自分が行ったフォークを最新の変更に同期させ続けたりすることもできます。
- term: Free プラン
  description: >-
    無料のユーザー アカウントお支払いプラン。ユーザーは、無制限のパブリック リポジトリで、無制限のコラボレーターと共同作業できます。
- term: gist
  description: >-
    gist とは、共有可能なファイルであり、GitHub 上で編集、クローン、フォークできます。gist を、{% ifversion ghae %}内部{% else %}パブリック{% endif %}またはシークレットの gist にすることができますが、シークレット gist は、URL を持つ{% ifversion ghae %}すべての Enterprise メンバー {% else %}すべてのユーザー{% endif %}が使用できます。
- term: Git
  description: >-
    Git は、テキスト ファイルの変更を追跡するためのオープン ソース プログラムです。Linux オペレーティング システムの作成者によって記述されたもので、ソーシャルなユーザー インターフェイスである GitHub は、その最上位に構築された中核となるテクノロジです。
- term: GitHub App
  description: >-
    GitHub App は、Organization 全体に対してサービスを提供します。また、機能の実行には、独自の ID が使用されます。Organization やユーザー アカウントに直接インストールすることができ、特定のリポジトリへのアクセス権も付与されます。細かな権限が付与されており、Webhook が組み込まれています。
- term: GitHub Flavored Markdown
  description: "GitHub 全体で文章やコードを書式設定するために使用される、GitHub 固有の Markdown。「[GitHub Flavored Markdown の仕様](https://github.github.com/gfm/)」または「[GitHub での記述と書式設定の開始](/articles/getting-started-with-writing-and-formatting-on-github)」を参照してください。"
- term: GitHub Importer
  description: >-
    コミットやリビジョン履歴などのソース コード リポジトリを、ユーザーに代わってすばやく GitHub にインポートするツール。
- term: GitHub Jobs
  description: >-
    GitHub ユーザーが関心を持ちそうな仕事について雇用主が投稿できる GitHub サイト。
- term: GitHub Marketplace
  description: >-
    GitHub ユーザーや Organization 向けの、ワークフローを拡張して補完するアプリケーションを購入してインストールするためのサブサイト。
- term: GitHub ページ
  description: >-
    Pages とも呼ばれます。個人、Organization、またはプロジェクトのページを GitHub リポジトリから直接ホストするように設計された、静的サイト ホスティング サービス。
- term: GitHub Wiki
  description: wiki スタイルのドキュメントを GitHub リポジトリ上でホストするためのセクション。
- term: gitfile
  description: >-
    プレーンな ".git" ファイル。常に、ワーキング ツリーのルートに存在し、Git リポジトリ全体とそのメタ データが含まれる Git ディレクトリをポイントしています。このファイルは、リポジトリが実際のリポジトリであれば、コマンド ラインに "git rev-parse --git-dir" が含まれます。
- term: GraphQL
  description: >-
    API のクエリ言語であり、既存のデータを使ってクエリを実行するためのランタイムです。
- term: HEAD
  description: ブランチの定義済みコミット。通常は、ブランチの先頭にある最新のコミットです。
- term: head ブランチ
  description: "pull request をマージすると、このブランチの変更がベース ブランチに組み込まれます。\"比較ブランチ\" とも呼ばれます。"
- term: 'Hello, World'
  description: >-
    "Hello, World!" プログラムは、"Hello, World!" をユーザーに対して出力または表示するコンピューター プログラムです。このプログラムは通常、非常に単純なので、プログラミング言語の基本的な構文の例として使用されることが多く、一般的に、新しいプログラミング言語を学習するための最初の演習として使用されます。
- term: high-availability
  description: >-
    長時間継続して稼働させるのが望ましいシステムまたはコンポーネント。
- term: フック
  description: >-
    いくつかの GitHub コマンドでは、コマンドの正常な実行中に、オプションのスクリプトに対してコールアウトが行われるので、開発者は機能やチェックを追加することができます。一般的には、フックすると、コマンドが事前に検証されて終了してしまったり、操作の完了後に事後通知が表示されたりする可能性があります。
- term: hostname
  description: >-
    ネットワークに接続されているデバイスのアドレスに対応する、人間が判読可能なニックネーム。
- term: アイデンティコン
  description: >-
    ユーザーが GitHub にサインアップするときに既定のプロフィール写真として使用される、自動生成された画像。ユーザーは、アイデンティコンを自分のプロフィール写真に置き換えることができます。
- term: ID プロバイダー
  description: >-
    IdP とも呼ばれます。他の Web サイトへのアクセスに SAML シングル サインオン (SSO) を使うことができる、信頼できるプロバイダー。
- term: instance
  description: >-
    Organization の GitHub のプライベートコピー。Organization によって構成され、制御されている仮想マシン内に含まれています。
- term: 統合
  description: >-
    GitHub と統合されるサードパーティ アプリケーション。これは、GitHub Apps、OAuth Apps、または Webhook である場合があります。
- term: イシュー
  description: >-
    issue とは、リポジトリに関する改善の提案、タスク、または質問のことです。issue は、あらゆるユーザーが作成することができ (パブリック リポジトリの場合)、リポジトリのコラボレーターによってモデレートされます。各 issue には、独自のディスカッション スレッドが含まれています。また、ラベルを付けて分類したり、他のユーザーに割り当てたりすることもできます。
- term: Jekyll
  description: 個人、プロジェクト、または Organization のサイト用の静的サイトジェネレータ。
- term: Jekyll テーマ選択画面
  description: >-
    Jekyll サイトで、CSS ファイルを編集したりコピーしたりせずに、ビジュアル テーマを選ぶ自動化された方法。
- term: キー フィンガープリント
  description: 長い公開キーを識別するのに使用される、短いバイトのシーケンス。
- term: キーチェーン
  description: macOS のパスワード管理システム。
- term: キーワード (keyword)
  description: pull request 内で使用される場合、issue をクローズする特定の単語。
- term: label
  description: >-
    issue または pull request に付けるタグ。リポジトリには、既定のラベルがいくつかありますが、ユーザーはカスタム ラベルを作成することができます。
- term: LFS
  description: >-
    Git Large File Storage。大きいファイルをバージョン管理するためのオープンソース Git 拡張機能。
- term: license
  description: >-
    ソース コードを使ってできることとできないことをユーザーに知らせるためにプロジェクトに含めることができるドキュメント。
- term: Linguist
  description: >-
    GitHub で使用されるライブラリ。BLOB 言語を検出し、バイナリ ファイルやベンダーされたファイルを無視し、diff で生成されたファイルを非表示にし、言語別グラフを生成します。
- term: 行コメント
  description: 特定のコード行についての、pull request 内にあるコメント。
- term: 行終端
  description: >-
    テキスト ファイルの行末をシンボル化する、1 つ以上の非表示の文字。
- term: ロックされた個人用アカウント
  description: >-
    ユーザーがアクセスできない個人用アカウント。ユーザーが有料アカウントから無料アカウントに変更したり、有料プランの支払い期限を過ぎたりすると、アカウントはロックされます。
- term: 管理コンソール
  description: >-
    GitHub Enterprise インターフェイス内にある、管理機能を含むセクション。
- term: Markdown
  description: >-
    Markdown は、非常に簡潔なセマンティック ファイル形式で、.doc、.rtf、.txt にやや近いものです。Markdown は、文章 (リンク、一覧、箇条書きなどを含む) を書いて Web サイトのように表示させるというような Web 発行の経験がないユーザーにとっても取り扱いやすいものです。GitHub では、Markdown をサポートするとともに、GitHub Flavored Markdown という名前の特別な形式の Markdown を使っています。「[GitHub Flavored Markdown の仕様](https://github.github.com/gfm/)」または「[GitHub での記述と書式設定の開始](/articles/getting-started-with-writing-and-formatting-on-github)」を参照してください。
- term: マークアップ
  description: ドキュメントの注釈と書式設定を行うためのシステム。
- term: メイン
  description: >-
    {% ifversion fpt or ghes > 3.1 or ghae %} 既定の開発ブランチ。Git リポジトリを作成するたびに、"main" という名前のブランチが作成され、アクティブなブランチになります。ほとんどの場合、これにはローカル開発が含まれますが、あくまでも規則によるものであり、必須ではありません。{% else %}リポジトリの既定のブランチには、"master" という名前が代わりに選択されることもよくあります。{% endif %}
- term: master
  description: >-
    多くの Git リポジトリの既定のブランチ。既定では、コマンド ラインで新しい Git リポジトリを作成すると、"master" という名前のブランチが作成されます。多くのツールでは、既定のブランチに別の名前を使うようになってきています。{% ifversion fpt or ghes > 3.1 or ghae %} たとえば、GitHub で新しいリポジトリを作成する場合、既定のブランチは "main" という名前です。{% endif %}
- term: メンバー グラフ
  description: リポジトリのすべてのフォークを示すリポジトリ グラフ。
- term: メンション
  description: >-
    ユーザー名の前に @ 記号を付けることで、そのユーザーに送信される通知。GitHub の Organization のユーザーも、メンションされるチームの一員にすることができます。
- term: merge
  description: >-
    マージとは、1 つのブランチから (同じリポジトリ内で、またはフォークから) 変更を取得し、その変更を別のブランチに適用することです。これは、多くの場合、"pull request" (マージのリクエストと考えてもよいでしょう) として、またはコマンド ライン経由で行われます。マージは、競合する変更がない場合や、常にコマンド ライン経由で行われる場合は、GitHub.com Web インターフェイス経由で pull request を介して行われます。
- term: マージの競合
  description: >-
    マージされたブランチ間で発生する差異。マージの競合は、複数のユーザーが同じファイルの同じ行に異なる変更を加えた場合や、1 人のユーザーがファイルを編集し、別のユーザーがその同じファイルを削除した場合に発生します。ブランチをマージするには、マージの競合を解決しておく必要があります。
- term: マイルストーン
  description: >-
    リポジトリ内にある issue や pull request のグループの進行状況を追跡する方法。
- term: ミラー
  description: リポジトリの新しいコピー。
- term: 入れ子チーム
  description: >-
    親チームの子チーム。ユーザーは、複数の子チーム (または入れ子チーム) を持つことができます。
- term: ネットワーク グラフ
  description: >-
    ルート リポジトリのブランチや、ネットワーク固有のコミットを含むフォークのブランチなど、リポジトリ ネットワーク全体のブランチ履歴を示すリポジトリグラフ。
- term: ニュース フィード
  description: >-
    Watch しているリポジトリまたはユーザーのアクティビティ ビュー。Organization のニュース フィードには、Organization が所有するリポジトリでのアクティビティが表示されます。
- term: non-fast-forward
  description: >-
    リポジトリのローカル コピーが上流リポジトリと同期されておらず、ローカルの変更をプッシュするには、上流の変更をフェッチする必要がある場合。
- term: 通知 (notification)
  description: >-
    関心のあるアクティビティについての情報を提供するアップデート。設定に応じて、Web またはメールで届きます。
- term: OAuth App
  description: >-
    ユーザーに関する情報にアクセスするために、パスワードではなくアクセス トークンが使用されるサードパーティ アプリケーション。
- term: OAuth トークン
  description: ユーザーに関する情報にアクセスするために OAuth Apps で使用されるアクセス トークン。
- term: 外部コラボレーター
  description: >-
    Organization の 1 つ以上のリポジトリへのアクセス権が付与されているが、その Organization への他のアクセス権は付与されておらず、その Organization のメンバーではないユーザー。
- term: オープン ソース
  description: >-
    オープン ソース ソフトウェアとは、あらゆるユーザーが自由に使い、変更し、共有できるソフトウェアのことです (形式の変更の有無は問いません)。今日の "オープン ソース" の概念は、ソフトウェアの枠を超えて語られることが多く、あらゆるユーザーがオンラインで素材をフォーク、変更、ディスカッション、コントリビューションを行うことができるという意味でのコラボレーションという考え方を表しています。
- term: organization
  description: >-
    Organization とは、通常、実際の組織を反映する、2 人以上のユーザーのグループのことです。Organization の管理はユーザーが行い、リポジトリとチームの両方を含めることができます。
- term: Organization オーナー
  description: 所有する Organization の管理機能へのフル アクセスを持つユーザー。
- term: origin
  description: >-
    既定の上流リポジトリ。ほとんどのプロジェクトには、追跡対象となっている 1 つ以上の上流プロジェクトがあります。既定では、origin がその目的で使用されます。
- term: owner
  description: >-
    Organization のすべての管理機能へのアクセスを持つ Organization メンバー。
- term: 親チーム
  description: >-
    入れ子チーム内で、子チームによるアクセス権限と @メンションの継承元となっているメイン チーム。
- term: 参加通知
  description: >-
    自分のユーザー名またはチームがメンションされていた、または以前コメント内で返信していた issue や pull request 内の会話のアップデートについての通知。
- term: パーマリンク
  description: 特定の Web ページへの永続的な静的ハイパーリンク。
- term: 個人用アカウント
  description: >-
    個々のユーザーに属している GitHub アカウント。
- term: プライマリ メール アドレス
  description: >-
    領収書や、クレジットカードまたは PayPal の支払いなど、GitHub からの支払い関連の連絡の送信先となる主要なメール アドレス。
- term: 固定リポジトリ
  description: >-
    ユーザーがアピールのために自分のプロフィールに表示することにしたリポジトリ。
- term: pre-receive フック
  description: >-
    GitHub Enterprise サーバー上で実行されるスクリプトで、品質チェックの実装に使うことができます。
- term: プライベート コントリビューション
  description: プライベート リポジトリ (パブリック リポジトリではなく) に対して行われるコントリビューション。
- term: プライベートリポジトリ
  description: >-
    プライベート リポジトリは、オーナーが指定したリポジトリ オーナーとコラボレーターにのみ表示されます。
- term: 本番ブランチ
  description: >-
    すぐに使用できる状態になっており、アプリケーションやサイトへのデプロイの準備が完了している、最終変更を含むブランチ。
- term: profile
  description: GitHub 上でのユーザーのアクティビティに関する情報を示すページ。
- term: プロフィール写真
  description: >-
    ユーザーが、自分のアクティビティを特定できるように GitHub にアップロードするカスタム画像。通常は、ユーザー名も記載されます。これは、アバターとも呼ばれます。
- term: プロジェクト ボード
  description: >-
    issue、pull request、メモから成る GitHub 内のボード。列内では、カードとして分類されます。
- term: 保護されたブランチ
  description: >-
    保護されたブランチを使うと、リポジトリ管理者が保護対象として選んだブランチ上で、Git のいくつかの機能がブロックされます。このブランチに対して強制プッシュや削除はできません。また、必要なチェックに合格していない状態や必要なレビューが承認されていない状態で変更をマージしたり、GitHub Web インターフェイスからファイルをアップロードしたりすることはできません。保護されたブランチは通常、既定のブランチです。
- term: パブリック コントリビューション
  description: パブリック リポジトリ (プライベート リポジトリではなく) に対して行われるコントリビューション。
- term: パブリック リポジトリ
  description: >-
    パブリック リポジトリは、GitHub ユーザーではないユーザーも含め、すべてのユーザーが見ることができます。
- term: プル (pull)
  description: >-
    プルとは、変更をフェッチしてマージすることを指します。たとえば、自分が作業しているファイルを他のユーザーが編集した場合に、その変更を自分のローカル コピーにプルして、最新の状態になるようにすることです。「フェッチ」も参照してください。
- term: プル アクセス
  description: 読み取りアクセスの同義語。
- term: pull request
  description: >-
    pull request とは、リポジトリに対して提案された変更のことです。ユーザーがこれを送信すると、リポジトリのコラボレーターはこれを受け入れるか拒否します。issue と同様に、pull request にはそれぞれ独自のディスカッション フォーラムがあります。
- term: pull request レビュー
  description: >-
    コラボレーターからの pull request についてのコメント。pull request がマージされる前に、変更を承認したり、その他の変更を要求したりします。
- term: パルス グラフ
  description: リポジトリのアクティビティの概要を示すリポジトリ グラフ。
- term: パンチ グラフ
  description: >-
    リポジトリのアップデートの頻度を、曜日ごと、または時刻ごとに示すリポジトリ グラフ
- term: push
  description: >-
    プッシュとは、コミットした変更を GitHub.com 上のリモート リポジトリに送信するという意味です。たとえば、ローカルで何かを変更した場合、その変更をプッシュすると、他のユーザーがアクセスできるようになります。
- term: ブランチをプッシュする
  description: >-
    リモート リポジトリへのブランチのプッシュが成功したら、ローカル ブランチからの変更でリモート ブランチを更新します。"ブランチをプッシュする" と、Git では、リモート リポジトリ内にあるブランチの HEAD ref の検索と、それがブランチのローカル HEAD ref の直接の先祖であることの検証が行われます。検証されると、Git によって、すべてのオブジェクト (ローカル HEAD ref から到達可能で、リモート リポジトリにはないもの) がリモート オブジェクト データベースにプルされて、リモート HEAD ref が更新されます。リモート HEAD がローカル HEAD の先祖ではない場合、プッシュは失敗です。
- term: プッシュ アクセス
  description: 書き込みアクセスの同義語。
- term: 読み取りアクセス
  description: >-
    リポジトリでの権限レベル。これにより、ユーザーは、リポジトリからの情報のプルや読み取りが許可されます。読み取りアクセスは、すべてのパブリック リポジトリによって、すべての GitHub ユーザーに付与されます。プル アクセスの同義語。
- term: README
  description: リポジトリ内のファイルに関する情報を含むテキスト ファイル。通常、リポジトリの訪問者に表示される最初のファイルです。README ファイルは、リポジトリ ライセンス、投稿ガイドライン、行動規範とともに、期待値の共有や、プロジェクトへのコントリビューションの管理に役立ちます。
- term: リベース
  description: >-
    ブランチからの複数の変更を別のベースに再適用して、そのブランチの HEAD を結果にリセットすること。
- term: リカバリー コード
  description: GitHub アカウントへのアクセスを再取得できるようにするコード。
- term: release
  description: ソフトウェアをパッケージ化してユーザーに提供する、GitHub での方法。
- term: リモート
  description: >-
    これは、サーバー上 (ほとんどの場合 GitHub.com) でホストされるリポジトリまたはブランチのバージョンのことです。リモート バージョンは、ローカルのクローンに接続できるので、変更を同期させることができます。
- term: リモート リポジトリ
  description: >-
    同じプロジェクトの追跡に使用されるが、別の場所にあるリポジトリ。
- term: リモート URL
  description: >-
    コードが格納されている場所。GitHub 上のリポジトリや別のユーザーのフォークという場合もあれば、別のサーバーという場合もあります。
- term: レプリカ (replica)
  description: >-
    GitHub Enterprise のプライマリ インスタンスに対して冗長性を与える GitHub Enterprise インスタンス。
- term: repository
  description: >-
    リポジトリは、GitHub の最も基本的な要素です。プロジェクトのフォルダーと考えるのが最もわかりやすいでしょう。1 つのリポジトリには、すべてのプロジェクト ファイル (ドキュメントを含みます) が含まれ、各ファイルのリビジョン履歴が格納されます。リポジトリは、複数のコラボレーターが参加することができ、パブリックとプライベートのどちらにもすることができます。
- term: リポジトリのキャッシュ
  description: >-
    分散チームと CI クライアントの近くに配置される、GitHub Enterprise サーバー インスタンスのリポジトリの読み取り専用ミラー。
- term: リポジトリ グラフ
  description: リポジトリのデータの視覚的表現。
- term: リポジトリ メンテナ
  description: >-
    リポジトリを管理するユーザー。このユーザーは、リポジトリの作業を管理するために、issue のトリアージや、ラベルなどの機能の使用の支援を行うことができます。また、このユーザーには、README の維持管理や、ファイルを最新の状態に保つ責任もあります。
- term: pull request レビュー必須
  description: >-
    必須レビューを行うと、コラボレーターが保護されたブランチに対して変更を加える前に、pull request 内のレビューが少なくとも 1 つは確実に承認済みになります。
- term: ステータス チェック必須
  description: >-
    pull request に対するチェック。これを行うと、コラボレーターが保護されたブランチに対して変更を加える前に、すべての必須 CI テストに確実に合格します。
- term: resolve
  description: 失敗した自動マージで実行されなかったものを手動で修正するアクション。
- term: 打ち消し
  description: >-
    GitHub 上で pull request を打ち消すと、新しい pull request が自動的に開きます。これには、マージされた元の pull request からのマージ コミットを打ち消すコミットが 1 つ含まれます。Git では、コミットを打ち消すには "git revert" を使います。
- term: レビュー
  description: >-
    レビューでは、リポジトリへのアクセスを持つ他のユーザーが、pull request 内で提案されている変更についてコメントしたり、変更を承認したり、その pull request がマージされる前にさらに変更をリクエストしたりすることができます。
- term: ルート ディレクトリ
  description: 階層内の最初のディレクトリ。
- term: ルート ファイルシステム
  description: 基本オペレーティング システムと GitHub Enterprise アプリケーション環境。
- term: 返信テンプレート
  description: >-
    自分の GitHub ユーザー アカウントに保存したり追加したりすることで、GitHub のあらゆる場所で、issue や pull request に使うことができるコメント。
- term: scope
  description: >-
    OAuth App からリクエストできる、パブリック データと非パブリック データの両方へのアクセスの権限を、グループとして名前を付けたもの。
- term: シート
  description: >-
    GitHub Enterprise の Organization 内のユーザー。これは、"シート数" と呼ばれることがあります。
- term: シークレット チーム
  description: >-
    チームの他のユーザーと、オーナー権限を持つユーザーにのみ表示されるチーム。
- term: セキュリティ ログ
  description: >-
    最新の 50 個のアクションまたは過去 90 日間に実行されたアクションを一覧表示するログ。
- term: server-to-server リクエスト
  description: >-
    特定のユーザーとは無関係に、ボットとして機能するアプリケーションで使用される API 要求。たとえば、スケジュールどおりに実行され、長時間アクティビティがないと issue をクローズするアプリケーションなどがあります。このタイプの認証を使うアプリケーションでは、ライセンスされた GitHub アカウントを使わないため、特定の数のライセンスの使用が許可されているお支払いプランの Enterprise では、server-to-server ボットに GitHub ライセンスを 1 つも使いません。server-to-server リクエストに使うトークンは、[GitHub API](/rest/reference/apps#create-an-installation-access-token-for-an-app) 経由でプログラムによって取得します。「[user-to-server リクエスト](#user-to-server-request)」も参照してください。
- term: サービス フック
  description: >-
    "Webhook" とも呼ばれます。 Webhook を使うと、特定のアクションがリポジトリまたは Organization で発生した場合に、外部の Web サーバーへ通知を送信できます。
- term: シングル サインオン
  description: >-
    SSO とも呼ばれます。1 つの場所 (ID プロバイダー (IdP)) へのサインインをユーザーに許可してから、そのユーザーに他のサービス プロバイダーへのアクセス権を付与します。
- term: スナップショット
  description: ある時点での仮想マシンのチェックポイント。
- term: squash
  description: 複数のコミットを結合して 1 つのコミットにすること。Git コマンドとしても使います。
- term: SSH キー
  description: >-
    SSH キーは、暗号化したメッセージを使って、オンライン サーバーに対して自分自身を識別する方法です。自分のコンピューターに別のサービス用の独自の一意のパスワードが設定されているかのように見えます。{% data variables.product.product_name %} では、SSH キーを使って、コンピューターへの情報の転送が安全に行われます。
- term: ステージング インスタンス
  description: >-
    変更を実際の GitHub Enterprise インスタンスに適用する前にテストする方法。
- term: status
  description: >-
    コミットがコントリビューション先のリポジトリに設定されている条件を満たしていることの、pull request 内での視覚的な表現。
- term: ステータス チェック
  description: >-
    ステータス チェックとは、リポジトリにコミットするたびに実行される継続的インテグレーションのビルドのような、外部のプロセスです。詳しくは、「[ステータス チェックについて](/articles/about-status-checks)」を参照してください。
- term: 星
  description: >-
    リポジトリのブックマークまたは感謝の表現。星は、プロジェクトの人気をランク付けするための手動の方法です。
- term: subscription
  description: ユーザーまたは Organization の GitHub プラン。
- term: チーム
  description: >-
    Organization メンバーのグループ。アクセス権限とメンションのカスケードを使って、会社やグループの構造を反映します。
- term: チーム メンテナ
  description: >-
    チームを管理するために Organization オーナーが行使できる権限のサブセットが付与された Organization メンバー。
- term: Team プラン
  description: >-
    パブリック リポジトリとプライベート リポジトリを無制限に利用できる Organization のお支払いプラン。
- term: タイムライン
  description: pull request 内またはユーザー プロファイル上の一連のイベント。
- term: トピック ブランチ
  description: >-
    開発の分野を概念的に分類したものを識別するために開発者が使う、通常の Git ブランチ。ブランチは非常に簡単で低コストなので、小さなブランチを複数用意して、それぞれのブランチに、明確に定義した概念、小さな増分、関連する変更を含めるのがよいでしょう。機能ブランチとも呼ばれます。
- term: topics
  description: >-
    Git Hub で、特定の対象分野のリポジトリを探索したり、コントリビューション先となるプロジェクトを見つけたり、特定の問題への新しい解決方法を発見したりするための方法。
- term: トラフィック グラフ
  description: >-
    フル クローン (フェッチではなく)、過去 14 日間の訪問者数、参照サイト数、人気のコンテンツなど、リポジトリのトラフィックを示すリポジトリ グラフ。
- term: 転送
  description: >-
    リポジトリの転送には、リポジトリのオーナーの変更という意味があります。新しいオーナーは、リポジトリのコンテンツ、issue、pull request、リリース、設定の管理をすぐに行うことができるようになります。
- term: 上流
  description: >-
    ブランチまたはフォークについて説明する場合、元のリポジトリにあるプライマリ ブランチは、他の変更の主な発生源となるため、"上流" と呼ばれることがよくあります。そのため、ユーザーが作業するブランチやフォークは、"下流" と呼ばれます。origin とも呼ばれます。
- term: 上流ブランチ
  description: >-
    あるブランチにマージされる既定のブランチ (または、そのブランチのリベース先のブランチ)。"branch.<name>.remote" と "branch.<name>.merge" を使って構成されます。A の上流ブランチが origin/B だとすると、"A は origin/B を追跡している" という言い方をすることがあります。
- term: user
  description: >-
    ユーザーとは、個人用 GitHub アカウントを持つユーザーのことです。ユーザーはそれぞれ、個人用プロフィールを持っており、リポジトリ (パブリックとプライベートのどちらでも) を複数所有できます。Organization を作成したり、Organization に招待されて参加したり、別のユーザーのリポジトリでコラボレーションしたりすることもできます。
- term: username
  description: GitHub 上でのユーザーのハンドル。
- term: user-to-server リクエスト
  description: >-
    特定のユーザーの代わりにタスクを実行するアプリケーションで使用される API 要求。user-to-server 認証でタスクが実行された場合、GitHub には、ユーザーによってアプリケーション経由で実行済みとして表示されます。たとえば、サードパーティ アプリケーションから issue を作成すると、GitHub 上では、ユーザーの代わりにそのアプリケーションが issue を作成したことになります。user-to-server リクエストを使った、アプリケーションによる実行が可能なタスクは、アプリとユーザーの両方の権限とアクセスによって範囲が制限されます。user-to-server リクエストで使用されるトークンは、OAuth を介して取得します。詳しくは、「[GitHub アプリのユーザーを特定および認可する](/developers/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps)」を参照してください。 「[server-to-server リクエスト](#server-to-server-request)」も参照してください。
- term: 参照可能なチーム
  description: どの Organization メンバーにも表示され、@メンションできるチーム。
- term: watch
  description: >-
    リポジトリや issue を watch すると、issue や pull request が更新されるたびに通知を受け取ることができます。
- term: watch 対象の通知
  description: ユーザーがサブスクライブしているリポジトリでのアクティビティについての通知。
- term: Web 通知
  description: >-
    GitHub の Web インターフェイス (https://github.com/notifications) に表示される通知
- term: webhooks
  description: >-
    Webhook を使うと、GitHub.com の特定のイベントをサブスクライブする GitHub Apps をビルドまたはセットアップできます。Webhook を使うと、特定のアクションがリポジトリまたは Organization で発生した場合に、外部の Web サーバーへ通知を送信できます。サービス フックとも呼ばれます。
- term: 書き込みアクセス
  description: >-
    リポジトリへの変更のプッシュ、書き込み、変更をユーザーに許可する、リポジトリでの権限レベル。

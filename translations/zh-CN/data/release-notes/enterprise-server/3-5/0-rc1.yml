---
date: '2022-05-10'
release_candidate: true
deprecated: true
intro: |
  {% note %}

  **注意：** 如果 {% data variables.product.product_location %} 正在运行候选发行版，则无法使用热补丁进行升级。我们建议仅在测试环境中运行候选版本。

  {% endnote %}

  有关升级说明，请参阅“[升级 {% data variables.product.prodname_ghe_server %}](/admin/enterprise-management/updating-the-virtual-machine-and-physical-resources/upgrading-github-enterprise-server)”。
sections:
  features:
    - 
      heading: 维护后验证测试的 IP 例外列表
      notes:
        - |
          现在可以配置 IP 地址的允许列表，这些地址可以在启用维护模式时访问 GitHub 企业服务器实例上的应用程序服务。从允许的 IP 地址访问实例的 Web 界面的管理员可以在维护后和禁用维护模式之前验证实例的功能。更多信息请参阅“[启用和计划维护模式](/admin/configuration/configuring-your-enterprise/enabling-and-scheduling-maintenance-mode#validating-changes-in-maintenance-mode-using-the-ip-exception-list)”。
    - 
      heading: 自定义存储库角色已正式发布
      notes:
        - |
          借助自定义存储库角色，组织现在可以更精细地控制他们可以授予用户的存储库访问权限。有关更多信息，请参阅“[管理组织的自定义存储库角色](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)”。

          自定义存储库角色由组织所有者创建，并且可在该组织中的所有存储库中使用。可以为每个角色指定一个自定义名称和一个描述。它可以从一组 40 多个细致权限进行配置。创建后，存储库管理员可以将自定义角色分配给其存储库中的任何用户、团队或外部协作者。

          可以通过组织设置中新的 **Repository roles（存储库角色）**选项卡创建、查看、编辑和删除自定义存储库角色。一个组织内最多可以创建 3 个自定义角色。

          GitHub Enterprise Server REST API 中也完全支持自定义存储库角色。组织 API 可用于列出组织中的所有自定义存储库角色，并且用于向个人和团队授予存储库访问权限的现有 API 已扩展为支持自定义存储库角色。有关更多信息，请参阅 REST API 文档中的“[Organizations](/rest/reference/orgs#list-custom-repository-roles-in-an-organization)”。
    - 
      heading: 公共测试版中的 GitHub Container 注册表
      notes:
        - |
          GitHub 容器注册表 (GHCR) 现已在 GitHub Enterprise Server 3.5 中作为公共测试版提供，为开发人员提供了发布、下载和管理容器的功能。GitHub 包容器支持实现用于托管 Docker 映像的 OCI 标准。更多信息请参阅“[GitHub 容器注册表](/packages/working-with-a-github-packages-registry/working-with-the-container-registry)”。
    - 
      heading: Dependabot 更新已正式发布
      notes:
        - |
          Dependabot 版本和安全更新现已在 GitHub Enterprise Server 3.5 中正式发布。现在可以在 GitHub Enterprise Server 实例上设置 GitHub.com 存储库上的所有常用生态系统和功能。GitHub Enterprise Server 上的 Dependabot 需要 GitHub Actions 和自托管的 Dependabot 运行器池、启用 GitHub Connect、由管理员启用 Dependabot。更多信息请参阅“[设置 Dependabot 更新](https://docs.github.com/en/enterprise-server@3.5/admin/github-actions/enabling-github-actions-for-github-enterprise-server/setting-up-dependabot-updates)”。
    - 
      heading: 公开测试版中的服务器统计信息
      notes:
        - |
          现在，您可以分析团队的工作方式，了解从 GitHub 企业服务器获得的价值，并通过查看实例的使用数据并与 GitHub 共享此汇总数据来帮助我们改进产品。您可以使用自己的工具、通过在 CSV 或 JSON 文件中下载数据或者使用 REST API 访问数据，来分析一段时间内的使用情况。要查看收集的汇总指标列表，请参阅“[关于服务器统计信息](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics/about-server-statistics#server-statistics-data-collected)”。服务器统计信息数据不包含个人数据或 GitHub 内容，例如代码、问题、注释或拉取请求内容。 要更好地了解我们如何存储和保护服务器统计信息数据，请参阅“[GitHub Security](https://github.com/security)”。 有关服务器统计信息的详细信息，请参阅“[分析团队如何使用服务器统计信息](/admin/monitoring-activity-in-your-enterprise/analyzing-how-your-team-works-with-server-statistics)”。此功能在公开测试版中可用。
    - 
      heading: GitHub Actions 速率限制现在是可配置的
      notes:
        - |
          站点管理员现在可以为 GitHub Actions 启用和配置速率限制。默认情况下，速率限制处于禁用状态。当工作流作业无法立即分配给可用的运行程序时，它们将在队列中等待，直到运行程序可用。但是，如果 GitHub Actions 遇到持续的高负载，队列的备份速度可能会快于耗尽速度，并且 GitHub Enterprise Server 实例的性能可能会降低。为避免这种情况，管理员可以配置速率限制。当超过速率限制时，其他工作流程运行将立即失败，而不是放入队列中。一旦速率稳定在阈值以下，就可以再次对新运行进行排队。更多信息请参阅“[配置速率限制](/admin/configuration/configuring-your-enterprise/configuring-rate-limits#configuring-rate-limits-for-github-actions)”。
    - 
      heading: OpenID Connect (OIDC)，用于使用 GitHub Actions 进行安全部署
      notes:
        - |
          GitHub Enterprise Server 上的 GitHub Actions 现在支持 OIDC，用于安全部署到云提供商，云提供商使用针对每个部署自动轮换的短期令牌。OIDC 支持以下功能。

          - 云提供商和 GitHub Enterprise Server 之间的无缝身份验证，无需在实例上存储任何长期存在的云机密
          - 云管理员可以依靠特定云提供商的安全机制来确保 GitHub Actions 工作流对云资源的访问权限最小。GitHub Enterprise Server 和云之间没有重复的机密管理。

          有关更多信息，请参阅“[安全强化部署](/actions/deployment/security-hardening-your-deployments)”。
    - 
      heading: 在企业内共享 GitHub Actions 已正式发布
      notes:
        - |
          对内部存储库中 GitHub 操作的支持现已正式发布，适用于 GitHub 企业服务器实例上的组织。您可以通过共享内部存储库中的操作来实现内部源代码自动化。您可以管理存储库的设置，也可以使用 REST API 允许访问组织内或实例上任何组织中其他存储库中的工作流。更多信息请参阅 REST API 文档中的“[与企业共享操作和工作流程](/actions/creating-actions/sharing-actions-and-workflows-with-your-enterprise)”、“[管理存储库的 GitHub Actions 设置](/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-an-internal-repository)”和“[Actions 权限](/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository)”。
    - 
      heading: GitHub Enterprise Server 上对 GitHub Actions 的缓存支持现已正式发布
      notes:
        - |
          现在，可以使用依赖项缓存来加快 GitHub 操作工作流程。要缓存作业的依赖项，可以包含 [actions/cache](https://github.com/actions/cache) 操作来创建具有唯一键的缓存。您可以在同一存储库中的所有工作流程之间共享缓存。然后，这些工作流程可以还原缓存并更快地运行。

          Actions 用户还可以使用我们的缓存 API 来：

          - 为每个存储库允许的缓存大小范围定义企业策略。
          - 查询每个存储库中的缓存使用情况，并监视所有缓存的总大小是否达到上限。
          - 根据存储库的缓存要求，在允许的企业限制内增加存储库的最大缓存大小。
          - 在组织级别或企业级别监控聚合缓存使用情况。

          企业帐户中配置的外部 Blob 存储现在将在工作流程项目、日志和缓存之间共享。更多信息请参阅“[缓存依赖项以加快工作流程](/actions/using-workflows/caching-dependencies-to-speed-up-workflows)”。
    - 
      heading: 自动对在 Web UI 中进行的提交进行签名
      notes:
        - |
          现在可以将 GitHub Enterprise Server 配置为自动对在 Web 界面中进行的提交进行签名，例如通过编辑文件或合并拉取请求。签名提交可提高更改来自受信任来源的信心。此功能允许 [需要签名提交](/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#require-signed-commits) 分支保护设置来阻止未签名的提交进入存储库，同时允许输入签名提交 - 即使是在 Web 界面中进行的提交。更多信息请参阅“[配置 Web 提交签名](/admin/configuration/configuring-your-enterprise/configuring-web-commit-signing)”。
    - 
      heading: 随时同步许可证使用情况
      notes:
        - |
          对于使用 GitHub Connect 在 GitHub Enterprise Server 和 GitHub Enterprise Cloud 之间自动同步许可证使用情况的客户，您现在可以独立于每周自动同步来同步许可证使用情况。此功能还会报告同步作业的状态。更多信息请参阅“[在 GitHub Enterprise Server 和 GitHub Enterprise Cloud 之间同步许可证使用情况](/billing/managing-your-license-for-github-enterprise/syncing-license-usage-between-github-enterprise-server-and-github-enterprise-cloud#manually-syncing-license-usage)”。
    - 
      heading: GitHub Actions 的可重用工作流程已正式发布
      notes:
        - |
          可重用的工作流程现已正式发布。可重用工作流程使您能够重用整个工作流程，就好像它是一个操作一样，从而帮助您减少重复。随着正式发布，GitHub Enterprise Server 现在提供了许多改进。更多令牌请参阅“[重用工作流程](/actions/using-workflows/reusing-workflows)”。

          - 您可以利用输出将数据从可重用工作流程传递到调用方工作流程中的其他作业。
          - 您可以将环境机密传递给可重用的工作流程。
          - 审核日志包含有关使用哪些可重用工作流程的信息。
          - 与调用存储库相同的存储库中的可重用工作流程可以仅使用路径和文件名 （“PATH/FILENAME”） 进行引用。被调用的工作流程将来自与调用方工作流程相同的提交。
    - 
      heading: GitHub Actions 的自托管运行器现在可以禁用自动更新
      notes:
        - |
          现在，您可以更好地控制自托管运行器执行软件更新的时间。如果为运行器指定“--disableupdate”标志，则在有较新版本的运行器可用时，它不会尝试执行自动软件更新。这允许您根据自己的计划更新自托管运行器，如果您的自托管运行器位于容器中，则特别方便。

           为了与 GitHub Actions 服务兼容，您需要在新运行器版本可用后的 30 天内手动更新运行器。 有关如何安装最新运行器版本的说明，请参阅 [运行器存储库中的最新版本](https://github.com/actions/runner/releases) 的安装说明。
    - 
      heading: 通过限制工作流程来保护 GitHub Actions 的自托管运行器
      notes:
        - |
          组织所有者现在可以通过选择哪些工作流程可以访问运行器组来提高自托管运行器上 CI/CD 工作流程的安全性。以前，存储库中的任何工作流程（如议题标记器）都可以访问组织可用的自托管运行器。更多信息请参阅“[使用组管理对自托管运行器的访问](/actions/hosting-your-own-runners/managing-access-to-self-hosted-runners-using-groups#changing-what-workflows-can-access-a-runner-group)”和 [GitHub 博客](https://github.blog/2022-03-23-github-actions-secure-self-hosted-runners-specific-workflows/)。
    - 
      heading: 阻止 GitHub Actions 批准拉取请求
      notes:
        - |
          现在，您可以控制 GitHub Actions 是否可以批准拉取请求。此功能可防止用户使用 GitHub Actions 来满足“必需的审批”分支保护要求，并合并其他用户未审阅的更改。为了防止破坏现有工作流，默认情况下会启用“**允许 GitHub Actions 评审计入所需审批**”。组织所有者可以在组织的 GitHub Actions 设置中禁用该功能。更多信息请参阅“[为组织禁用或限制 GitHub Actions](/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#preventing-github-actions-from-approving-pull-requests)”。
    - 
      heading: 重新运行失败的或单个 GitHub Actions 作业
      notes:
        - |
          现在，可以仅重新运行失败的作业或 GitHub Actions 工作流程运行中的单个作业。更多信息请参阅“[重新运行工作流程和作业](/actions/managing-workflow-runs/re-running-workflows-and-jobs)”。
    - 
      heading: 依赖关系图支持 GitHub Actions
      notes:
        - |
          依赖项关系图现在检测 GitHub Actions 工作流程的 YAML 文件。GitHub Enterprise Server 将在**Insights（见解）**选项卡的依赖项关系图部分中显示工作流程文件。发布操作的存储库还可以从存储库主页上的“Used By（使用者）”控件中查看依赖于该操作的存储库的数量。更多信息请参阅“[关于依赖关系图](/code-security/supply-chain-security/understanding-your-software-supply-chain/about-the-dependency-graph)”。
    - 
      heading: 公开测试版企业安全概述
      notes:
        - |
          GitHub Advanced Security 客户现在可以查看企业级安全警报的概述。企业级新的“**Security（安全）**”选项卡提供了以存储库为中心的应用程序安全风险视图，以及所有机密扫描警报的以警报为中心的视图。更多信息请参阅“[关于安全性概述](/code-security/security-overview/about-the-security-overview)”。
    - 
      heading: 组织的安全视图已正式发布
      notes:
        - |
          组织级别的安全警报概述现已正式发布。GitHub Advanced Security 可以使用安全概述来查看以存储库为中心的应用程序安全风险视图，或者查看组织中所有存储库的所有代码扫描、Dependabot 和机密扫描警报的以警报为中心的视图。更多信息请参阅“[关于安全性概述](/code-security/security-overview/about-the-security-overview)”。
    - 
      heading: 代码扫描检测更多安全问题，支持新语言版本
      notes:
        - |
          代码扫描现在可以检测到大量 CWE，并且 CodeQL 代码扫描完全支持以下语言版本中的标准语言功能。

          - C# 10 / .NET 6
          - Python 3.10
          - Java 17
          - TypeScript 4.5

          更多信息请参阅 [GitHub 博客](https://github.blog/changelog/2022-02-25-code-scanning-detects-more-security-issues-supports-new-language-versions/)。
    - 
      heading: 查看整个组织中的代码扫描警报
      notes:
        - |
          GitHub Advanced Security 客户现在可以在组织的“**Security（安全）**”选项卡中查看代码扫描警报。此视图可供具有 [安全管理员角色](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) 的组织所有者和团队成员使用。更多信息请参阅“[关于安全性概述](/code-security/security-overview/about-the-security-overview)”。
        - |
          用户现在可以通过 REST API 在 GitHub Enterprise Server 实例上检索组织的代码扫描警报。这个新的 API 端点补充了现有的 [存储库端点](/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository)。更多信息请参阅 REST API 文档中的 [代码扫描](/rest/code-scanning)。
    - 
      heading: 秘密扫描可用作推送保护
      notes:
        - |
          GitHub Enterprise Server 现在可以高置信度阻止检测到令牌的任何推送。开发人员可以通过提供为什么需要通过 Web UI 提交密钥的详细信息来绕过该阻止。更多信息请参阅“[使用机密扫描保护推送](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)”。
    - 
      heading: 使用过机密扫描的自定义图案试运行
      notes:
        - |
          GitHub Advanced Security 客户现在可以在组织或存储库级别试运行自定义机密扫描模式。试运行允许具有所有者或管理员访问权限的人员在发布模式和生成警报之前查看和完善其模式。您可以编写一个模式，然后使用**保存并试运行**来检索结果。扫描通常只需几秒钟，但当试运行结果准备就绪时，GitHub Enterprise Server 还将通过电子邮件通知组织所有者或存储库管理员。更多信息请参阅“[关于机密扫描](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)”和“[为机密扫描定义自定义模式](/code-security/secret-scanning/defining-custom-patterns-for-secret-scanning)”。
    - 
      heading: 机密扫描自定义模式事件现在位于审计日志中
      notes:
        - |
          审核日志现在包括与机密扫描自定义模式关联的事件。此数据可帮助 GitHub Advanced Security 客户了解对其 [repository](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#repository_secret_scanning_custom_pattern-category-actions)、[organization](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#org_secret_scanning_custom_pattern-category-actions) 或 [enterprise](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#business_secret_scanning_custom_pattern-category-actions) 级安全性和合规性审核执行的操作。更多信息请参阅“[查看组织的审核日志](/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization)”或“[查看企业的审核日志](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise)”。
    - 
      heading: 使用自定义存储库角色配置机密扫描的权限
      notes:
        - |
          现在，您可以在管理自定义存储库角色时为机密扫描配置两个新权限。

          - 查看机密扫描结果 -

          - 忽略或重新打开机密扫描结果

          更多信息请参阅“[管理组织的自定义存储库角色](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)”。
    - 
      heading: 机密扫描现在支持存档的存储库
      notes:
        - |
          GitHub Advanced Security 客户现在可以通过 UI 和 API 为存档的存储库启用机密扫描。更多信息请参阅 REST API 文档中的“[关于机密扫描](/code-security/secret-scanning/about-secret-scanning#about-secret-scanning-for-private-repositories)”、“[关于存档的存储库](/repositories/archiving-a-github-repository/archiving-repositories)”和“[Repositories](/rest/repos/repos#update-a-repository)”。
    - 
      heading: 警报位置的机密扫描 web 挂钩
      notes:
        - |
          使用机密扫描的 GitHub Advanced Security 客户现在可以选择在新位置检测到机密时接收 web 挂钩。“secret_scanning_alert_location”web 挂钩事件包括位置详细信息（如提交 SHA）和检测的关联警报。将为包含检测到的机密的每个新文件路径创建一个位置。更多信息请参阅“[web 挂钩事件和有效负载](/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#secret_scanning_alert_location)”。
    - 
      heading: 查看整个组织的 Dependabot 警报
      notes:
        - |
          GitHub Advanced Security 客户现在可以在组织的“**Security（安全）**”选项卡中查看 Dependabot 警报。此视图可供具有 [安全管理员角色](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization) 的组织所有者和团队成员使用。更多信息请参阅“[关于安全性概述](/code-security/security-overview/about-the-security-overview)”。
    - 
      heading: 使用自定义存储库角色配置 Dependabot 警报的权限
      notes:
        - |
          现在，您可以在管理自定义存储库角色时为 Dependabot 警报配置两个新权限。

          -
          查看 Dependabot 警报 -

          关闭或重新打开 Dependabot 警报 有关更多信息，请参阅“[管理组织的自定义存储库角色](/organizations/managing-peoples-access-to-your-organization-with-roles/managing-custom-repository-roles-for-an-organization)”。
    - 
      heading: 重新打开忽略的 Dependabot 警报
      notes:
        - |
          现在，您可以通过已关闭警报的 UI 页面重新打开已消除的 Dependabot 警报。这不会影响 Dependabot 拉取请求或 GraphQL API。更多信息请参阅“[关于 Dependabot 警报](/code-security/dependabot/dependabot-alerts/about-dependabot-alerts)”。
    - 
      heading: 对 Dependabot 版本更新的发布支持已公开测试
      notes:
        - |
          Dependabot 版本更新的用户现在可以主动更新使用 Pub 包管理器的 Flutter 或 Dart 项目的依赖项。

          要在您自己的 Dart 或 Flutter 存储库上测试 [版本更新](/code-security/dependabot/dependabot-version-updates/about-dependabot-version-updates)，请在 <code>[.github/dependabot.yaml](/code-security/dependabot/dependabot-version-updates/configuring-dependabot-version-updates#enabling-dependabot-version-updates)</code> 中添加以下配置文件。请注意“包生态系统：”pub“和”enable-beta-ecosystems: true“标志。
          ```yaml
          version: 2
          enable-beta-ecosystems: true
          updates:
            - package-ecosystem: "pub"
              directory: "/"
              schedule:
                interval: "weekly"
          ```
    - 
      heading: 通过 GraphQL API 查看与存储库的 Dependabot 警报关联的拉取请求
      notes:
        - |
          新的“DependabotUpdate”GraphQL 对象允许您查看有关存储库安全更新发生的情况的信息。当 GitHub Enterprise Server 检测到存储库中的依赖项有漏洞时，Dependabot 将尝试打开拉取请求以将该依赖项更新为无漏洞的版本。现在，您可以看到修复漏洞的拉取请求。在某些情况下，Dependabot 无法打开拉取请求。以前，Dependabot 生成的错误消息仅在“安全”选项卡的“Dependabot 警报”部分可见。现在，如果 Dependabot 在尝试打开安全警报的拉取请求时遇到错误，您可以使用 GraphQL API 确定原因。更多信息请参阅 GraphQL API 文档中的“[Objects](/graphql/reference/objects#dependabotupdate)”。
    - 
      heading: 通过 GraphQL API 访问有关 Dependabot 警报的更多信息
      notes:
        - |
          现在，您可以使用 GraphQL API 查看来自 Dependabot 的固定警报。还可以按状态和唯一数字标识符进行访问和筛选，并且可以按漏洞警报对象的状态进行筛选。“RepositoryVulnerabilityAlert”的以下字段现在存在。

          - `number`
          - `fixed_at`
          - `fix_reason`
          - `state`

          更多信息请参阅 GraphQL API 文档中的“[Objects](/graphql/reference/objects#repositoryvulnerabilityalert)”。
    - 
      heading: 企业审核日志中的 Git 事件
      notes:
        - |
          以下与 Git 相关的事件现在可以显示在企业审核日志中。如果启用该功能并设置审核日志保留期，则新事件将可用于通过 UI 和 API 进行搜索，或通过 JSON 或 CSV 导出。

          - 'git.clone'
          - 'git.fetch'
          - 'git.push'

          由于记录了大量的 Git 事件，我们建议您监控实例的文件存储并查看相关的警报配置。有关详细信息，请参阅“[企业的审核日志事件](/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/audit-log-events-for-your-enterprise#git-category-actions)”和“[Monitoring storage](/admin/enterprise-management/monitoring-your-appliance/recommended-alert-thresholds#monitoring-storage)”。
    - 
      heading: 对 CODEOWNERS 的改进
      notes:
        - |
          此版本包括对 CODEOWNERS 的改进。

          - 现在，从 Web 查看 CODEOWNERS 文件时会出现语法错误。以前，当 CODEOWNERS 文件中的某一行出现语法错误时，该错误将被忽略，或者在某些情况下会导致整个 CODEOWNERS 文件无法加载。GitHub 应用程序和操作可以使用新的 REST 和 GraphQL API 访问相同的错误列表。有关更多信息，请参阅 REST API 文档中的“[Repositories]（/rest/repos/repos#list-codeowners-errors）”或 GraphQL API 文档中的“[Objects](/graphql/reference/objects#repositorycodeowners)”。
          - 在某人创建新的拉取请求或将新更改推送到草稿拉取请求后，将请求审阅的任何代码所有者现在都列在“审阅者”下的拉取请求中。此功能可让您提前了解在拉取请求标记为已准备好进行审核后，将请求审阅的人员。
          - CODEOWNERS 文件中的注释现在可以出现在一行的末尾，而不仅仅是在专用行上。

          有关更多信息，请参阅“[关于代码所有者](/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)”。
    - 
      heading: 使拉取请求的主题分支保持最新状态的更多方法
      notes:
        - |
          通过拉取请求页面上的**Update branch（更新分支）**按钮，您可以使用基本分支中的最新更改来更新拉取请求的分支。这对于在合并之前验证更改是否与基本分支的当前版本兼容非常有用。现在，两项增强功能为您提供了更多方法来使您的分支保持最新状态。

          - 当拉取请求的主题分支与基本分支一起过期时，您现在可以选择通过重新基于最新版本的基础分支来更新它。重新定基将分支中的更改应用到基本分支的最新版本，从而生成具有线性历史记录的分支，因为不会创建合并提交。若要通过变基进行更新，请单击**Update branch（更新分支）**按钮旁边的下拉菜单，单击**Update with rebase（使用变基更新）**，然后单击**Rebase branch（变基分支）**。以前，**Update branch（更新分支）**执行了传统的合并，该合并始终导致拉取请求分支中的合并提交。此选项仍然可用，但现在您可以选择。更多信息请参阅“[保持您的拉取请求与基本分支同步](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/keeping-your-pull-request-in-sync-with-the-base-branch)”。

          - 新的存储库设置允许**Update branch（更新分支）**按钮在拉取请求的主题分支与基本分支不是最新的时始终可用。以前，仅当启用了**Require branches to be up to date before merging（要求分支在合并之前保持最新）**分支保护设置时，此按钮才可用。具有管理员或维护者访问权限的人员可以从存储库设置中的**Pull Requests（拉取请求）**部分中管理**Always suggest updating pull request branches（始终建议更新拉取请求分支）**设置。更多信息请参阅“[管理更新拉取请求分支的建议](/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-suggestions-to-update-pull-request-branches)”。
    - 
      heading: 为 GitHub Pages 网站配置自定义 HTTP 标头
      notes:
        - |
          现在，您可以配置自定义 HTTP 标头，这些标头适用于 GitHub 企业服务器实例提供的所有 GitHub Pages 站点。更多信息请参阅“[为您的企业配置 GitHub 页面](/admin/configuration/configuring-your-enterprise/configuring-github-pages-for-your-enterprise#configuring-github-pages-response-headers-for-your-enterprise)”。
    - 
      heading: 在追溯视图中忽略提交
      notes:
        - |
          现在，通过在存储库的根目录中创建 _.git-blame-ignore-revs_ 文件，可以忽略责备视图中的修订。更多信息请参阅“[查看文件](/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view)”。
    - 
      heading: 浅色高对比度主题已正式发布
      notes:
        - |
          现在，前景和背景元素之间对比度更高的浅色高对比度主题现已正式发布。更多信息请参阅“[管理您的主题设置](/account-and-profile/setting-up-and-managing-your-github-user-account/managing-user-account-settings/managing-your-theme-settings)”。
    - 
      heading: 标记保护规则
      notes:
        - |
          存储库所有者现在可以配置标签保护规则来保护存储库的标签。受标记保护规则保护后，与指定名称模式匹配的标签只能由存储库中具有“维护”或“管理员”角色的用户创建和删除。更多信息请参阅“[配置标记保护规则](/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-tag-protection-rules)”。
  bugs:
    - |
      GitHub 应用程序现在可以上传发布资产。
  changes:
    - |
      要将设备授权流用于 OAuth 和 GitHub 应用程序，必须手动启用该功能。此更改通过确保集成商了解风险并有意识地选择支持这种形式的身份验证，降低了在针对 GitHub 企业服务器用户的网络钓鱼攻击中使用应用的可能性。如果您拥有或管理 OAuth 应用程序或 GitHub 应用程序，并且想要使用设备流，则可以通过应用的设置页为您的应用程序启用它。设备流 API 端点将使用状态代码“400”响应尚未启用此功能的应用程序。更多信息请参阅“[授权 OAuth Apps](/developers/apps/building-oauth-apps/authorizing-oauth-apps#device-flow)”。
    - |
      代码扫描警报页现在始终显示默认分支的警报状态和信息。侧边栏中有一个新的“受影响的分支”面板，您可以在其中查看其他分支中的警报状态。如果默认分支中不存在警报，则警报页面将显示上次看到警报的位置的状态为“分支中”或“拉取请求中”。通过此改进，可以更轻松地了解已引入到代码库中的警报的状态。更多令牌请参阅“[关于代码扫描警报](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-alert-details)”。

      警报列表页不会更改，可以按“分支”进行筛选。可以使用代码扫描 API 检索更详细的警报分支信息。更多信息请参阅 REST API 文档中的“[代码扫描](/rest/code-scanning)”。
    - |
      代码扫描现在显示警报的分析来源的详细信息。如果警报具有多个分析源，则会显示在“受影响的分支”边栏和警报时间线中。您可以将鼠标悬停在“受影响的分支”边栏中的分析源图标上，以查看每个分析源中的警报状态。如果警报只有一个分析源，则警报页面上不会显示有关分析源的信息。这些改进将使人们更容易理解警报。特别是，它将帮助您了解具有多个分析源的那些。这对于具有多个分析配置的设置（如单存储库）特别有用。更多令牌请参阅“[关于代码扫描警报](/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-alerts#about-analysis-origins)”。
    - |
      用户或组织拥有的存储库列表现在具有附加的筛选器选项“模板”，以便更轻松地查找模板存储库。
    - |
      GitHub Enterprise Server 可以显示几种常见的图像格式，包括 PNG、JPG、GIF、PSD 和 SVG，并提供多种方法来比较版本之间的差异。现在，在拉取请求中查看添加或更改的图像时，默认情况下会显示这些图像的预览。以前，您会看到一条消息，表示无法显示二进制文件，您需要切换“显示多差异”选项。更多信息请参阅“[使用非代码文件](/repositories/working-with-files/using-files/working-with-non-code-files)”。
    - |
      现在，将使用默认分支名称“main”或用户设置中定义的备用默认分支名称创建新 gist。这与在 GitHub Enterprise Server 上创建其他存储库的方式相匹配。更多信息请参阅“[关于分支](/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-branches#about-the-default-branch)”和“[管理存储库的默认分支名称](/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-personal-account-settings/managing-the-default-branch-name-for-your-repositories)”。
    - |
      Gists 现在只在首次显示时显示 30 条最新评论。您可以单击“**加载较早的评论...**”以查看更多内容。这允许具有许多注释的要点更快地显示。更多信息请参阅“[使用 gist 编辑和共享内容](/get-started/writing-on-github/editing-and-sharing-content-with-gists)”。
    - |
      重新设计了用户、组织、存储库和团队的设置页面，将类似的设置页面分组为多个部分，以改进信息体系结构和可发现性。更多信息请参阅 [GitHub 变更日志](https://github.blog/changelog/2022-02-02-redesign-of-githubs-settings-pages/)。
    - |
      Focusing or hovering over a label now displays the label description in a tooltip.
    - |
      Creating and removing repository invitations, whether done through the API or web interface, are now subject to rate limits that may be enabled on your GitHub Enterprise Server instance. For more information about rate limits, see "[Configuring rate limits](/admin/configuration/configuring-your-enterprise/configuring-rate-limits)."
    - |
      MinIO has announced the removal of the MinIO Gateways starting June 1st, 2022. While MinIO Gateway for NAS continues to be one of the supported storage providers for Github Actions and Github Packages, we recommend moving to MinIO LTS support to avail support and bug fixes from MinIO. For more information about rate limits, see "[Scheduled removal of MinIO Gateway for GCS, Azure, HDFS in the minio/minio repository](https://github.com/minio/minio/issues/14331)."
  deprecations:
    - 
      heading: Change to the format of authentication tokens
      notes:
        - |
          GitHub Connect will no longer work after June 3rd for instances running GitHub Enterprise Server 3.1 or older, due to the format of GitHub authentication tokens changing. For more information, see the [GitHub changelog](https://github.blog/changelog/2021-03-31-authentication-token-format-updates-are-generally-available/).
    - 
      heading: CodeQL runner deprecated in favor of CodeQL CLI
      notes:
        - |
          The CodeQL runner is deprecated in favor of the CodeQL CLI. GitHub Enterprise Server 3.4 and later no longer include the CodeQL runner. This deprecation only affects users who use CodeQL code scanning in 3rd party CI/CD systems. GitHub Actions users are not affected. GitHub strongly recommends that customers migrate to the CodeQL CLI, which is a feature-complete replacement for the CodeQL runner and has many additional features. For more information, see "[Migrating from the CodeQL runner to CodeQL CLI](/code-security/code-scanning/using-codeql-code-scanning-with-your-existing-ci-system/migrating-from-the-codeql-runner-to-codeql-cli)."
    - 
      heading: GitHub Pages 的主题选取器已被删除
      notes:
        - |
          GitHub Pages 的主题选取器已从页面设置中删除。有关 GitHub Pages 主题配置的更多信息，请参阅“[使用 Jekyll 向 GitHub Pages 站点添加主题](/pages/setting-up-a-github-pages-site-with-jekyll/adding-a-theme-to-your-github-pages-site-using-jekyll)”。
  known_issues:
    - 在新建的没有任何用户的 {% data variables.product.prodname_ghe_server %} 实例上，攻击者可以创建第一个管理员用户。
    - 自定义防火墙规则在升级过程中被删除。
    - Git LFS 跟踪的文件[通过 Web 界面上传](https://github.com/blog/2105-upload-files-to-your-repositories) 被错误地直接添加到仓库。
    - 如果议题包含文件路径长于 255 个字符的同一仓库中 blob 的永久链接，则议题无法关闭。
    - 对 GitHub Connect 启用“用户可以搜索 GitHub.com”后，私有和内部仓库中的议题不包括在 GitHub.com 搜索结果中。
    - '{% data variables.product.prodname_registry %} npm 注册表不再返回元数据响应的时间值。这样做是为了大幅改善性能。作为元数据响应的一部分，我们继续拥有返回时间值所需的所有数据，并将在我们解决现有性能问题后恢复返回这个值。'
    - 特定于处理预接收挂钩的资源限制可能会导致某些预接收挂钩失败。
    - Actions services need to be restarted after restoring an appliance from a backup taken on a different host.
